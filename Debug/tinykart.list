
tinykart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b68c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b95c  0800b95c  0001b95c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b9e4  0800b9e4  0001b9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800b9e8  0800b9e8  0001b9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800b9ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800ba58  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800bab8  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2400012c  0800bb18  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240005a8  0800bb18  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a50d  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aa4  00000000  00000000  0003a6aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0003d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f0f  00000000  00000000  0003e488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034938  00000000  00000000  0003f397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a76  00000000  00000000  00073ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001541fa  00000000  00000000  0008c745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059ec  00000000  00000000  001e0940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001e632c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400012c 	.word	0x2400012c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b944 	.word	0x0800b944

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000130 	.word	0x24000130
 800030c:	0800b944 	.word	0x0800b944

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006b0:	f000 ff30 	bl	8001514 <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_TIM_PWM_Start(&htim1, 1);
 80006b4:	2101      	movs	r1, #1
 80006b6:	480f      	ldr	r0, [pc, #60]	; (80006f4 <main+0x48>)
 80006b8:	f007 faba 	bl	8007c30 <HAL_TIM_PWM_Start>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006bc:	f000 f822 	bl	8000704 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c0:	f000 fa3a 	bl	8000b38 <MX_GPIO_Init>
	MX_DMA_Init();
 80006c4:	f000 fa18 	bl	8000af8 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80006c8:	f000 f9c2 	bl	8000a50 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 80006cc:	f000 fa0c 	bl	8000ae8 <MX_USB_OTG_HS_USB_Init>
	MX_TIM1_Init();
 80006d0:	f000 f8d6 	bl	8000880 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 80006d4:	f000 f970 	bl	80009b8 <MX_USART2_UART_Init>
	MX_ETH_Init();
 80006d8:	f000 f886 	bl	80007e8 <MX_ETH_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		HAL_UART_Receive_DMA(&huart2, rx_buffer, 47);
 80006dc:	222f      	movs	r2, #47	; 0x2f
 80006de:	4906      	ldr	r1, [pc, #24]	; (80006f8 <main+0x4c>)
 80006e0:	4806      	ldr	r0, [pc, #24]	; (80006fc <main+0x50>)
 80006e2:	f008 fa03 	bl	8008aec <HAL_UART_Receive_DMA>

		printf("balls: %f", rx_buffer[10]);
 80006e6:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <main+0x4c>)
 80006e8:	7a9b      	ldrb	r3, [r3, #10]
 80006ea:	4619      	mov	r1, r3
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <main+0x54>)
 80006ee:	f00a fab3 	bl	800ac58 <iprintf>
	while (1) {
 80006f2:	e7f3      	b.n	80006dc <main+0x30>
 80006f4:	24000230 	.word	0x24000230
 80006f8:	2400041c 	.word	0x2400041c
 80006fc:	2400027c 	.word	0x2400027c
 8000700:	0800b95c 	.word	0x0800b95c

08000704 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b09c      	sub	sp, #112	; 0x70
 8000708:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800070a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070e:	224c      	movs	r2, #76	; 0x4c
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f00a faf5 	bl	800ad02 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f00a faef 	bl	800ad02 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000724:	2002      	movs	r0, #2
 8000726:	f004 fcc9 	bl	80050bc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	4b2d      	ldr	r3, [pc, #180]	; (80007e4 <SystemClock_Config+0xe0>)
 8000730:	699b      	ldr	r3, [r3, #24]
 8000732:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000736:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <SystemClock_Config+0xe0>)
 8000738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800073c:	6193      	str	r3, [r2, #24]
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <SystemClock_Config+0xe0>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800074a:	bf00      	nop
 800074c:	4b25      	ldr	r3, [pc, #148]	; (80007e4 <SystemClock_Config+0xe0>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000758:	d1f8      	bne.n	800074c <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800075a:	2321      	movs	r3, #33	; 0x21
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800075e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076c:	2302      	movs	r3, #2
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 27;
 8000774:	231b      	movs	r3, #27
 8000776:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 8000778:	2301      	movs	r3, #1
 800077a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000784:	230c      	movs	r3, #12
 8000786:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000788:	2300      	movs	r3, #0
 800078a:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000790:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000794:	4618      	mov	r0, r3
 8000796:	f004 fccb 	bl	8005130 <HAL_RCC_OscConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xa0>
		Error_Handler();
 80007a0:	f000 fad0 	bl	8000d44 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007a4:	233f      	movs	r3, #63	; 0x3f
 80007a6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a8:	2303      	movs	r3, #3
 80007aa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007b4:	2340      	movs	r3, #64	; 0x40
 80007b6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80007b8:	2350      	movs	r3, #80	; 0x50
 80007ba:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c2:	2340      	movs	r3, #64	; 0x40
 80007c4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f005 f88a 	bl	80058e4 <HAL_RCC_ClockConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0xd6>
		Error_Handler();
 80007d6:	f000 fab5 	bl	8000d44 <Error_Handler>
	}
}
 80007da:	bf00      	nop
 80007dc:	3770      	adds	r7, #112	; 0x70
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58024800 	.word	0x58024800

080007e8 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ETH_Init+0x80>)
 80007ee:	4a1f      	ldr	r2, [pc, #124]	; (800086c <MX_ETH_Init+0x84>)
 80007f0:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 80007f2:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <MX_ETH_Init+0x88>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 80007f8:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <MX_ETH_Init+0x88>)
 80007fa:	2280      	movs	r2, #128	; 0x80
 80007fc:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 80007fe:	4b1c      	ldr	r3, [pc, #112]	; (8000870 <MX_ETH_Init+0x88>)
 8000800:	22e1      	movs	r2, #225	; 0xe1
 8000802:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <MX_ETH_Init+0x88>)
 8000806:	2200      	movs	r2, #0
 8000808:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800080a:	4b19      	ldr	r3, [pc, #100]	; (8000870 <MX_ETH_Init+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <MX_ETH_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ETH_Init+0x80>)
 8000818:	4a15      	ldr	r2, [pc, #84]	; (8000870 <MX_ETH_Init+0x88>)
 800081a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ETH_Init+0x80>)
 800081e:	2201      	movs	r2, #1
 8000820:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ETH_Init+0x80>)
 8000824:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_ETH_Init+0x8c>)
 8000826:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ETH_Init+0x80>)
 800082a:	4a13      	ldr	r2, [pc, #76]	; (8000878 <MX_ETH_Init+0x90>)
 800082c:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_ETH_Init+0x80>)
 8000830:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000834:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000836:	480c      	ldr	r0, [pc, #48]	; (8000868 <MX_ETH_Init+0x80>)
 8000838:	f003 fe5a 	bl	80044f0 <HAL_ETH_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ETH_Init+0x5e>
		Error_Handler();
 8000842:	f000 fa7f 	bl	8000d44 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000846:	2238      	movs	r2, #56	; 0x38
 8000848:	2100      	movs	r1, #0
 800084a:	480c      	ldr	r0, [pc, #48]	; (800087c <MX_ETH_Init+0x94>)
 800084c:	f00a fa59 	bl	800ad02 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_ETH_Init+0x94>)
 8000852:	2221      	movs	r2, #33	; 0x21
 8000854:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_ETH_Init+0x94>)
 8000858:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800085c:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_ETH_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	24000180 	.word	0x24000180
 800086c:	40028000 	.word	0x40028000
 8000870:	2400044c 	.word	0x2400044c
 8000874:	240000cc 	.word	0x240000cc
 8000878:	2400006c 	.word	0x2400006c
 800087c:	24000148 	.word	0x24000148

08000880 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b098      	sub	sp, #96	; 0x60
 8000884:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000886:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]
 80008a2:	615a      	str	r2, [r3, #20]
 80008a4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2234      	movs	r2, #52	; 0x34
 80008aa:	2100      	movs	r1, #0
 80008ac:	4618      	mov	r0, r3
 80008ae:	f00a fa28 	bl	800ad02 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008b2:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008b4:	4a3f      	ldr	r2, [pc, #252]	; (80009b4 <MX_TIM1_Init+0x134>)
 80008b6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 2 * 1080 - 1;
 80008b8:	4b3d      	ldr	r3, [pc, #244]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008ba:	f640 026f 	movw	r2, #2159	; 0x86f
 80008be:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b3b      	ldr	r3, [pc, #236]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008cc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80008d4:	4b36      	ldr	r3, [pc, #216]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b35      	ldr	r3, [pc, #212]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008e0:	4833      	ldr	r0, [pc, #204]	; (80009b0 <MX_TIM1_Init+0x130>)
 80008e2:	f007 f94d 	bl	8007b80 <HAL_TIM_PWM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x70>
		Error_Handler();
 80008ec:	f000 fa2a 	bl	8000d44 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008f4:	2300      	movs	r3, #0
 80008f6:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000900:	4619      	mov	r1, r3
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <MX_TIM1_Init+0x130>)
 8000904:	f007 ff66 	bl	80087d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800090e:	f000 fa19 	bl	8000d44 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000912:	2360      	movs	r3, #96	; 0x60
 8000914:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800091e:	2300      	movs	r3, #0
 8000920:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092a:	2300      	movs	r3, #0
 800092c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800092e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	481e      	ldr	r0, [pc, #120]	; (80009b0 <MX_TIM1_Init+0x130>)
 8000938:	f007 fa96 	bl	8007e68 <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8000942:	f000 f9ff 	bl	8000d44 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000946:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800094a:	2204      	movs	r2, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4818      	ldr	r0, [pc, #96]	; (80009b0 <MX_TIM1_Init+0x130>)
 8000950:	f007 fa8a 	bl	8007e68 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0xde>
			!= HAL_OK) {
		Error_Handler();
 800095a:	f000 f9f3 	bl	8000d44 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000972:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000976:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000980:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800098a:	2300      	movs	r3, #0
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_TIM1_Init+0x130>)
 8000994:	f007 ffba 	bl	800890c <HAL_TIMEx_ConfigBreakDeadTime>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM1_Init+0x122>
			!= HAL_OK) {
		Error_Handler();
 800099e:	f000 f9d1 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009a2:	4803      	ldr	r0, [pc, #12]	; (80009b0 <MX_TIM1_Init+0x130>)
 80009a4:	f000 fade 	bl	8000f64 <HAL_TIM_MspPostInit>

}
 80009a8:	bf00      	nop
 80009aa:	3760      	adds	r7, #96	; 0x60
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	24000230 	.word	0x24000230
 80009b4:	40010000 	.word	0x40010000

080009b8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <MX_USART2_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 80009c2:	4b21      	ldr	r3, [pc, #132]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009c4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80009c8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a00:	4811      	ldr	r0, [pc, #68]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a02:	f008 f823 	bl	8008a4c <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000a0c:	f000 f99a 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a14:	f009 ff93 	bl	800a93e <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a1e:	f000 f991 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a26:	f009 ffc8 	bl	800a9ba <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a30:	f000 f988 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <MX_USART2_UART_Init+0x90>)
 8000a36:	f009 ff49 	bl	800a8cc <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000a40:	f000 f980 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	2400027c 	.word	0x2400027c
 8000a4c:	40004400 	.word	0x40004400

08000a50 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a56:	4a23      	ldr	r2, [pc, #140]	; (8000ae4 <MX_USART3_UART_Init+0x94>)
 8000a58:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a5a:	4b21      	ldr	r3, [pc, #132]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b16      	ldr	r3, [pc, #88]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000a98:	4811      	ldr	r0, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000a9a:	f007 ffd7 	bl	8008a4c <HAL_UART_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000aa4:	f000 f94e 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000aac:	f009 ff47 	bl	800a93e <HAL_UARTEx_SetTxFifoThreshold>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ab6:	f000 f945 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000aba:	2100      	movs	r1, #0
 8000abc:	4808      	ldr	r0, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000abe:	f009 ff7c 	bl	800a9ba <HAL_UARTEx_SetRxFifoThreshold>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000ac8:	f000 f93c 	bl	8000d44 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_USART3_UART_Init+0x90>)
 8000ace:	f009 fefd 	bl	800a8cc <HAL_UARTEx_DisableFifoMode>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000ad8:	f000 f934 	bl	8000d44 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24000310 	.word	0x24000310
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000aec:	bf00      	nop
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <MX_DMA_Init+0x3c>)
 8000b00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b04:	4a0b      	ldr	r2, [pc, #44]	; (8000b34 <MX_DMA_Init+0x3c>)
 8000b06:	f043 0301 	orr.w	r3, r3, #1
 8000b0a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <MX_DMA_Init+0x3c>)
 8000b10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2100      	movs	r1, #0
 8000b20:	200b      	movs	r0, #11
 8000b22:	f000 fe78 	bl	8001816 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b26:	200b      	movs	r0, #11
 8000b28:	f000 fe8f 	bl	800184a <HAL_NVIC_EnableIRQ>

}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	58024400 	.word	0x58024400

08000b38 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b3e:	f107 031c 	add.w	r3, r7, #28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	4b71      	ldr	r3, [pc, #452]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b54:	4a6f      	ldr	r2, [pc, #444]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b5e:	4b6d      	ldr	r3, [pc, #436]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	61bb      	str	r3, [r7, #24]
 8000b6a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6c:	4b69      	ldr	r3, [pc, #420]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b72:	4a68      	ldr	r2, [pc, #416]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7c:	4b65      	ldr	r3, [pc, #404]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b62      	ldr	r3, [pc, #392]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b90:	4a60      	ldr	r2, [pc, #384]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9a:	4b5e      	ldr	r3, [pc, #376]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000b9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba8:	4b5a      	ldr	r3, [pc, #360]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bae:	4a59      	ldr	r2, [pc, #356]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb8:	4b56      	ldr	r3, [pc, #344]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbe:	f003 0302 	and.w	r3, r3, #2
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc6:	4b53      	ldr	r3, [pc, #332]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bcc:	4a51      	ldr	r2, [pc, #324]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd6:	4b4f      	ldr	r3, [pc, #316]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bdc:	f003 0310 	and.w	r3, r3, #16
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000be4:	4b4b      	ldr	r3, [pc, #300]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bea:	4a4a      	ldr	r2, [pc, #296]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bec:	f043 0308 	orr.w	r3, r3, #8
 8000bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf4:	4b47      	ldr	r3, [pc, #284]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c02:	4b44      	ldr	r3, [pc, #272]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c08:	4a42      	ldr	r2, [pc, #264]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c12:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <MX_GPIO_Init+0x1dc>)
 8000c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin | LED_RED_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c26:	483c      	ldr	r0, [pc, #240]	; (8000d18 <MX_GPIO_Init+0x1e0>)
 8000c28:	f004 fa2e 	bl	8005088 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin,
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c32:	483a      	ldr	r0, [pc, #232]	; (8000d1c <MX_GPIO_Init+0x1e4>)
 8000c34:	f004 fa28 	bl	8005088 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2102      	movs	r1, #2
 8000c3c:	4838      	ldr	r0, [pc, #224]	; (8000d20 <MX_GPIO_Init+0x1e8>)
 8000c3e:	f004 fa23 	bl	8005088 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4833      	ldr	r0, [pc, #204]	; (8000d24 <MX_GPIO_Init+0x1ec>)
 8000c58:	f004 f86e 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_RED_Pin;
 8000c5c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4828      	ldr	r0, [pc, #160]	; (8000d18 <MX_GPIO_Init+0x1e0>)
 8000c76:	f004 f85f 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c7e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4822      	ldr	r0, [pc, #136]	; (8000d1c <MX_GPIO_Init+0x1e4>)
 8000c94:	f004 f850 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000c98:	2380      	movs	r3, #128	; 0x80
 8000c9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	481e      	ldr	r0, [pc, #120]	; (8000d28 <MX_GPIO_Init+0x1f0>)
 8000cae:	f004 f843 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4819      	ldr	r0, [pc, #100]	; (8000d2c <MX_GPIO_Init+0x1f4>)
 8000cc8:	f004 f836 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000cde:	230a      	movs	r3, #10
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4810      	ldr	r0, [pc, #64]	; (8000d2c <MX_GPIO_Init+0x1f4>)
 8000cea:	f004 f825 	bl	8004d38 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_GPIO_Init+0x1e8>)
 8000d06:	f004 f817 	bl	8004d38 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3730      	adds	r7, #48	; 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	58024400 	.word	0x58024400
 8000d18:	58020400 	.word	0x58020400
 8000d1c:	58020c00 	.word	0x58020c00
 8000d20:	58021000 	.word	0x58021000
 8000d24:	58020800 	.word	0x58020800
 8000d28:	58021800 	.word	0x58021800
 8000d2c:	58020000 	.word	0x58020000

08000d30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <HAL_MspInit+0x30>)
 8000d58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d5c:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <HAL_MspInit+0x30>)
 8000d5e:	f043 0302 	orr.w	r3, r3, #2
 8000d62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <HAL_MspInit+0x30>)
 8000d68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	58024400 	.word	0x58024400

08000d84 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
 8000d9a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a59      	ldr	r2, [pc, #356]	; (8000f08 <HAL_ETH_MspInit+0x184>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	f040 80ab 	bne.w	8000efe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000da8:	4b58      	ldr	r3, [pc, #352]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000daa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dae:	4a57      	ldr	r2, [pc, #348]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000db8:	4b54      	ldr	r3, [pc, #336]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000dba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dc2:	623b      	str	r3, [r7, #32]
 8000dc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dc6:	4b51      	ldr	r3, [pc, #324]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000dc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dcc:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd6:	4b4d      	ldr	r3, [pc, #308]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000dd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000de4:	4b49      	ldr	r3, [pc, #292]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000de6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dea:	4a48      	ldr	r2, [pc, #288]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df4:	4b45      	ldr	r3, [pc, #276]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000df6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e02:	4b42      	ldr	r3, [pc, #264]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e08:	4a40      	ldr	r2, [pc, #256]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e12:	4b3e      	ldr	r3, [pc, #248]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b3a      	ldr	r3, [pc, #232]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e26:	4a39      	ldr	r2, [pc, #228]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e30:	4b36      	ldr	r3, [pc, #216]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3e:	4b33      	ldr	r3, [pc, #204]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e44:	4a31      	ldr	r2, [pc, #196]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	60fb      	str	r3, [r7, #12]
 8000e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e62:	4a2a      	ldr	r2, [pc, #168]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6c:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e7a:	2332      	movs	r3, #50	; 0x32
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e8a:	230b      	movs	r3, #11
 8000e8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e92:	4619      	mov	r1, r3
 8000e94:	481e      	ldr	r0, [pc, #120]	; (8000f10 <HAL_ETH_MspInit+0x18c>)
 8000e96:	f003 ff4f 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e9a:	2386      	movs	r3, #134	; 0x86
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eaa:	230b      	movs	r3, #11
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <HAL_ETH_MspInit+0x190>)
 8000eb6:	f003 ff3f 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ecc:	230b      	movs	r3, #11
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4810      	ldr	r0, [pc, #64]	; (8000f18 <HAL_ETH_MspInit+0x194>)
 8000ed8:	f003 ff2e 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000edc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ee0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eee:	230b      	movs	r3, #11
 8000ef0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4808      	ldr	r0, [pc, #32]	; (8000f1c <HAL_ETH_MspInit+0x198>)
 8000efa:	f003 ff1d 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3738      	adds	r7, #56	; 0x38
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40028000 	.word	0x40028000
 8000f0c:	58024400 	.word	0x58024400
 8000f10:	58020800 	.word	0x58020800
 8000f14:	58020000 	.word	0x58020000
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	58021800 	.word	0x58021800

08000f20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0b      	ldr	r2, [pc, #44]	; (8000f5c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10e      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <HAL_TIM_PWM_MspInit+0x40>)
 8000f34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f38:	4a09      	ldr	r2, [pc, #36]	; (8000f60 <HAL_TIM_PWM_MspInit+0x40>)
 8000f3a:	f043 0301 	orr.w	r3, r3, #1
 8000f3e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f42:	4b07      	ldr	r3, [pc, #28]	; (8000f60 <HAL_TIM_PWM_MspInit+0x40>)
 8000f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	40010000 	.word	0x40010000
 8000f60:	58024400 	.word	0x58024400

08000f64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a13      	ldr	r2, [pc, #76]	; (8000fd0 <HAL_TIM_MspPostInit+0x6c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d11f      	bne.n	8000fc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_TIM_MspPostInit+0x70>)
 8000f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8c:	4a11      	ldr	r2, [pc, #68]	; (8000fd4 <HAL_TIM_MspPostInit+0x70>)
 8000f8e:	f043 0310 	orr.w	r3, r3, #16
 8000f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f96:	4b0f      	ldr	r3, [pc, #60]	; (8000fd4 <HAL_TIM_MspPostInit+0x70>)
 8000f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f9c:	f003 0310 	and.w	r3, r3, #16
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000fa4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_TIM_MspPostInit+0x74>)
 8000fc2:	f003 feb9 	bl	8004d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fc6:	bf00      	nop
 8000fc8:	3720      	adds	r7, #32
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40010000 	.word	0x40010000
 8000fd4:	58024400 	.word	0x58024400
 8000fd8:	58021000 	.word	0x58021000

08000fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0bc      	sub	sp, #240	; 0xf0
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ff4:	f107 0320 	add.w	r3, r7, #32
 8000ff8:	22b8      	movs	r2, #184	; 0xb8
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f009 fe80 	bl	800ad02 <memset>
  if(huart->Instance==USART2)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a7a      	ldr	r2, [pc, #488]	; (80011f0 <HAL_UART_MspInit+0x214>)
 8001008:	4293      	cmp	r3, r2
 800100a:	f040 80a1 	bne.w	8001150 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800100e:	f04f 0202 	mov.w	r2, #2
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800101a:	2300      	movs	r3, #0
 800101c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001020:	f107 0320 	add.w	r3, r7, #32
 8001024:	4618      	mov	r0, r3
 8001026:	f004 ffe9 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001030:	f7ff fe88 	bl	8000d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	4b6f      	ldr	r3, [pc, #444]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001036:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800103a:	4a6e      	ldr	r2, [pc, #440]	; (80011f4 <HAL_UART_MspInit+0x218>)
 800103c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001040:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001044:	4b6b      	ldr	r3, [pc, #428]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001046:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800104a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104e:	61fb      	str	r3, [r7, #28]
 8001050:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	4b68      	ldr	r3, [pc, #416]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001058:	4a66      	ldr	r2, [pc, #408]	; (80011f4 <HAL_UART_MspInit+0x218>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001062:	4b64      	ldr	r3, [pc, #400]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
 800106e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001070:	4b60      	ldr	r3, [pc, #384]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001072:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001076:	4a5f      	ldr	r2, [pc, #380]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001078:	f043 0308 	orr.w	r3, r3, #8
 800107c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001080:	4b5c      	ldr	r3, [pc, #368]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001086:	f003 0308 	and.w	r3, r3, #8
 800108a:	617b      	str	r3, [r7, #20]
 800108c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800108e:	2308      	movs	r3, #8
 8001090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010a6:	2307      	movs	r3, #7
 80010a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010b0:	4619      	mov	r1, r3
 80010b2:	4851      	ldr	r0, [pc, #324]	; (80011f8 <HAL_UART_MspInit+0x21c>)
 80010b4:	f003 fe40 	bl	8004d38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010b8:	2320      	movs	r3, #32
 80010ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d0:	2307      	movs	r3, #7
 80010d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010da:	4619      	mov	r1, r3
 80010dc:	4847      	ldr	r0, [pc, #284]	; (80011fc <HAL_UART_MspInit+0x220>)
 80010de:	f003 fe2b 	bl	8004d38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 80010e2:	4b47      	ldr	r3, [pc, #284]	; (8001200 <HAL_UART_MspInit+0x224>)
 80010e4:	4a47      	ldr	r2, [pc, #284]	; (8001204 <HAL_UART_MspInit+0x228>)
 80010e6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80010e8:	4b45      	ldr	r3, [pc, #276]	; (8001200 <HAL_UART_MspInit+0x224>)
 80010ea:	222b      	movs	r2, #43	; 0x2b
 80010ec:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <HAL_UART_MspInit+0x224>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010f4:	4b42      	ldr	r3, [pc, #264]	; (8001200 <HAL_UART_MspInit+0x224>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010fa:	4b41      	ldr	r3, [pc, #260]	; (8001200 <HAL_UART_MspInit+0x224>)
 80010fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001100:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001102:	4b3f      	ldr	r3, [pc, #252]	; (8001200 <HAL_UART_MspInit+0x224>)
 8001104:	2200      	movs	r2, #0
 8001106:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001108:	4b3d      	ldr	r3, [pc, #244]	; (8001200 <HAL_UART_MspInit+0x224>)
 800110a:	2200      	movs	r2, #0
 800110c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800110e:	4b3c      	ldr	r3, [pc, #240]	; (8001200 <HAL_UART_MspInit+0x224>)
 8001110:	2200      	movs	r2, #0
 8001112:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001114:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_UART_MspInit+0x224>)
 8001116:	2200      	movs	r2, #0
 8001118:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800111a:	4b39      	ldr	r3, [pc, #228]	; (8001200 <HAL_UART_MspInit+0x224>)
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001120:	4837      	ldr	r0, [pc, #220]	; (8001200 <HAL_UART_MspInit+0x224>)
 8001122:	f000 fbad 	bl	8001880 <HAL_DMA_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800112c:	f7ff fe0a 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a33      	ldr	r2, [pc, #204]	; (8001200 <HAL_UART_MspInit+0x224>)
 8001134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001138:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_UART_MspInit+0x224>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fb67 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001148:	2026      	movs	r0, #38	; 0x26
 800114a:	f000 fb7e 	bl	800184a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800114e:	e04b      	b.n	80011e8 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART3)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <HAL_UART_MspInit+0x22c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d146      	bne.n	80011e8 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800115a:	f04f 0202 	mov.w	r2, #2
 800115e:	f04f 0300 	mov.w	r3, #0
 8001162:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001166:	2300      	movs	r3, #0
 8001168:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116c:	f107 0320 	add.w	r3, r7, #32
 8001170:	4618      	mov	r0, r3
 8001172:	f004 ff43 	bl	8005ffc <HAL_RCCEx_PeriphCLKConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 800117c:	f7ff fde2 	bl	8000d44 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001180:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001182:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001186:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <HAL_UART_MspInit+0x218>)
 8001192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_UART_MspInit+0x218>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	4a13      	ldr	r2, [pc, #76]	; (80011f4 <HAL_UART_MspInit+0x218>)
 80011a6:	f043 0308 	orr.w	r3, r3, #8
 80011aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <HAL_UART_MspInit+0x218>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	f003 0308 	and.w	r3, r3, #8
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80011bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80011d6:	2307      	movs	r3, #7
 80011d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <HAL_UART_MspInit+0x220>)
 80011e4:	f003 fda8 	bl	8004d38 <HAL_GPIO_Init>
}
 80011e8:	bf00      	nop
 80011ea:	37f0      	adds	r7, #240	; 0xf0
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40004400 	.word	0x40004400
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	240003a4 	.word	0x240003a4
 8001204:	40020010 	.word	0x40020010
 8001208:	40004800 	.word	0x40004800

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f9ce 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}

08001260 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DMA1_Stream0_IRQHandler+0x10>)
 8001266:	f001 fe31 	bl	8002ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	240003a4 	.word	0x240003a4

08001274 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <USART2_IRQHandler+0x10>)
 800127a:	f007 fc83 	bl	8008b84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2400027c 	.word	0x2400027c

08001288 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
  }

  return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
  }
  return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
  return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f009 fd04 	bl	800ada0 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	24050000 	.word	0x24050000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	24000454 	.word	0x24000454
 80013cc:	240005a8 	.word	0x240005a8

080013d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013d4:	4b32      	ldr	r3, [pc, #200]	; (80014a0 <SystemInit+0xd0>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a31      	ldr	r2, [pc, #196]	; (80014a0 <SystemInit+0xd0>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <SystemInit+0xd4>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 030f 	and.w	r3, r3, #15
 80013ec:	2b06      	cmp	r3, #6
 80013ee:	d807      	bhi.n	8001400 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <SystemInit+0xd4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f023 030f 	bic.w	r3, r3, #15
 80013f8:	4a2a      	ldr	r2, [pc, #168]	; (80014a4 <SystemInit+0xd4>)
 80013fa:	f043 0307 	orr.w	r3, r3, #7
 80013fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <SystemInit+0xd8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a28      	ldr	r2, [pc, #160]	; (80014a8 <SystemInit+0xd8>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800140c:	4b26      	ldr	r3, [pc, #152]	; (80014a8 <SystemInit+0xd8>)
 800140e:	2200      	movs	r2, #0
 8001410:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001412:	4b25      	ldr	r3, [pc, #148]	; (80014a8 <SystemInit+0xd8>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	4924      	ldr	r1, [pc, #144]	; (80014a8 <SystemInit+0xd8>)
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <SystemInit+0xdc>)
 800141a:	4013      	ands	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <SystemInit+0xd4>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d007      	beq.n	800143a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <SystemInit+0xd4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 030f 	bic.w	r3, r3, #15
 8001432:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <SystemInit+0xd4>)
 8001434:	f043 0307 	orr.w	r3, r3, #7
 8001438:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800143a:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <SystemInit+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <SystemInit+0xd8>)
 8001442:	2200      	movs	r2, #0
 8001444:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001446:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <SystemInit+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <SystemInit+0xd8>)
 800144e:	4a18      	ldr	r2, [pc, #96]	; (80014b0 <SystemInit+0xe0>)
 8001450:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <SystemInit+0xd8>)
 8001454:	4a17      	ldr	r2, [pc, #92]	; (80014b4 <SystemInit+0xe4>)
 8001456:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <SystemInit+0xd8>)
 800145a:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <SystemInit+0xe8>)
 800145c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <SystemInit+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <SystemInit+0xd8>)
 8001466:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <SystemInit+0xe8>)
 8001468:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <SystemInit+0xd8>)
 800146c:	2200      	movs	r2, #0
 800146e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <SystemInit+0xd8>)
 8001472:	4a11      	ldr	r2, [pc, #68]	; (80014b8 <SystemInit+0xe8>)
 8001474:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <SystemInit+0xd8>)
 8001478:	2200      	movs	r2, #0
 800147a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <SystemInit+0xd8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <SystemInit+0xd8>)
 8001482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <SystemInit+0xd8>)
 800148a:	2200      	movs	r2, #0
 800148c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <SystemInit+0xec>)
 8001490:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001494:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00
 80014a4:	52002000 	.word	0x52002000
 80014a8:	58024400 	.word	0x58024400
 80014ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80014b0:	02020200 	.word	0x02020200
 80014b4:	01ff0000 	.word	0x01ff0000
 80014b8:	01010280 	.word	0x01010280
 80014bc:	52004000 	.word	0x52004000

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014c4:	f7ff ff84 	bl	80013d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f009 fc5d 	bl	800adac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff f8db 	bl	80006ac <main>
  bx  lr
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001500:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8001504:	0800b9ec 	.word	0x0800b9ec
  ldr r2, =_sbss
 8001508:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 800150c:	240005a8 	.word	0x240005a8

08001510 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC3_IRQHandler>
	...

08001514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151a:	2003      	movs	r0, #3
 800151c:	f000 f970 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001520:	f004 fb96 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <HAL_Init+0x68>)
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	f003 030f 	and.w	r3, r3, #15
 8001530:	4913      	ldr	r1, [pc, #76]	; (8001580 <HAL_Init+0x6c>)
 8001532:	5ccb      	ldrb	r3, [r1, r3]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	fa22 f303 	lsr.w	r3, r2, r3
 800153c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_Init+0x68>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	4a0e      	ldr	r2, [pc, #56]	; (8001580 <HAL_Init+0x6c>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	fa22 f303 	lsr.w	r3, r2, r3
 8001554:	4a0b      	ldr	r2, [pc, #44]	; (8001584 <HAL_Init+0x70>)
 8001556:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <HAL_Init+0x74>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f814 	bl	800158c <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e002      	b.n	8001574 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800156e:	f7ff fbef 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	58024400 	.word	0x58024400
 8001580:	0800b968 	.word	0x0800b968
 8001584:	24000004 	.word	0x24000004
 8001588:	24000000 	.word	0x24000000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001594:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_InitTick+0x60>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d101      	bne.n	80015a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e021      	b.n	80015e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <HAL_InitTick+0x64>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <HAL_InitTick+0x60>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f955 	bl	8001866 <HAL_SYSTICK_Config>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e00e      	b.n	80015e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2b0f      	cmp	r3, #15
 80015ca:	d80a      	bhi.n	80015e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015cc:	2200      	movs	r2, #0
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015d4:	f000 f91f 	bl	8001816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d8:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <HAL_InitTick+0x68>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015de:	2300      	movs	r3, #0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2400000c 	.word	0x2400000c
 80015f0:	24000000 	.word	0x24000000
 80015f4:	24000008 	.word	0x24000008

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2400000c 	.word	0x2400000c
 800161c:	24000458 	.word	0x24000458

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	24000458 	.word	0x24000458

08001638 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001640:	4b06      	ldr	r3, [pc, #24]	; (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4313      	orrs	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	58000400 	.word	0x58000400

08001660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001670:	4b0b      	ldr	r3, [pc, #44]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001676:	68ba      	ldr	r2, [r7, #8]
 8001678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800167c:	4013      	ands	r3, r2
 800167e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <__NVIC_SetPriorityGrouping+0x44>)
 800168a:	4313      	orrs	r3, r2
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	; (80016a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	05fa0000 	.word	0x05fa0000

080016a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ac:	4b04      	ldr	r3, [pc, #16]	; (80016c0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	f003 0307 	and.w	r3, r3, #7
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	db0b      	blt.n	80016ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f003 021f 	and.w	r2, r3, #31
 80016dc:	4907      	ldr	r1, [pc, #28]	; (80016fc <__NVIC_EnableIRQ+0x38>)
 80016de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e2:	095b      	lsrs	r3, r3, #5
 80016e4:	2001      	movs	r0, #1
 80016e6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000e100 	.word	0xe000e100

08001700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001710:	2b00      	cmp	r3, #0
 8001712:	db0a      	blt.n	800172a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	b2da      	uxtb	r2, r3
 8001718:	490c      	ldr	r1, [pc, #48]	; (800174c <__NVIC_SetPriority+0x4c>)
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	0112      	lsls	r2, r2, #4
 8001720:	b2d2      	uxtb	r2, r2
 8001722:	440b      	add	r3, r1
 8001724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001728:	e00a      	b.n	8001740 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	b2da      	uxtb	r2, r3
 800172e:	4908      	ldr	r1, [pc, #32]	; (8001750 <__NVIC_SetPriority+0x50>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	3b04      	subs	r3, #4
 8001738:	0112      	lsls	r2, r2, #4
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	440b      	add	r3, r1
 800173e:	761a      	strb	r2, [r3, #24]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000e100 	.word	0xe000e100
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001754:	b480      	push	{r7}
 8001756:	b089      	sub	sp, #36	; 0x24
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f1c3 0307 	rsb	r3, r3, #7
 800176e:	2b04      	cmp	r3, #4
 8001770:	bf28      	it	cs
 8001772:	2304      	movcs	r3, #4
 8001774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3304      	adds	r3, #4
 800177a:	2b06      	cmp	r3, #6
 800177c:	d902      	bls.n	8001784 <NVIC_EncodePriority+0x30>
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3b03      	subs	r3, #3
 8001782:	e000      	b.n	8001786 <NVIC_EncodePriority+0x32>
 8001784:	2300      	movs	r3, #0
 8001786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001788:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43da      	mvns	r2, r3
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	401a      	ands	r2, r3
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800179c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	fa01 f303 	lsl.w	r3, r1, r3
 80017a6:	43d9      	mvns	r1, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ac:	4313      	orrs	r3, r2
         );
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
	...

080017bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017cc:	d301      	bcc.n	80017d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00f      	b.n	80017f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017d2:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <SysTick_Config+0x40>)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017da:	210f      	movs	r1, #15
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017e0:	f7ff ff8e 	bl	8001700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017e4:	4b05      	ldr	r3, [pc, #20]	; (80017fc <SysTick_Config+0x40>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <SysTick_Config+0x40>)
 80017ec:	2207      	movs	r2, #7
 80017ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000e010 	.word	0xe000e010

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff29 	bl	8001660 <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff40 	bl	80016a8 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ff90 	bl	8001754 <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff5f 	bl	8001700 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff33 	bl	80016c4 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffa4 	bl	80017bc <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001888:	f7ff feca 	bl	8001620 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e312      	b.n	8001ebe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a66      	ldr	r2, [pc, #408]	; (8001a38 <HAL_DMA_Init+0x1b8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d04a      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a65      	ldr	r2, [pc, #404]	; (8001a3c <HAL_DMA_Init+0x1bc>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d045      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a63      	ldr	r2, [pc, #396]	; (8001a40 <HAL_DMA_Init+0x1c0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d040      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a62      	ldr	r2, [pc, #392]	; (8001a44 <HAL_DMA_Init+0x1c4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d03b      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a60      	ldr	r2, [pc, #384]	; (8001a48 <HAL_DMA_Init+0x1c8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d036      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a5f      	ldr	r2, [pc, #380]	; (8001a4c <HAL_DMA_Init+0x1cc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d031      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a5d      	ldr	r2, [pc, #372]	; (8001a50 <HAL_DMA_Init+0x1d0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02c      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5c      	ldr	r2, [pc, #368]	; (8001a54 <HAL_DMA_Init+0x1d4>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d027      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5a      	ldr	r2, [pc, #360]	; (8001a58 <HAL_DMA_Init+0x1d8>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d022      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a59      	ldr	r2, [pc, #356]	; (8001a5c <HAL_DMA_Init+0x1dc>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d01d      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <HAL_DMA_Init+0x1e0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d018      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_DMA_Init+0x1e4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d013      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a54      	ldr	r2, [pc, #336]	; (8001a68 <HAL_DMA_Init+0x1e8>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00e      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a53      	ldr	r2, [pc, #332]	; (8001a6c <HAL_DMA_Init+0x1ec>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d009      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a51      	ldr	r2, [pc, #324]	; (8001a70 <HAL_DMA_Init+0x1f0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d004      	beq.n	8001938 <HAL_DMA_Init+0xb8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a50      	ldr	r2, [pc, #320]	; (8001a74 <HAL_DMA_Init+0x1f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_DMA_Init+0xbc>
 8001938:	2301      	movs	r3, #1
 800193a:	e000      	b.n	800193e <HAL_DMA_Init+0xbe>
 800193c:	2300      	movs	r3, #0
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 813c 	beq.w	8001bbc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a37      	ldr	r2, [pc, #220]	; (8001a38 <HAL_DMA_Init+0x1b8>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d04a      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a36      	ldr	r2, [pc, #216]	; (8001a3c <HAL_DMA_Init+0x1bc>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d045      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a34      	ldr	r2, [pc, #208]	; (8001a40 <HAL_DMA_Init+0x1c0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d040      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a33      	ldr	r2, [pc, #204]	; (8001a44 <HAL_DMA_Init+0x1c4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d03b      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <HAL_DMA_Init+0x1c8>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d036      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a30      	ldr	r2, [pc, #192]	; (8001a4c <HAL_DMA_Init+0x1cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d031      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <HAL_DMA_Init+0x1d0>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d02c      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a2d      	ldr	r2, [pc, #180]	; (8001a54 <HAL_DMA_Init+0x1d4>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d027      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_DMA_Init+0x1d8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d022      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a2a      	ldr	r2, [pc, #168]	; (8001a5c <HAL_DMA_Init+0x1dc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d01d      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <HAL_DMA_Init+0x1e0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d018      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a27      	ldr	r2, [pc, #156]	; (8001a64 <HAL_DMA_Init+0x1e4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d013      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_DMA_Init+0x1e8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00e      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_DMA_Init+0x1ec>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d009      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_DMA_Init+0x1f0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d004      	beq.n	80019f4 <HAL_DMA_Init+0x174>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <HAL_DMA_Init+0x1f4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d108      	bne.n	8001a06 <HAL_DMA_Init+0x186>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0201 	bic.w	r2, r2, #1
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	e007      	b.n	8001a16 <HAL_DMA_Init+0x196>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a16:	e02f      	b.n	8001a78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a18:	f7ff fe02 	bl	8001620 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d928      	bls.n	8001a78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2203      	movs	r2, #3
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e242      	b.n	8001ebe <HAL_DMA_Init+0x63e>
 8001a38:	40020010 	.word	0x40020010
 8001a3c:	40020028 	.word	0x40020028
 8001a40:	40020040 	.word	0x40020040
 8001a44:	40020058 	.word	0x40020058
 8001a48:	40020070 	.word	0x40020070
 8001a4c:	40020088 	.word	0x40020088
 8001a50:	400200a0 	.word	0x400200a0
 8001a54:	400200b8 	.word	0x400200b8
 8001a58:	40020410 	.word	0x40020410
 8001a5c:	40020428 	.word	0x40020428
 8001a60:	40020440 	.word	0x40020440
 8001a64:	40020458 	.word	0x40020458
 8001a68:	40020470 	.word	0x40020470
 8001a6c:	40020488 	.word	0x40020488
 8001a70:	400204a0 	.word	0x400204a0
 8001a74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1c8      	bne.n	8001a18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4b83      	ldr	r3, [pc, #524]	; (8001ca0 <HAL_DMA_Init+0x420>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001a9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aaa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001abe:	697a      	ldr	r2, [r7, #20]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d107      	bne.n	8001adc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	2b28      	cmp	r3, #40	; 0x28
 8001ae2:	d903      	bls.n	8001aec <HAL_DMA_Init+0x26c>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	2b2e      	cmp	r3, #46	; 0x2e
 8001aea:	d91f      	bls.n	8001b2c <HAL_DMA_Init+0x2ac>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b3e      	cmp	r3, #62	; 0x3e
 8001af2:	d903      	bls.n	8001afc <HAL_DMA_Init+0x27c>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	2b42      	cmp	r3, #66	; 0x42
 8001afa:	d917      	bls.n	8001b2c <HAL_DMA_Init+0x2ac>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b46      	cmp	r3, #70	; 0x46
 8001b02:	d903      	bls.n	8001b0c <HAL_DMA_Init+0x28c>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	2b48      	cmp	r3, #72	; 0x48
 8001b0a:	d90f      	bls.n	8001b2c <HAL_DMA_Init+0x2ac>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b4e      	cmp	r3, #78	; 0x4e
 8001b12:	d903      	bls.n	8001b1c <HAL_DMA_Init+0x29c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b52      	cmp	r3, #82	; 0x52
 8001b1a:	d907      	bls.n	8001b2c <HAL_DMA_Init+0x2ac>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b73      	cmp	r3, #115	; 0x73
 8001b22:	d905      	bls.n	8001b30 <HAL_DMA_Init+0x2b0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b77      	cmp	r3, #119	; 0x77
 8001b2a:	d801      	bhi.n	8001b30 <HAL_DMA_Init+0x2b0>
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e000      	b.n	8001b32 <HAL_DMA_Init+0x2b2>
 8001b30:	2300      	movs	r3, #0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d003      	beq.n	8001b3e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b3c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f023 0307 	bic.w	r3, r3, #7
 8001b54:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d117      	bne.n	8001b98 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00e      	beq.n	8001b98 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f002 fb2e 	bl	80041dc <DMA_CheckFifoParam>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2240      	movs	r2, #64	; 0x40
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e192      	b.n	8001ebe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f002 fa69 	bl	8004078 <DMA_CalcBaseAndBitshift>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	223f      	movs	r2, #63	; 0x3f
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	e0c8      	b.n	8001d4e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a38      	ldr	r2, [pc, #224]	; (8001ca4 <HAL_DMA_Init+0x424>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d022      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a37      	ldr	r2, [pc, #220]	; (8001ca8 <HAL_DMA_Init+0x428>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d01d      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a35      	ldr	r2, [pc, #212]	; (8001cac <HAL_DMA_Init+0x42c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a34      	ldr	r2, [pc, #208]	; (8001cb0 <HAL_DMA_Init+0x430>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d013      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a32      	ldr	r2, [pc, #200]	; (8001cb4 <HAL_DMA_Init+0x434>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a31      	ldr	r2, [pc, #196]	; (8001cb8 <HAL_DMA_Init+0x438>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a2f      	ldr	r2, [pc, #188]	; (8001cbc <HAL_DMA_Init+0x43c>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_DMA_Init+0x38c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <HAL_DMA_Init+0x440>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d101      	bne.n	8001c10 <HAL_DMA_Init+0x390>
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_Init+0x392>
 8001c10:	2300      	movs	r3, #0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 8092 	beq.w	8001d3c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_DMA_Init+0x424>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d021      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <HAL_DMA_Init+0x428>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d01c      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1e      	ldr	r2, [pc, #120]	; (8001cac <HAL_DMA_Init+0x42c>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d017      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1d      	ldr	r2, [pc, #116]	; (8001cb0 <HAL_DMA_Init+0x430>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d012      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_DMA_Init+0x434>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1a      	ldr	r2, [pc, #104]	; (8001cb8 <HAL_DMA_Init+0x438>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d008      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <HAL_DMA_Init+0x43c>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d003      	beq.n	8001c66 <HAL_DMA_Init+0x3e6>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_DMA_Init+0x440>)
 8001c64:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2202      	movs	r2, #2
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <HAL_DMA_Init+0x444>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d01c      	beq.n	8001cc8 <HAL_DMA_Init+0x448>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	2b80      	cmp	r3, #128	; 0x80
 8001c94:	d102      	bne.n	8001c9c <HAL_DMA_Init+0x41c>
 8001c96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c9a:	e016      	b.n	8001cca <HAL_DMA_Init+0x44a>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	e014      	b.n	8001cca <HAL_DMA_Init+0x44a>
 8001ca0:	fe10803f 	.word	0xfe10803f
 8001ca4:	58025408 	.word	0x58025408
 8001ca8:	5802541c 	.word	0x5802541c
 8001cac:	58025430 	.word	0x58025430
 8001cb0:	58025444 	.word	0x58025444
 8001cb4:	58025458 	.word	0x58025458
 8001cb8:	5802546c 	.word	0x5802546c
 8001cbc:	58025480 	.word	0x58025480
 8001cc0:	58025494 	.word	0x58025494
 8001cc4:	fffe000f 	.word	0xfffe000f
 8001cc8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	68d2      	ldr	r2, [r2, #12]
 8001cce:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cd0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001cd8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69db      	ldr	r3, [r3, #28]
 8001cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001cf8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <HAL_DMA_Init+0x648>)
 8001d10:	4413      	add	r3, r2
 8001d12:	4a6e      	ldr	r2, [pc, #440]	; (8001ecc <HAL_DMA_Init+0x64c>)
 8001d14:	fba2 2303 	umull	r2, r3, r2, r3
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	009a      	lsls	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f002 f9a9 	bl	8004078 <DMA_CalcBaseAndBitshift>
 8001d26:	4603      	mov	r3, r0
 8001d28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d2e:	f003 031f 	and.w	r3, r3, #31
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	e008      	b.n	8001d4e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2240      	movs	r2, #64	; 0x40
 8001d40:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2203      	movs	r2, #3
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0b7      	b.n	8001ebe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a5f      	ldr	r2, [pc, #380]	; (8001ed0 <HAL_DMA_Init+0x650>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d072      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a5d      	ldr	r2, [pc, #372]	; (8001ed4 <HAL_DMA_Init+0x654>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d06d      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a5c      	ldr	r2, [pc, #368]	; (8001ed8 <HAL_DMA_Init+0x658>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d068      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a5a      	ldr	r2, [pc, #360]	; (8001edc <HAL_DMA_Init+0x65c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d063      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a59      	ldr	r2, [pc, #356]	; (8001ee0 <HAL_DMA_Init+0x660>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a57      	ldr	r2, [pc, #348]	; (8001ee4 <HAL_DMA_Init+0x664>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d059      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a56      	ldr	r2, [pc, #344]	; (8001ee8 <HAL_DMA_Init+0x668>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d054      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a54      	ldr	r2, [pc, #336]	; (8001eec <HAL_DMA_Init+0x66c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d04f      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a53      	ldr	r2, [pc, #332]	; (8001ef0 <HAL_DMA_Init+0x670>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d04a      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_DMA_Init+0x674>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d045      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_DMA_Init+0x678>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d040      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a4e      	ldr	r2, [pc, #312]	; (8001efc <HAL_DMA_Init+0x67c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d03b      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a4d      	ldr	r2, [pc, #308]	; (8001f00 <HAL_DMA_Init+0x680>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d036      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_DMA_Init+0x684>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d031      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_DMA_Init+0x688>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d02c      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a48      	ldr	r2, [pc, #288]	; (8001f0c <HAL_DMA_Init+0x68c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d027      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a47      	ldr	r2, [pc, #284]	; (8001f10 <HAL_DMA_Init+0x690>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a45      	ldr	r2, [pc, #276]	; (8001f14 <HAL_DMA_Init+0x694>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01d      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a44      	ldr	r2, [pc, #272]	; (8001f18 <HAL_DMA_Init+0x698>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a42      	ldr	r2, [pc, #264]	; (8001f1c <HAL_DMA_Init+0x69c>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a41      	ldr	r2, [pc, #260]	; (8001f20 <HAL_DMA_Init+0x6a0>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00e      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a3f      	ldr	r2, [pc, #252]	; (8001f24 <HAL_DMA_Init+0x6a4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d009      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a3e      	ldr	r2, [pc, #248]	; (8001f28 <HAL_DMA_Init+0x6a8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Init+0x5be>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_DMA_Init+0x6ac>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_DMA_Init+0x5c2>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e000      	b.n	8001e44 <HAL_DMA_Init+0x5c4>
 8001e42:	2300      	movs	r3, #0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d032      	beq.n	8001eae <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f002 fa43 	bl	80042d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	2b80      	cmp	r3, #128	; 0x80
 8001e54:	d102      	bne.n	8001e5c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001e70:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d010      	beq.n	8001e9c <HAL_DMA_Init+0x61c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d80c      	bhi.n	8001e9c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f002 fac0 	bl	8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	e008      	b.n	8001eae <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	a7fdabf8 	.word	0xa7fdabf8
 8001ecc:	cccccccd 	.word	0xcccccccd
 8001ed0:	40020010 	.word	0x40020010
 8001ed4:	40020028 	.word	0x40020028
 8001ed8:	40020040 	.word	0x40020040
 8001edc:	40020058 	.word	0x40020058
 8001ee0:	40020070 	.word	0x40020070
 8001ee4:	40020088 	.word	0x40020088
 8001ee8:	400200a0 	.word	0x400200a0
 8001eec:	400200b8 	.word	0x400200b8
 8001ef0:	40020410 	.word	0x40020410
 8001ef4:	40020428 	.word	0x40020428
 8001ef8:	40020440 	.word	0x40020440
 8001efc:	40020458 	.word	0x40020458
 8001f00:	40020470 	.word	0x40020470
 8001f04:	40020488 	.word	0x40020488
 8001f08:	400204a0 	.word	0x400204a0
 8001f0c:	400204b8 	.word	0x400204b8
 8001f10:	58025408 	.word	0x58025408
 8001f14:	5802541c 	.word	0x5802541c
 8001f18:	58025430 	.word	0x58025430
 8001f1c:	58025444 	.word	0x58025444
 8001f20:	58025458 	.word	0x58025458
 8001f24:	5802546c 	.word	0x5802546c
 8001f28:	58025480 	.word	0x58025480
 8001f2c:	58025494 	.word	0x58025494

08001f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
 8001f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d101      	bne.n	8001f4c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e226      	b.n	800239a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d101      	bne.n	8001f5a <HAL_DMA_Start_IT+0x2a>
 8001f56:	2302      	movs	r3, #2
 8001f58:	e21f      	b.n	800239a <HAL_DMA_Start_IT+0x46a>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	f040 820a 	bne.w	8002384 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2202      	movs	r2, #2
 8001f74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a68      	ldr	r2, [pc, #416]	; (8002124 <HAL_DMA_Start_IT+0x1f4>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d04a      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a66      	ldr	r2, [pc, #408]	; (8002128 <HAL_DMA_Start_IT+0x1f8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d045      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a65      	ldr	r2, [pc, #404]	; (800212c <HAL_DMA_Start_IT+0x1fc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d040      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a63      	ldr	r2, [pc, #396]	; (8002130 <HAL_DMA_Start_IT+0x200>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d03b      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a62      	ldr	r2, [pc, #392]	; (8002134 <HAL_DMA_Start_IT+0x204>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d036      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a60      	ldr	r2, [pc, #384]	; (8002138 <HAL_DMA_Start_IT+0x208>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a5f      	ldr	r2, [pc, #380]	; (800213c <HAL_DMA_Start_IT+0x20c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d02c      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <HAL_DMA_Start_IT+0x210>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d027      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a5c      	ldr	r2, [pc, #368]	; (8002144 <HAL_DMA_Start_IT+0x214>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d022      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a5a      	ldr	r2, [pc, #360]	; (8002148 <HAL_DMA_Start_IT+0x218>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d01d      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a59      	ldr	r2, [pc, #356]	; (800214c <HAL_DMA_Start_IT+0x21c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d018      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a57      	ldr	r2, [pc, #348]	; (8002150 <HAL_DMA_Start_IT+0x220>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a56      	ldr	r2, [pc, #344]	; (8002154 <HAL_DMA_Start_IT+0x224>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d00e      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a54      	ldr	r2, [pc, #336]	; (8002158 <HAL_DMA_Start_IT+0x228>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a53      	ldr	r2, [pc, #332]	; (800215c <HAL_DMA_Start_IT+0x22c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d004      	beq.n	800201e <HAL_DMA_Start_IT+0xee>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_DMA_Start_IT+0x230>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d108      	bne.n	8002030 <HAL_DMA_Start_IT+0x100>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e007      	b.n	8002040 <HAL_DMA_Start_IT+0x110>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0201 	bic.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	68b9      	ldr	r1, [r7, #8]
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f001 fe6a 	bl	8003d20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a34      	ldr	r2, [pc, #208]	; (8002124 <HAL_DMA_Start_IT+0x1f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d04a      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a33      	ldr	r2, [pc, #204]	; (8002128 <HAL_DMA_Start_IT+0x1f8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d045      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a31      	ldr	r2, [pc, #196]	; (800212c <HAL_DMA_Start_IT+0x1fc>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d040      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_DMA_Start_IT+0x200>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d03b      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a2e      	ldr	r2, [pc, #184]	; (8002134 <HAL_DMA_Start_IT+0x204>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d036      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a2d      	ldr	r2, [pc, #180]	; (8002138 <HAL_DMA_Start_IT+0x208>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d031      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_DMA_Start_IT+0x20c>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d02c      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2a      	ldr	r2, [pc, #168]	; (8002140 <HAL_DMA_Start_IT+0x210>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d027      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a28      	ldr	r2, [pc, #160]	; (8002144 <HAL_DMA_Start_IT+0x214>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d022      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a27      	ldr	r2, [pc, #156]	; (8002148 <HAL_DMA_Start_IT+0x218>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d01d      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a25      	ldr	r2, [pc, #148]	; (800214c <HAL_DMA_Start_IT+0x21c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d018      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a24      	ldr	r2, [pc, #144]	; (8002150 <HAL_DMA_Start_IT+0x220>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a22      	ldr	r2, [pc, #136]	; (8002154 <HAL_DMA_Start_IT+0x224>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00e      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a21      	ldr	r2, [pc, #132]	; (8002158 <HAL_DMA_Start_IT+0x228>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a1f      	ldr	r2, [pc, #124]	; (800215c <HAL_DMA_Start_IT+0x22c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d004      	beq.n	80020ec <HAL_DMA_Start_IT+0x1bc>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <HAL_DMA_Start_IT+0x230>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d101      	bne.n	80020f0 <HAL_DMA_Start_IT+0x1c0>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_DMA_Start_IT+0x1c2>
 80020f0:	2300      	movs	r3, #0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f023 021e 	bic.w	r2, r3, #30
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0216 	orr.w	r2, r2, #22
 8002108:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d03e      	beq.n	8002190 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f042 0208 	orr.w	r2, r2, #8
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e035      	b.n	8002190 <HAL_DMA_Start_IT+0x260>
 8002124:	40020010 	.word	0x40020010
 8002128:	40020028 	.word	0x40020028
 800212c:	40020040 	.word	0x40020040
 8002130:	40020058 	.word	0x40020058
 8002134:	40020070 	.word	0x40020070
 8002138:	40020088 	.word	0x40020088
 800213c:	400200a0 	.word	0x400200a0
 8002140:	400200b8 	.word	0x400200b8
 8002144:	40020410 	.word	0x40020410
 8002148:	40020428 	.word	0x40020428
 800214c:	40020440 	.word	0x40020440
 8002150:	40020458 	.word	0x40020458
 8002154:	40020470 	.word	0x40020470
 8002158:	40020488 	.word	0x40020488
 800215c:	400204a0 	.word	0x400204a0
 8002160:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 020e 	bic.w	r2, r3, #14
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f042 020a 	orr.w	r2, r2, #10
 8002176:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	2b00      	cmp	r3, #0
 800217e:	d007      	beq.n	8002190 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0204 	orr.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a83      	ldr	r2, [pc, #524]	; (80023a4 <HAL_DMA_Start_IT+0x474>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d072      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a82      	ldr	r2, [pc, #520]	; (80023a8 <HAL_DMA_Start_IT+0x478>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d06d      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a80      	ldr	r2, [pc, #512]	; (80023ac <HAL_DMA_Start_IT+0x47c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d068      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a7f      	ldr	r2, [pc, #508]	; (80023b0 <HAL_DMA_Start_IT+0x480>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d063      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a7d      	ldr	r2, [pc, #500]	; (80023b4 <HAL_DMA_Start_IT+0x484>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d05e      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a7c      	ldr	r2, [pc, #496]	; (80023b8 <HAL_DMA_Start_IT+0x488>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d059      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a7a      	ldr	r2, [pc, #488]	; (80023bc <HAL_DMA_Start_IT+0x48c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d054      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a79      	ldr	r2, [pc, #484]	; (80023c0 <HAL_DMA_Start_IT+0x490>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04f      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a77      	ldr	r2, [pc, #476]	; (80023c4 <HAL_DMA_Start_IT+0x494>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d04a      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a76      	ldr	r2, [pc, #472]	; (80023c8 <HAL_DMA_Start_IT+0x498>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d045      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a74      	ldr	r2, [pc, #464]	; (80023cc <HAL_DMA_Start_IT+0x49c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d040      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a73      	ldr	r2, [pc, #460]	; (80023d0 <HAL_DMA_Start_IT+0x4a0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d03b      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a71      	ldr	r2, [pc, #452]	; (80023d4 <HAL_DMA_Start_IT+0x4a4>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d036      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a70      	ldr	r2, [pc, #448]	; (80023d8 <HAL_DMA_Start_IT+0x4a8>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d031      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a6e      	ldr	r2, [pc, #440]	; (80023dc <HAL_DMA_Start_IT+0x4ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d02c      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a6d      	ldr	r2, [pc, #436]	; (80023e0 <HAL_DMA_Start_IT+0x4b0>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d027      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a6b      	ldr	r2, [pc, #428]	; (80023e4 <HAL_DMA_Start_IT+0x4b4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d022      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6a      	ldr	r2, [pc, #424]	; (80023e8 <HAL_DMA_Start_IT+0x4b8>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d01d      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a68      	ldr	r2, [pc, #416]	; (80023ec <HAL_DMA_Start_IT+0x4bc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d018      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_DMA_Start_IT+0x4c0>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d013      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a65      	ldr	r2, [pc, #404]	; (80023f4 <HAL_DMA_Start_IT+0x4c4>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00e      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a64      	ldr	r2, [pc, #400]	; (80023f8 <HAL_DMA_Start_IT+0x4c8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d009      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a62      	ldr	r2, [pc, #392]	; (80023fc <HAL_DMA_Start_IT+0x4cc>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d004      	beq.n	8002280 <HAL_DMA_Start_IT+0x350>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a61      	ldr	r2, [pc, #388]	; (8002400 <HAL_DMA_Start_IT+0x4d0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d101      	bne.n	8002284 <HAL_DMA_Start_IT+0x354>
 8002280:	2301      	movs	r3, #1
 8002282:	e000      	b.n	8002286 <HAL_DMA_Start_IT+0x356>
 8002284:	2300      	movs	r3, #0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d01a      	beq.n	80022c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d007      	beq.n	80022a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d007      	beq.n	80022c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a37      	ldr	r2, [pc, #220]	; (80023a4 <HAL_DMA_Start_IT+0x474>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d04a      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a36      	ldr	r2, [pc, #216]	; (80023a8 <HAL_DMA_Start_IT+0x478>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d045      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a34      	ldr	r2, [pc, #208]	; (80023ac <HAL_DMA_Start_IT+0x47c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d040      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a33      	ldr	r2, [pc, #204]	; (80023b0 <HAL_DMA_Start_IT+0x480>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d03b      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a31      	ldr	r2, [pc, #196]	; (80023b4 <HAL_DMA_Start_IT+0x484>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d036      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a30      	ldr	r2, [pc, #192]	; (80023b8 <HAL_DMA_Start_IT+0x488>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d031      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2e      	ldr	r2, [pc, #184]	; (80023bc <HAL_DMA_Start_IT+0x48c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d02c      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <HAL_DMA_Start_IT+0x490>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d027      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2b      	ldr	r2, [pc, #172]	; (80023c4 <HAL_DMA_Start_IT+0x494>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d022      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2a      	ldr	r2, [pc, #168]	; (80023c8 <HAL_DMA_Start_IT+0x498>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d01d      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_DMA_Start_IT+0x49c>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a27      	ldr	r2, [pc, #156]	; (80023d0 <HAL_DMA_Start_IT+0x4a0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_DMA_Start_IT+0x4a4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_DMA_Start_IT+0x4a8>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_DMA_Start_IT+0x4ac>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_DMA_Start_IT+0x430>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a21      	ldr	r2, [pc, #132]	; (80023e0 <HAL_DMA_Start_IT+0x4b0>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d108      	bne.n	8002372 <HAL_DMA_Start_IT+0x442>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e012      	b.n	8002398 <HAL_DMA_Start_IT+0x468>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	e009      	b.n	8002398 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800238a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002398:	7dfb      	ldrb	r3, [r7, #23]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40020010 	.word	0x40020010
 80023a8:	40020028 	.word	0x40020028
 80023ac:	40020040 	.word	0x40020040
 80023b0:	40020058 	.word	0x40020058
 80023b4:	40020070 	.word	0x40020070
 80023b8:	40020088 	.word	0x40020088
 80023bc:	400200a0 	.word	0x400200a0
 80023c0:	400200b8 	.word	0x400200b8
 80023c4:	40020410 	.word	0x40020410
 80023c8:	40020428 	.word	0x40020428
 80023cc:	40020440 	.word	0x40020440
 80023d0:	40020458 	.word	0x40020458
 80023d4:	40020470 	.word	0x40020470
 80023d8:	40020488 	.word	0x40020488
 80023dc:	400204a0 	.word	0x400204a0
 80023e0:	400204b8 	.word	0x400204b8
 80023e4:	58025408 	.word	0x58025408
 80023e8:	5802541c 	.word	0x5802541c
 80023ec:	58025430 	.word	0x58025430
 80023f0:	58025444 	.word	0x58025444
 80023f4:	58025458 	.word	0x58025458
 80023f8:	5802546c 	.word	0x5802546c
 80023fc:	58025480 	.word	0x58025480
 8002400:	58025494 	.word	0x58025494

08002404 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff f908 	bl	8001620 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e2dc      	b.n	80029d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d008      	beq.n	800243a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2280      	movs	r2, #128	; 0x80
 800242c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e2cd      	b.n	80029d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_DMA_Abort+0x214>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d04a      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a74      	ldr	r2, [pc, #464]	; (800261c <HAL_DMA_Abort+0x218>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d045      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a73      	ldr	r2, [pc, #460]	; (8002620 <HAL_DMA_Abort+0x21c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d040      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a71      	ldr	r2, [pc, #452]	; (8002624 <HAL_DMA_Abort+0x220>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d03b      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a70      	ldr	r2, [pc, #448]	; (8002628 <HAL_DMA_Abort+0x224>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d036      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_DMA_Abort+0x228>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d031      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6d      	ldr	r2, [pc, #436]	; (8002630 <HAL_DMA_Abort+0x22c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d02c      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <HAL_DMA_Abort+0x230>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d027      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_DMA_Abort+0x234>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d022      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a68      	ldr	r2, [pc, #416]	; (800263c <HAL_DMA_Abort+0x238>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d01d      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_DMA_Abort+0x23c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d018      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a65      	ldr	r2, [pc, #404]	; (8002644 <HAL_DMA_Abort+0x240>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_DMA_Abort+0x244>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d00e      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a62      	ldr	r2, [pc, #392]	; (800264c <HAL_DMA_Abort+0x248>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d009      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_DMA_Abort+0x24c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d004      	beq.n	80024da <HAL_DMA_Abort+0xd6>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5f      	ldr	r2, [pc, #380]	; (8002654 <HAL_DMA_Abort+0x250>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_DMA_Abort+0xda>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_DMA_Abort+0xdc>
 80024de:	2300      	movs	r3, #0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d013      	beq.n	800250c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 021e 	bic.w	r2, r2, #30
 80024f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002502:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	e00a      	b.n	8002522 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 020e 	bic.w	r2, r2, #14
 800251a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a3c      	ldr	r2, [pc, #240]	; (8002618 <HAL_DMA_Abort+0x214>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d072      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a3a      	ldr	r2, [pc, #232]	; (800261c <HAL_DMA_Abort+0x218>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d06d      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_DMA_Abort+0x21c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d068      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a37      	ldr	r2, [pc, #220]	; (8002624 <HAL_DMA_Abort+0x220>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d063      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a36      	ldr	r2, [pc, #216]	; (8002628 <HAL_DMA_Abort+0x224>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d05e      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a34      	ldr	r2, [pc, #208]	; (800262c <HAL_DMA_Abort+0x228>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d059      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a33      	ldr	r2, [pc, #204]	; (8002630 <HAL_DMA_Abort+0x22c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d054      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_DMA_Abort+0x230>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d04f      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a30      	ldr	r2, [pc, #192]	; (8002638 <HAL_DMA_Abort+0x234>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d04a      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a2e      	ldr	r2, [pc, #184]	; (800263c <HAL_DMA_Abort+0x238>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d045      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <HAL_DMA_Abort+0x23c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d040      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_DMA_Abort+0x240>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d03b      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2a      	ldr	r2, [pc, #168]	; (8002648 <HAL_DMA_Abort+0x244>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d036      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a28      	ldr	r2, [pc, #160]	; (800264c <HAL_DMA_Abort+0x248>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d031      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a27      	ldr	r2, [pc, #156]	; (8002650 <HAL_DMA_Abort+0x24c>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d02c      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a25      	ldr	r2, [pc, #148]	; (8002654 <HAL_DMA_Abort+0x250>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d027      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a24      	ldr	r2, [pc, #144]	; (8002658 <HAL_DMA_Abort+0x254>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d022      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a22      	ldr	r2, [pc, #136]	; (800265c <HAL_DMA_Abort+0x258>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d01d      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <HAL_DMA_Abort+0x25c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d018      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <HAL_DMA_Abort+0x260>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d013      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1e      	ldr	r2, [pc, #120]	; (8002668 <HAL_DMA_Abort+0x264>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a1c      	ldr	r2, [pc, #112]	; (800266c <HAL_DMA_Abort+0x268>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a1b      	ldr	r2, [pc, #108]	; (8002670 <HAL_DMA_Abort+0x26c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d004      	beq.n	8002612 <HAL_DMA_Abort+0x20e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a19      	ldr	r2, [pc, #100]	; (8002674 <HAL_DMA_Abort+0x270>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d132      	bne.n	8002678 <HAL_DMA_Abort+0x274>
 8002612:	2301      	movs	r3, #1
 8002614:	e031      	b.n	800267a <HAL_DMA_Abort+0x276>
 8002616:	bf00      	nop
 8002618:	40020010 	.word	0x40020010
 800261c:	40020028 	.word	0x40020028
 8002620:	40020040 	.word	0x40020040
 8002624:	40020058 	.word	0x40020058
 8002628:	40020070 	.word	0x40020070
 800262c:	40020088 	.word	0x40020088
 8002630:	400200a0 	.word	0x400200a0
 8002634:	400200b8 	.word	0x400200b8
 8002638:	40020410 	.word	0x40020410
 800263c:	40020428 	.word	0x40020428
 8002640:	40020440 	.word	0x40020440
 8002644:	40020458 	.word	0x40020458
 8002648:	40020470 	.word	0x40020470
 800264c:	40020488 	.word	0x40020488
 8002650:	400204a0 	.word	0x400204a0
 8002654:	400204b8 	.word	0x400204b8
 8002658:	58025408 	.word	0x58025408
 800265c:	5802541c 	.word	0x5802541c
 8002660:	58025430 	.word	0x58025430
 8002664:	58025444 	.word	0x58025444
 8002668:	58025458 	.word	0x58025458
 800266c:	5802546c 	.word	0x5802546c
 8002670:	58025480 	.word	0x58025480
 8002674:	58025494 	.word	0x58025494
 8002678:	2300      	movs	r3, #0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800268c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a6d      	ldr	r2, [pc, #436]	; (8002848 <HAL_DMA_Abort+0x444>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d04a      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6b      	ldr	r2, [pc, #428]	; (800284c <HAL_DMA_Abort+0x448>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d045      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a6a      	ldr	r2, [pc, #424]	; (8002850 <HAL_DMA_Abort+0x44c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d040      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a68      	ldr	r2, [pc, #416]	; (8002854 <HAL_DMA_Abort+0x450>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d03b      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a67      	ldr	r2, [pc, #412]	; (8002858 <HAL_DMA_Abort+0x454>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d036      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a65      	ldr	r2, [pc, #404]	; (800285c <HAL_DMA_Abort+0x458>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d031      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a64      	ldr	r2, [pc, #400]	; (8002860 <HAL_DMA_Abort+0x45c>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d02c      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a62      	ldr	r2, [pc, #392]	; (8002864 <HAL_DMA_Abort+0x460>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d027      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a61      	ldr	r2, [pc, #388]	; (8002868 <HAL_DMA_Abort+0x464>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d022      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a5f      	ldr	r2, [pc, #380]	; (800286c <HAL_DMA_Abort+0x468>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01d      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_DMA_Abort+0x46c>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d018      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a5c      	ldr	r2, [pc, #368]	; (8002874 <HAL_DMA_Abort+0x470>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a5b      	ldr	r2, [pc, #364]	; (8002878 <HAL_DMA_Abort+0x474>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d00e      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a59      	ldr	r2, [pc, #356]	; (800287c <HAL_DMA_Abort+0x478>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a58      	ldr	r2, [pc, #352]	; (8002880 <HAL_DMA_Abort+0x47c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d004      	beq.n	800272e <HAL_DMA_Abort+0x32a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a56      	ldr	r2, [pc, #344]	; (8002884 <HAL_DMA_Abort+0x480>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d108      	bne.n	8002740 <HAL_DMA_Abort+0x33c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <HAL_DMA_Abort+0x34c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002750:	e013      	b.n	800277a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002752:	f7fe ff65 	bl	8001620 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b05      	cmp	r3, #5
 800275e:	d90c      	bls.n	800277a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2220      	movs	r2, #32
 8002764:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2203      	movs	r2, #3
 800276a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e12d      	b.n	80029d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1e5      	bne.n	8002752 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <HAL_DMA_Abort+0x444>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d04a      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a2d      	ldr	r2, [pc, #180]	; (800284c <HAL_DMA_Abort+0x448>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d045      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a2c      	ldr	r2, [pc, #176]	; (8002850 <HAL_DMA_Abort+0x44c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d040      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <HAL_DMA_Abort+0x450>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d03b      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a29      	ldr	r2, [pc, #164]	; (8002858 <HAL_DMA_Abort+0x454>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d036      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a27      	ldr	r2, [pc, #156]	; (800285c <HAL_DMA_Abort+0x458>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d031      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <HAL_DMA_Abort+0x45c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02c      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a24      	ldr	r2, [pc, #144]	; (8002864 <HAL_DMA_Abort+0x460>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d027      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a23      	ldr	r2, [pc, #140]	; (8002868 <HAL_DMA_Abort+0x464>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d022      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a21      	ldr	r2, [pc, #132]	; (800286c <HAL_DMA_Abort+0x468>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d01d      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a20      	ldr	r2, [pc, #128]	; (8002870 <HAL_DMA_Abort+0x46c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d018      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a1e      	ldr	r2, [pc, #120]	; (8002874 <HAL_DMA_Abort+0x470>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d013      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a1d      	ldr	r2, [pc, #116]	; (8002878 <HAL_DMA_Abort+0x474>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_DMA_Abort+0x478>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d009      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_DMA_Abort+0x47c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_DMA_Abort+0x422>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a18      	ldr	r2, [pc, #96]	; (8002884 <HAL_DMA_Abort+0x480>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_DMA_Abort+0x426>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_DMA_Abort+0x428>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d02b      	beq.n	8002888 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002834:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283a:	f003 031f 	and.w	r3, r3, #31
 800283e:	223f      	movs	r2, #63	; 0x3f
 8002840:	409a      	lsls	r2, r3
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	609a      	str	r2, [r3, #8]
 8002846:	e02a      	b.n	800289e <HAL_DMA_Abort+0x49a>
 8002848:	40020010 	.word	0x40020010
 800284c:	40020028 	.word	0x40020028
 8002850:	40020040 	.word	0x40020040
 8002854:	40020058 	.word	0x40020058
 8002858:	40020070 	.word	0x40020070
 800285c:	40020088 	.word	0x40020088
 8002860:	400200a0 	.word	0x400200a0
 8002864:	400200b8 	.word	0x400200b8
 8002868:	40020410 	.word	0x40020410
 800286c:	40020428 	.word	0x40020428
 8002870:	40020440 	.word	0x40020440
 8002874:	40020458 	.word	0x40020458
 8002878:	40020470 	.word	0x40020470
 800287c:	40020488 	.word	0x40020488
 8002880:	400204a0 	.word	0x400204a0
 8002884:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	2201      	movs	r2, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a4f      	ldr	r2, [pc, #316]	; (80029e0 <HAL_DMA_Abort+0x5dc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d072      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a4d      	ldr	r2, [pc, #308]	; (80029e4 <HAL_DMA_Abort+0x5e0>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d06d      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a4c      	ldr	r2, [pc, #304]	; (80029e8 <HAL_DMA_Abort+0x5e4>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d068      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a4a      	ldr	r2, [pc, #296]	; (80029ec <HAL_DMA_Abort+0x5e8>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d063      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a49      	ldr	r2, [pc, #292]	; (80029f0 <HAL_DMA_Abort+0x5ec>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a47      	ldr	r2, [pc, #284]	; (80029f4 <HAL_DMA_Abort+0x5f0>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d059      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a46      	ldr	r2, [pc, #280]	; (80029f8 <HAL_DMA_Abort+0x5f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d054      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a44      	ldr	r2, [pc, #272]	; (80029fc <HAL_DMA_Abort+0x5f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d04f      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a43      	ldr	r2, [pc, #268]	; (8002a00 <HAL_DMA_Abort+0x5fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04a      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a41      	ldr	r2, [pc, #260]	; (8002a04 <HAL_DMA_Abort+0x600>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d045      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a40      	ldr	r2, [pc, #256]	; (8002a08 <HAL_DMA_Abort+0x604>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d040      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a3e      	ldr	r2, [pc, #248]	; (8002a0c <HAL_DMA_Abort+0x608>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d03b      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <HAL_DMA_Abort+0x60c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d036      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a3b      	ldr	r2, [pc, #236]	; (8002a14 <HAL_DMA_Abort+0x610>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a3a      	ldr	r2, [pc, #232]	; (8002a18 <HAL_DMA_Abort+0x614>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d02c      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a38      	ldr	r2, [pc, #224]	; (8002a1c <HAL_DMA_Abort+0x618>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d027      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a37      	ldr	r2, [pc, #220]	; (8002a20 <HAL_DMA_Abort+0x61c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d022      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a35      	ldr	r2, [pc, #212]	; (8002a24 <HAL_DMA_Abort+0x620>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d01d      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a34      	ldr	r2, [pc, #208]	; (8002a28 <HAL_DMA_Abort+0x624>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d018      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a32      	ldr	r2, [pc, #200]	; (8002a2c <HAL_DMA_Abort+0x628>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a31      	ldr	r2, [pc, #196]	; (8002a30 <HAL_DMA_Abort+0x62c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d00e      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <HAL_DMA_Abort+0x630>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d009      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2e      	ldr	r2, [pc, #184]	; (8002a38 <HAL_DMA_Abort+0x634>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d004      	beq.n	800298e <HAL_DMA_Abort+0x58a>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_DMA_Abort+0x638>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Abort+0x58e>
 800298e:	2301      	movs	r3, #1
 8002990:	e000      	b.n	8002994 <HAL_DMA_Abort+0x590>
 8002992:	2300      	movs	r3, #0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80029c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40020010 	.word	0x40020010
 80029e4:	40020028 	.word	0x40020028
 80029e8:	40020040 	.word	0x40020040
 80029ec:	40020058 	.word	0x40020058
 80029f0:	40020070 	.word	0x40020070
 80029f4:	40020088 	.word	0x40020088
 80029f8:	400200a0 	.word	0x400200a0
 80029fc:	400200b8 	.word	0x400200b8
 8002a00:	40020410 	.word	0x40020410
 8002a04:	40020428 	.word	0x40020428
 8002a08:	40020440 	.word	0x40020440
 8002a0c:	40020458 	.word	0x40020458
 8002a10:	40020470 	.word	0x40020470
 8002a14:	40020488 	.word	0x40020488
 8002a18:	400204a0 	.word	0x400204a0
 8002a1c:	400204b8 	.word	0x400204b8
 8002a20:	58025408 	.word	0x58025408
 8002a24:	5802541c 	.word	0x5802541c
 8002a28:	58025430 	.word	0x58025430
 8002a2c:	58025444 	.word	0x58025444
 8002a30:	58025458 	.word	0x58025458
 8002a34:	5802546c 	.word	0x5802546c
 8002a38:	58025480 	.word	0x58025480
 8002a3c:	58025494 	.word	0x58025494

08002a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e237      	b.n	8002ec2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d004      	beq.n	8002a68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e22c      	b.n	8002ec2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a5c      	ldr	r2, [pc, #368]	; (8002be0 <HAL_DMA_Abort_IT+0x1a0>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d04a      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a5b      	ldr	r2, [pc, #364]	; (8002be4 <HAL_DMA_Abort_IT+0x1a4>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d045      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a59      	ldr	r2, [pc, #356]	; (8002be8 <HAL_DMA_Abort_IT+0x1a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d040      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a58      	ldr	r2, [pc, #352]	; (8002bec <HAL_DMA_Abort_IT+0x1ac>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d03b      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a56      	ldr	r2, [pc, #344]	; (8002bf0 <HAL_DMA_Abort_IT+0x1b0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d036      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a55      	ldr	r2, [pc, #340]	; (8002bf4 <HAL_DMA_Abort_IT+0x1b4>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d031      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_DMA_Abort_IT+0x1b8>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d02c      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_DMA_Abort_IT+0x1bc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d027      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a50      	ldr	r2, [pc, #320]	; (8002c00 <HAL_DMA_Abort_IT+0x1c0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d022      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a4f      	ldr	r2, [pc, #316]	; (8002c04 <HAL_DMA_Abort_IT+0x1c4>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d01d      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a4d      	ldr	r2, [pc, #308]	; (8002c08 <HAL_DMA_Abort_IT+0x1c8>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d018      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a4c      	ldr	r2, [pc, #304]	; (8002c0c <HAL_DMA_Abort_IT+0x1cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a4a      	ldr	r2, [pc, #296]	; (8002c10 <HAL_DMA_Abort_IT+0x1d0>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00e      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a49      	ldr	r2, [pc, #292]	; (8002c14 <HAL_DMA_Abort_IT+0x1d4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d009      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a47      	ldr	r2, [pc, #284]	; (8002c18 <HAL_DMA_Abort_IT+0x1d8>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d004      	beq.n	8002b08 <HAL_DMA_Abort_IT+0xc8>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a46      	ldr	r2, [pc, #280]	; (8002c1c <HAL_DMA_Abort_IT+0x1dc>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d101      	bne.n	8002b0c <HAL_DMA_Abort_IT+0xcc>
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e000      	b.n	8002b0e <HAL_DMA_Abort_IT+0xce>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f000 8086 	beq.w	8002c20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2204      	movs	r2, #4
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a2f      	ldr	r2, [pc, #188]	; (8002be0 <HAL_DMA_Abort_IT+0x1a0>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d04a      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a2e      	ldr	r2, [pc, #184]	; (8002be4 <HAL_DMA_Abort_IT+0x1a4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d045      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a2c      	ldr	r2, [pc, #176]	; (8002be8 <HAL_DMA_Abort_IT+0x1a8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d040      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a2b      	ldr	r2, [pc, #172]	; (8002bec <HAL_DMA_Abort_IT+0x1ac>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d03b      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a29      	ldr	r2, [pc, #164]	; (8002bf0 <HAL_DMA_Abort_IT+0x1b0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d036      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_DMA_Abort_IT+0x1b4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d031      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_DMA_Abort_IT+0x1b8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d02c      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_DMA_Abort_IT+0x1bc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d027      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a23      	ldr	r2, [pc, #140]	; (8002c00 <HAL_DMA_Abort_IT+0x1c0>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d022      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a22      	ldr	r2, [pc, #136]	; (8002c04 <HAL_DMA_Abort_IT+0x1c4>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d01d      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a20      	ldr	r2, [pc, #128]	; (8002c08 <HAL_DMA_Abort_IT+0x1c8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d018      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_DMA_Abort_IT+0x1cc>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d013      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_DMA_Abort_IT+0x1d0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00e      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1c      	ldr	r2, [pc, #112]	; (8002c14 <HAL_DMA_Abort_IT+0x1d4>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d009      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_DMA_Abort_IT+0x1d8>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x17c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a19      	ldr	r2, [pc, #100]	; (8002c1c <HAL_DMA_Abort_IT+0x1dc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d108      	bne.n	8002bce <HAL_DMA_Abort_IT+0x18e>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	e178      	b.n	8002ec0 <HAL_DMA_Abort_IT+0x480>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 0201 	bic.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	e16f      	b.n	8002ec0 <HAL_DMA_Abort_IT+0x480>
 8002be0:	40020010 	.word	0x40020010
 8002be4:	40020028 	.word	0x40020028
 8002be8:	40020040 	.word	0x40020040
 8002bec:	40020058 	.word	0x40020058
 8002bf0:	40020070 	.word	0x40020070
 8002bf4:	40020088 	.word	0x40020088
 8002bf8:	400200a0 	.word	0x400200a0
 8002bfc:	400200b8 	.word	0x400200b8
 8002c00:	40020410 	.word	0x40020410
 8002c04:	40020428 	.word	0x40020428
 8002c08:	40020440 	.word	0x40020440
 8002c0c:	40020458 	.word	0x40020458
 8002c10:	40020470 	.word	0x40020470
 8002c14:	40020488 	.word	0x40020488
 8002c18:	400204a0 	.word	0x400204a0
 8002c1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020e 	bic.w	r2, r2, #14
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a6c      	ldr	r2, [pc, #432]	; (8002de8 <HAL_DMA_Abort_IT+0x3a8>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d04a      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a6b      	ldr	r2, [pc, #428]	; (8002dec <HAL_DMA_Abort_IT+0x3ac>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d045      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_DMA_Abort_IT+0x3b0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d040      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a68      	ldr	r2, [pc, #416]	; (8002df4 <HAL_DMA_Abort_IT+0x3b4>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d03b      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a66      	ldr	r2, [pc, #408]	; (8002df8 <HAL_DMA_Abort_IT+0x3b8>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d036      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a65      	ldr	r2, [pc, #404]	; (8002dfc <HAL_DMA_Abort_IT+0x3bc>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d031      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a63      	ldr	r2, [pc, #396]	; (8002e00 <HAL_DMA_Abort_IT+0x3c0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02c      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a62      	ldr	r2, [pc, #392]	; (8002e04 <HAL_DMA_Abort_IT+0x3c4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d027      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <HAL_DMA_Abort_IT+0x3c8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d022      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5f      	ldr	r2, [pc, #380]	; (8002e0c <HAL_DMA_Abort_IT+0x3cc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d01d      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a5d      	ldr	r2, [pc, #372]	; (8002e10 <HAL_DMA_Abort_IT+0x3d0>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d018      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a5c      	ldr	r2, [pc, #368]	; (8002e14 <HAL_DMA_Abort_IT+0x3d4>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d013      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a5a      	ldr	r2, [pc, #360]	; (8002e18 <HAL_DMA_Abort_IT+0x3d8>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00e      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a59      	ldr	r2, [pc, #356]	; (8002e1c <HAL_DMA_Abort_IT+0x3dc>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a57      	ldr	r2, [pc, #348]	; (8002e20 <HAL_DMA_Abort_IT+0x3e0>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x290>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a56      	ldr	r2, [pc, #344]	; (8002e24 <HAL_DMA_Abort_IT+0x3e4>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <HAL_DMA_Abort_IT+0x2a2>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e007      	b.n	8002cf2 <HAL_DMA_Abort_IT+0x2b2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	; (8002de8 <HAL_DMA_Abort_IT+0x3a8>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d072      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a3a      	ldr	r2, [pc, #232]	; (8002dec <HAL_DMA_Abort_IT+0x3ac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d06d      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a39      	ldr	r2, [pc, #228]	; (8002df0 <HAL_DMA_Abort_IT+0x3b0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d068      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a37      	ldr	r2, [pc, #220]	; (8002df4 <HAL_DMA_Abort_IT+0x3b4>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d063      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a36      	ldr	r2, [pc, #216]	; (8002df8 <HAL_DMA_Abort_IT+0x3b8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d05e      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_DMA_Abort_IT+0x3bc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d059      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a33      	ldr	r2, [pc, #204]	; (8002e00 <HAL_DMA_Abort_IT+0x3c0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d054      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a31      	ldr	r2, [pc, #196]	; (8002e04 <HAL_DMA_Abort_IT+0x3c4>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d04f      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a30      	ldr	r2, [pc, #192]	; (8002e08 <HAL_DMA_Abort_IT+0x3c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d04a      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2e      	ldr	r2, [pc, #184]	; (8002e0c <HAL_DMA_Abort_IT+0x3cc>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d045      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2d      	ldr	r2, [pc, #180]	; (8002e10 <HAL_DMA_Abort_IT+0x3d0>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d040      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2b      	ldr	r2, [pc, #172]	; (8002e14 <HAL_DMA_Abort_IT+0x3d4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d03b      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a2a      	ldr	r2, [pc, #168]	; (8002e18 <HAL_DMA_Abort_IT+0x3d8>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d036      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a28      	ldr	r2, [pc, #160]	; (8002e1c <HAL_DMA_Abort_IT+0x3dc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d031      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <HAL_DMA_Abort_IT+0x3e0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d02c      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a25      	ldr	r2, [pc, #148]	; (8002e24 <HAL_DMA_Abort_IT+0x3e4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d027      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a24      	ldr	r2, [pc, #144]	; (8002e28 <HAL_DMA_Abort_IT+0x3e8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a22      	ldr	r2, [pc, #136]	; (8002e2c <HAL_DMA_Abort_IT+0x3ec>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01d      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_DMA_Abort_IT+0x3f0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d018      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1f      	ldr	r2, [pc, #124]	; (8002e34 <HAL_DMA_Abort_IT+0x3f4>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d013      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_DMA_Abort_IT+0x3f8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d00e      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a1c      	ldr	r2, [pc, #112]	; (8002e3c <HAL_DMA_Abort_IT+0x3fc>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d009      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_DMA_Abort_IT+0x400>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x3a2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_DMA_Abort_IT+0x404>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d132      	bne.n	8002e48 <HAL_DMA_Abort_IT+0x408>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e031      	b.n	8002e4a <HAL_DMA_Abort_IT+0x40a>
 8002de6:	bf00      	nop
 8002de8:	40020010 	.word	0x40020010
 8002dec:	40020028 	.word	0x40020028
 8002df0:	40020040 	.word	0x40020040
 8002df4:	40020058 	.word	0x40020058
 8002df8:	40020070 	.word	0x40020070
 8002dfc:	40020088 	.word	0x40020088
 8002e00:	400200a0 	.word	0x400200a0
 8002e04:	400200b8 	.word	0x400200b8
 8002e08:	40020410 	.word	0x40020410
 8002e0c:	40020428 	.word	0x40020428
 8002e10:	40020440 	.word	0x40020440
 8002e14:	40020458 	.word	0x40020458
 8002e18:	40020470 	.word	0x40020470
 8002e1c:	40020488 	.word	0x40020488
 8002e20:	400204a0 	.word	0x400204a0
 8002e24:	400204b8 	.word	0x400204b8
 8002e28:	58025408 	.word	0x58025408
 8002e2c:	5802541c 	.word	0x5802541c
 8002e30:	58025430 	.word	0x58025430
 8002e34:	58025444 	.word	0x58025444
 8002e38:	58025458 	.word	0x58025458
 8002e3c:	5802546c 	.word	0x5802546c
 8002e40:	58025480 	.word	0x58025480
 8002e44:	58025494 	.word	0x58025494
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d028      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00c      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002e9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop

08002ecc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b08a      	sub	sp, #40	; 0x28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ed8:	4b67      	ldr	r3, [pc, #412]	; (8003078 <HAL_DMA_IRQHandler+0x1ac>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a67      	ldr	r2, [pc, #412]	; (800307c <HAL_DMA_IRQHandler+0x1b0>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0a9b      	lsrs	r3, r3, #10
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5f      	ldr	r2, [pc, #380]	; (8003080 <HAL_DMA_IRQHandler+0x1b4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d04a      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a5d      	ldr	r2, [pc, #372]	; (8003084 <HAL_DMA_IRQHandler+0x1b8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d045      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a5c      	ldr	r2, [pc, #368]	; (8003088 <HAL_DMA_IRQHandler+0x1bc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d040      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a5a      	ldr	r2, [pc, #360]	; (800308c <HAL_DMA_IRQHandler+0x1c0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d03b      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a59      	ldr	r2, [pc, #356]	; (8003090 <HAL_DMA_IRQHandler+0x1c4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d036      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_DMA_IRQHandler+0x1c8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_DMA_IRQHandler+0x1cc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d02c      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_DMA_IRQHandler+0x1d0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d027      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a53      	ldr	r2, [pc, #332]	; (80030a0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d022      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a51      	ldr	r2, [pc, #324]	; (80030a4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d01d      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a50      	ldr	r2, [pc, #320]	; (80030a8 <HAL_DMA_IRQHandler+0x1dc>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d018      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	; (80030ac <HAL_DMA_IRQHandler+0x1e0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d013      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <HAL_DMA_IRQHandler+0x1e4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d00e      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a4b      	ldr	r2, [pc, #300]	; (80030b4 <HAL_DMA_IRQHandler+0x1e8>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d009      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a4a      	ldr	r2, [pc, #296]	; (80030b8 <HAL_DMA_IRQHandler+0x1ec>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d004      	beq.n	8002f9e <HAL_DMA_IRQHandler+0xd2>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a48      	ldr	r2, [pc, #288]	; (80030bc <HAL_DMA_IRQHandler+0x1f0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d101      	bne.n	8002fa2 <HAL_DMA_IRQHandler+0xd6>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_DMA_IRQHandler+0xd8>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 842b 	beq.w	8003800 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fae:	f003 031f 	and.w	r3, r3, #31
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 80a2 	beq.w	8003104 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a2e      	ldr	r2, [pc, #184]	; (8003080 <HAL_DMA_IRQHandler+0x1b4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d04a      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2d      	ldr	r2, [pc, #180]	; (8003084 <HAL_DMA_IRQHandler+0x1b8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d045      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a2b      	ldr	r2, [pc, #172]	; (8003088 <HAL_DMA_IRQHandler+0x1bc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d040      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2a      	ldr	r2, [pc, #168]	; (800308c <HAL_DMA_IRQHandler+0x1c0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d03b      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a28      	ldr	r2, [pc, #160]	; (8003090 <HAL_DMA_IRQHandler+0x1c4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d036      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_DMA_IRQHandler+0x1c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d031      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a25      	ldr	r2, [pc, #148]	; (8003098 <HAL_DMA_IRQHandler+0x1cc>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d02c      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a24      	ldr	r2, [pc, #144]	; (800309c <HAL_DMA_IRQHandler+0x1d0>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d027      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <HAL_DMA_IRQHandler+0x1d4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d022      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <HAL_DMA_IRQHandler+0x1d8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d01d      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a1f      	ldr	r2, [pc, #124]	; (80030a8 <HAL_DMA_IRQHandler+0x1dc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d018      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a1e      	ldr	r2, [pc, #120]	; (80030ac <HAL_DMA_IRQHandler+0x1e0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d013      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_DMA_IRQHandler+0x1e4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00e      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1b      	ldr	r2, [pc, #108]	; (80030b4 <HAL_DMA_IRQHandler+0x1e8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d009      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a19      	ldr	r2, [pc, #100]	; (80030b8 <HAL_DMA_IRQHandler+0x1ec>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_DMA_IRQHandler+0x194>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a18      	ldr	r2, [pc, #96]	; (80030bc <HAL_DMA_IRQHandler+0x1f0>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d12f      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x1f4>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0304 	and.w	r3, r3, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	bf14      	ite	ne
 800306e:	2301      	movne	r3, #1
 8003070:	2300      	moveq	r3, #0
 8003072:	b2db      	uxtb	r3, r3
 8003074:	e02e      	b.n	80030d4 <HAL_DMA_IRQHandler+0x208>
 8003076:	bf00      	nop
 8003078:	24000000 	.word	0x24000000
 800307c:	1b4e81b5 	.word	0x1b4e81b5
 8003080:	40020010 	.word	0x40020010
 8003084:	40020028 	.word	0x40020028
 8003088:	40020040 	.word	0x40020040
 800308c:	40020058 	.word	0x40020058
 8003090:	40020070 	.word	0x40020070
 8003094:	40020088 	.word	0x40020088
 8003098:	400200a0 	.word	0x400200a0
 800309c:	400200b8 	.word	0x400200b8
 80030a0:	40020410 	.word	0x40020410
 80030a4:	40020428 	.word	0x40020428
 80030a8:	40020440 	.word	0x40020440
 80030ac:	40020458 	.word	0x40020458
 80030b0:	40020470 	.word	0x40020470
 80030b4:	40020488 	.word	0x40020488
 80030b8:	400204a0 	.word	0x400204a0
 80030bc:	400204b8 	.word	0x400204b8
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	bf14      	ite	ne
 80030ce:	2301      	movne	r3, #1
 80030d0:	2300      	moveq	r3, #0
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 0204 	bic.w	r2, r2, #4
 80030e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2208      	movs	r2, #8
 80030f2:	409a      	lsls	r2, r3
 80030f4:	6a3b      	ldr	r3, [r7, #32]
 80030f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fc:	f043 0201 	orr.w	r2, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	fa22 f303 	lsr.w	r3, r2, r3
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d06e      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d04a      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a67      	ldr	r2, [pc, #412]	; (80032c8 <HAL_DMA_IRQHandler+0x3fc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d045      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a66      	ldr	r2, [pc, #408]	; (80032cc <HAL_DMA_IRQHandler+0x400>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d040      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a64      	ldr	r2, [pc, #400]	; (80032d0 <HAL_DMA_IRQHandler+0x404>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d03b      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a63      	ldr	r2, [pc, #396]	; (80032d4 <HAL_DMA_IRQHandler+0x408>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d036      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a61      	ldr	r2, [pc, #388]	; (80032d8 <HAL_DMA_IRQHandler+0x40c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d031      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a60      	ldr	r2, [pc, #384]	; (80032dc <HAL_DMA_IRQHandler+0x410>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d02c      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a5e      	ldr	r2, [pc, #376]	; (80032e0 <HAL_DMA_IRQHandler+0x414>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d027      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a5d      	ldr	r2, [pc, #372]	; (80032e4 <HAL_DMA_IRQHandler+0x418>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5b      	ldr	r2, [pc, #364]	; (80032e8 <HAL_DMA_IRQHandler+0x41c>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01d      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a5a      	ldr	r2, [pc, #360]	; (80032ec <HAL_DMA_IRQHandler+0x420>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d018      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_DMA_IRQHandler+0x424>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d013      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_DMA_IRQHandler+0x428>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00e      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a55      	ldr	r2, [pc, #340]	; (80032f8 <HAL_DMA_IRQHandler+0x42c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a54      	ldr	r2, [pc, #336]	; (80032fc <HAL_DMA_IRQHandler+0x430>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d004      	beq.n	80031ba <HAL_DMA_IRQHandler+0x2ee>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a52      	ldr	r2, [pc, #328]	; (8003300 <HAL_DMA_IRQHandler+0x434>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d10a      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x304>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e003      	b.n	80031d8 <HAL_DMA_IRQHandler+0x30c>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00d      	beq.n	80031f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	2201      	movs	r2, #1
 80031e6:	409a      	lsls	r2, r3
 80031e8:	6a3b      	ldr	r3, [r7, #32]
 80031ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f0:	f043 0202 	orr.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fc:	f003 031f 	and.w	r3, r3, #31
 8003200:	2204      	movs	r2, #4
 8003202:	409a      	lsls	r2, r3
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	4013      	ands	r3, r2
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 808f 	beq.w	800332c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a2c      	ldr	r2, [pc, #176]	; (80032c4 <HAL_DMA_IRQHandler+0x3f8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d04a      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <HAL_DMA_IRQHandler+0x3fc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d045      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_DMA_IRQHandler+0x400>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d040      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a27      	ldr	r2, [pc, #156]	; (80032d0 <HAL_DMA_IRQHandler+0x404>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d03b      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a26      	ldr	r2, [pc, #152]	; (80032d4 <HAL_DMA_IRQHandler+0x408>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d036      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a24      	ldr	r2, [pc, #144]	; (80032d8 <HAL_DMA_IRQHandler+0x40c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d031      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a23      	ldr	r2, [pc, #140]	; (80032dc <HAL_DMA_IRQHandler+0x410>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d02c      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a21      	ldr	r2, [pc, #132]	; (80032e0 <HAL_DMA_IRQHandler+0x414>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d027      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a20      	ldr	r2, [pc, #128]	; (80032e4 <HAL_DMA_IRQHandler+0x418>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <HAL_DMA_IRQHandler+0x41c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01d      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1d      	ldr	r2, [pc, #116]	; (80032ec <HAL_DMA_IRQHandler+0x420>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d018      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1b      	ldr	r2, [pc, #108]	; (80032f0 <HAL_DMA_IRQHandler+0x424>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1a      	ldr	r2, [pc, #104]	; (80032f4 <HAL_DMA_IRQHandler+0x428>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a18      	ldr	r2, [pc, #96]	; (80032f8 <HAL_DMA_IRQHandler+0x42c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a17      	ldr	r2, [pc, #92]	; (80032fc <HAL_DMA_IRQHandler+0x430>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_DMA_IRQHandler+0x3e2>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a15      	ldr	r2, [pc, #84]	; (8003300 <HAL_DMA_IRQHandler+0x434>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d12a      	bne.n	8003304 <HAL_DMA_IRQHandler+0x438>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e023      	b.n	800330c <HAL_DMA_IRQHandler+0x440>
 80032c4:	40020010 	.word	0x40020010
 80032c8:	40020028 	.word	0x40020028
 80032cc:	40020040 	.word	0x40020040
 80032d0:	40020058 	.word	0x40020058
 80032d4:	40020070 	.word	0x40020070
 80032d8:	40020088 	.word	0x40020088
 80032dc:	400200a0 	.word	0x400200a0
 80032e0:	400200b8 	.word	0x400200b8
 80032e4:	40020410 	.word	0x40020410
 80032e8:	40020428 	.word	0x40020428
 80032ec:	40020440 	.word	0x40020440
 80032f0:	40020458 	.word	0x40020458
 80032f4:	40020470 	.word	0x40020470
 80032f8:	40020488 	.word	0x40020488
 80032fc:	400204a0 	.word	0x400204a0
 8003300:	400204b8 	.word	0x400204b8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00d      	beq.n	800332c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f003 031f 	and.w	r3, r3, #31
 8003318:	2204      	movs	r2, #4
 800331a:	409a      	lsls	r2, r3
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003330:	f003 031f 	and.w	r3, r3, #31
 8003334:	2210      	movs	r2, #16
 8003336:	409a      	lsls	r2, r3
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 80a6 	beq.w	800348e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a85      	ldr	r2, [pc, #532]	; (800355c <HAL_DMA_IRQHandler+0x690>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d04a      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a83      	ldr	r2, [pc, #524]	; (8003560 <HAL_DMA_IRQHandler+0x694>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d045      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a82      	ldr	r2, [pc, #520]	; (8003564 <HAL_DMA_IRQHandler+0x698>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d040      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a80      	ldr	r2, [pc, #512]	; (8003568 <HAL_DMA_IRQHandler+0x69c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d03b      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a7f      	ldr	r2, [pc, #508]	; (800356c <HAL_DMA_IRQHandler+0x6a0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d036      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a7d      	ldr	r2, [pc, #500]	; (8003570 <HAL_DMA_IRQHandler+0x6a4>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a7c      	ldr	r2, [pc, #496]	; (8003574 <HAL_DMA_IRQHandler+0x6a8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d02c      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a7a      	ldr	r2, [pc, #488]	; (8003578 <HAL_DMA_IRQHandler+0x6ac>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d027      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a79      	ldr	r2, [pc, #484]	; (800357c <HAL_DMA_IRQHandler+0x6b0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d022      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a77      	ldr	r2, [pc, #476]	; (8003580 <HAL_DMA_IRQHandler+0x6b4>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d01d      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a76      	ldr	r2, [pc, #472]	; (8003584 <HAL_DMA_IRQHandler+0x6b8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d018      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a74      	ldr	r2, [pc, #464]	; (8003588 <HAL_DMA_IRQHandler+0x6bc>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a73      	ldr	r2, [pc, #460]	; (800358c <HAL_DMA_IRQHandler+0x6c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a71      	ldr	r2, [pc, #452]	; (8003590 <HAL_DMA_IRQHandler+0x6c4>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a70      	ldr	r2, [pc, #448]	; (8003594 <HAL_DMA_IRQHandler+0x6c8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x516>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6e      	ldr	r2, [pc, #440]	; (8003598 <HAL_DMA_IRQHandler+0x6cc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d10a      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x52c>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e009      	b.n	800340c <HAL_DMA_IRQHandler+0x540>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	2b00      	cmp	r3, #0
 8003404:	bf14      	ite	ne
 8003406:	2301      	movne	r3, #1
 8003408:	2300      	moveq	r3, #0
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d03e      	beq.n	800348e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	2210      	movs	r2, #16
 800341a:	409a      	lsls	r2, r3
 800341c:	6a3b      	ldr	r3, [r7, #32]
 800341e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d018      	beq.n	8003460 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d024      	beq.n	800348e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
 800344c:	e01f      	b.n	800348e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	d01b      	beq.n	800348e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
 800345e:	e016      	b.n	800348e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d107      	bne.n	800347e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0208 	bic.w	r2, r2, #8
 800347c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003492:	f003 031f 	and.w	r3, r3, #31
 8003496:	2220      	movs	r2, #32
 8003498:	409a      	lsls	r2, r3
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 8110 	beq.w	80036c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <HAL_DMA_IRQHandler+0x690>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d04a      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_DMA_IRQHandler+0x694>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d045      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_DMA_IRQHandler+0x698>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d040      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_DMA_IRQHandler+0x69c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d03b      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_DMA_IRQHandler+0x6a0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d036      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_DMA_IRQHandler+0x6a4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d031      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a23      	ldr	r2, [pc, #140]	; (8003574 <HAL_DMA_IRQHandler+0x6a8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d02c      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_DMA_IRQHandler+0x6ac>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d027      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_DMA_IRQHandler+0x6b0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d022      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_DMA_IRQHandler+0x6b4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d01d      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_DMA_IRQHandler+0x6b8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d018      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_DMA_IRQHandler+0x6bc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d013      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_DMA_IRQHandler+0x6c0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00e      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_DMA_IRQHandler+0x6c4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d009      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_DMA_IRQHandler+0x6c8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d004      	beq.n	8003544 <HAL_DMA_IRQHandler+0x678>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_DMA_IRQHandler+0x6cc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d12b      	bne.n	800359c <HAL_DMA_IRQHandler+0x6d0>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	bf14      	ite	ne
 8003552:	2301      	movne	r3, #1
 8003554:	2300      	moveq	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	e02a      	b.n	80035b0 <HAL_DMA_IRQHandler+0x6e4>
 800355a:	bf00      	nop
 800355c:	40020010 	.word	0x40020010
 8003560:	40020028 	.word	0x40020028
 8003564:	40020040 	.word	0x40020040
 8003568:	40020058 	.word	0x40020058
 800356c:	40020070 	.word	0x40020070
 8003570:	40020088 	.word	0x40020088
 8003574:	400200a0 	.word	0x400200a0
 8003578:	400200b8 	.word	0x400200b8
 800357c:	40020410 	.word	0x40020410
 8003580:	40020428 	.word	0x40020428
 8003584:	40020440 	.word	0x40020440
 8003588:	40020458 	.word	0x40020458
 800358c:	40020470 	.word	0x40020470
 8003590:	40020488 	.word	0x40020488
 8003594:	400204a0 	.word	0x400204a0
 8003598:	400204b8 	.word	0x400204b8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	bf14      	ite	ne
 80035aa:	2301      	movne	r3, #1
 80035ac:	2300      	moveq	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8087 	beq.w	80036c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	f003 031f 	and.w	r3, r3, #31
 80035be:	2220      	movs	r2, #32
 80035c0:	409a      	lsls	r2, r3
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d139      	bne.n	8003646 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0216 	bic.w	r2, r2, #22
 80035e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695a      	ldr	r2, [r3, #20]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d103      	bne.n	8003602 <HAL_DMA_IRQHandler+0x736>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d007      	beq.n	8003612 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0208 	bic.w	r2, r2, #8
 8003610:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	223f      	movs	r2, #63	; 0x3f
 800361c:	409a      	lsls	r2, r3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 834a 	beq.w	8003cd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	4798      	blx	r3
          }
          return;
 8003644:	e344      	b.n	8003cd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d018      	beq.n	8003686 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d108      	bne.n	8003674 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003666:	2b00      	cmp	r3, #0
 8003668:	d02c      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	4798      	blx	r3
 8003672:	e027      	b.n	80036c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
 8003684:	e01e      	b.n	80036c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10f      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0210 	bic.w	r2, r2, #16
 80036a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 8306 	beq.w	8003cda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 8088 	beq.w	80037ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2204      	movs	r2, #4
 80036e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a7a      	ldr	r2, [pc, #488]	; (80038d4 <HAL_DMA_IRQHandler+0xa08>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d04a      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a79      	ldr	r2, [pc, #484]	; (80038d8 <HAL_DMA_IRQHandler+0xa0c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d045      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a77      	ldr	r2, [pc, #476]	; (80038dc <HAL_DMA_IRQHandler+0xa10>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d040      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a76      	ldr	r2, [pc, #472]	; (80038e0 <HAL_DMA_IRQHandler+0xa14>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d03b      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a74      	ldr	r2, [pc, #464]	; (80038e4 <HAL_DMA_IRQHandler+0xa18>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d036      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a73      	ldr	r2, [pc, #460]	; (80038e8 <HAL_DMA_IRQHandler+0xa1c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d031      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a71      	ldr	r2, [pc, #452]	; (80038ec <HAL_DMA_IRQHandler+0xa20>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d02c      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a70      	ldr	r2, [pc, #448]	; (80038f0 <HAL_DMA_IRQHandler+0xa24>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d027      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a6e      	ldr	r2, [pc, #440]	; (80038f4 <HAL_DMA_IRQHandler+0xa28>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d022      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a6d      	ldr	r2, [pc, #436]	; (80038f8 <HAL_DMA_IRQHandler+0xa2c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d01d      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a6b      	ldr	r2, [pc, #428]	; (80038fc <HAL_DMA_IRQHandler+0xa30>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d018      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_DMA_IRQHandler+0xa34>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d013      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a68      	ldr	r2, [pc, #416]	; (8003904 <HAL_DMA_IRQHandler+0xa38>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00e      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a67      	ldr	r2, [pc, #412]	; (8003908 <HAL_DMA_IRQHandler+0xa3c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d009      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a65      	ldr	r2, [pc, #404]	; (800390c <HAL_DMA_IRQHandler+0xa40>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_DMA_IRQHandler+0x8b8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a64      	ldr	r2, [pc, #400]	; (8003910 <HAL_DMA_IRQHandler+0xa44>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d108      	bne.n	8003796 <HAL_DMA_IRQHandler+0x8ca>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e007      	b.n	80037a6 <HAL_DMA_IRQHandler+0x8da>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	3301      	adds	r3, #1
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d307      	bcc.n	80037c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1f2      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x8da>
 80037c0:	e000      	b.n	80037c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d004      	beq.n	80037dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2203      	movs	r2, #3
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80037da:	e003      	b.n	80037e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8272 	beq.w	8003cda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	4798      	blx	r3
 80037fe:	e26c      	b.n	8003cda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a43      	ldr	r2, [pc, #268]	; (8003914 <HAL_DMA_IRQHandler+0xa48>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d022      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a42      	ldr	r2, [pc, #264]	; (8003918 <HAL_DMA_IRQHandler+0xa4c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d01d      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a40      	ldr	r2, [pc, #256]	; (800391c <HAL_DMA_IRQHandler+0xa50>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d018      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a3f      	ldr	r2, [pc, #252]	; (8003920 <HAL_DMA_IRQHandler+0xa54>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d013      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a3d      	ldr	r2, [pc, #244]	; (8003924 <HAL_DMA_IRQHandler+0xa58>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d00e      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a3c      	ldr	r2, [pc, #240]	; (8003928 <HAL_DMA_IRQHandler+0xa5c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d009      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3a      	ldr	r2, [pc, #232]	; (800392c <HAL_DMA_IRQHandler+0xa60>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d004      	beq.n	8003850 <HAL_DMA_IRQHandler+0x984>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a39      	ldr	r2, [pc, #228]	; (8003930 <HAL_DMA_IRQHandler+0xa64>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d101      	bne.n	8003854 <HAL_DMA_IRQHandler+0x988>
 8003850:	2301      	movs	r3, #1
 8003852:	e000      	b.n	8003856 <HAL_DMA_IRQHandler+0x98a>
 8003854:	2300      	movs	r3, #0
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 823f 	beq.w	8003cda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2204      	movs	r2, #4
 800386e:	409a      	lsls	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	4013      	ands	r3, r2
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80cd 	beq.w	8003a14 <HAL_DMA_IRQHandler+0xb48>
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80c7 	beq.w	8003a14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2204      	movs	r2, #4
 8003890:	409a      	lsls	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d049      	beq.n	8003934 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 8210 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038bc:	e20a      	b.n	8003cd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8206 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d0:	e200      	b.n	8003cd4 <HAL_DMA_IRQHandler+0xe08>
 80038d2:	bf00      	nop
 80038d4:	40020010 	.word	0x40020010
 80038d8:	40020028 	.word	0x40020028
 80038dc:	40020040 	.word	0x40020040
 80038e0:	40020058 	.word	0x40020058
 80038e4:	40020070 	.word	0x40020070
 80038e8:	40020088 	.word	0x40020088
 80038ec:	400200a0 	.word	0x400200a0
 80038f0:	400200b8 	.word	0x400200b8
 80038f4:	40020410 	.word	0x40020410
 80038f8:	40020428 	.word	0x40020428
 80038fc:	40020440 	.word	0x40020440
 8003900:	40020458 	.word	0x40020458
 8003904:	40020470 	.word	0x40020470
 8003908:	40020488 	.word	0x40020488
 800390c:	400204a0 	.word	0x400204a0
 8003910:	400204b8 	.word	0x400204b8
 8003914:	58025408 	.word	0x58025408
 8003918:	5802541c 	.word	0x5802541c
 800391c:	58025430 	.word	0x58025430
 8003920:	58025444 	.word	0x58025444
 8003924:	58025458 	.word	0x58025458
 8003928:	5802546c 	.word	0x5802546c
 800392c:	58025480 	.word	0x58025480
 8003930:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	2b00      	cmp	r3, #0
 800393c:	d160      	bne.n	8003a00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a7f      	ldr	r2, [pc, #508]	; (8003b40 <HAL_DMA_IRQHandler+0xc74>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d04a      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a7d      	ldr	r2, [pc, #500]	; (8003b44 <HAL_DMA_IRQHandler+0xc78>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d045      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a7c      	ldr	r2, [pc, #496]	; (8003b48 <HAL_DMA_IRQHandler+0xc7c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d040      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a7a      	ldr	r2, [pc, #488]	; (8003b4c <HAL_DMA_IRQHandler+0xc80>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d03b      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a79      	ldr	r2, [pc, #484]	; (8003b50 <HAL_DMA_IRQHandler+0xc84>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d036      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a77      	ldr	r2, [pc, #476]	; (8003b54 <HAL_DMA_IRQHandler+0xc88>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d031      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a76      	ldr	r2, [pc, #472]	; (8003b58 <HAL_DMA_IRQHandler+0xc8c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d02c      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a74      	ldr	r2, [pc, #464]	; (8003b5c <HAL_DMA_IRQHandler+0xc90>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d027      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a73      	ldr	r2, [pc, #460]	; (8003b60 <HAL_DMA_IRQHandler+0xc94>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d022      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a71      	ldr	r2, [pc, #452]	; (8003b64 <HAL_DMA_IRQHandler+0xc98>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d01d      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a70      	ldr	r2, [pc, #448]	; (8003b68 <HAL_DMA_IRQHandler+0xc9c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d018      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_DMA_IRQHandler+0xca0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d013      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a6d      	ldr	r2, [pc, #436]	; (8003b70 <HAL_DMA_IRQHandler+0xca4>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00e      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a6b      	ldr	r2, [pc, #428]	; (8003b74 <HAL_DMA_IRQHandler+0xca8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d009      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a6a      	ldr	r2, [pc, #424]	; (8003b78 <HAL_DMA_IRQHandler+0xcac>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d004      	beq.n	80039de <HAL_DMA_IRQHandler+0xb12>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_DMA_IRQHandler+0xcb0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d108      	bne.n	80039f0 <HAL_DMA_IRQHandler+0xb24>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0208 	bic.w	r2, r2, #8
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e007      	b.n	8003a00 <HAL_DMA_IRQHandler+0xb34>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 8165 	beq.w	8003cd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a12:	e15f      	b.n	8003cd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	f003 031f 	and.w	r3, r3, #31
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	409a      	lsls	r2, r3
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	4013      	ands	r3, r2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80c5 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xce8>
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80bf 	beq.w	8003bb4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2202      	movs	r2, #2
 8003a40:	409a      	lsls	r2, r3
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d018      	beq.n	8003a82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 813a 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a6c:	e134      	b.n	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 8130 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a80:	e12a      	b.n	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f040 8089 	bne.w	8003ba0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a2b      	ldr	r2, [pc, #172]	; (8003b40 <HAL_DMA_IRQHandler+0xc74>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d04a      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a29      	ldr	r2, [pc, #164]	; (8003b44 <HAL_DMA_IRQHandler+0xc78>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d045      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a28      	ldr	r2, [pc, #160]	; (8003b48 <HAL_DMA_IRQHandler+0xc7c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d040      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <HAL_DMA_IRQHandler+0xc80>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d03b      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <HAL_DMA_IRQHandler+0xc84>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d036      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_DMA_IRQHandler+0xc88>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d031      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a22      	ldr	r2, [pc, #136]	; (8003b58 <HAL_DMA_IRQHandler+0xc8c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d02c      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <HAL_DMA_IRQHandler+0xc90>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d027      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a1f      	ldr	r2, [pc, #124]	; (8003b60 <HAL_DMA_IRQHandler+0xc94>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d022      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <HAL_DMA_IRQHandler+0xc98>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1c      	ldr	r2, [pc, #112]	; (8003b68 <HAL_DMA_IRQHandler+0xc9c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d018      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1a      	ldr	r2, [pc, #104]	; (8003b6c <HAL_DMA_IRQHandler+0xca0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a19      	ldr	r2, [pc, #100]	; (8003b70 <HAL_DMA_IRQHandler+0xca4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a17      	ldr	r2, [pc, #92]	; (8003b74 <HAL_DMA_IRQHandler+0xca8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_DMA_IRQHandler+0xcac>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_DMA_IRQHandler+0xc62>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a14      	ldr	r2, [pc, #80]	; (8003b7c <HAL_DMA_IRQHandler+0xcb0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d128      	bne.n	8003b80 <HAL_DMA_IRQHandler+0xcb4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0214 	bic.w	r2, r2, #20
 8003b3c:	601a      	str	r2, [r3, #0]
 8003b3e:	e027      	b.n	8003b90 <HAL_DMA_IRQHandler+0xcc4>
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 020a 	bic.w	r2, r2, #10
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	f000 8097 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bb2:	e091      	b.n	8003cd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	f003 031f 	and.w	r3, r3, #31
 8003bbc:	2208      	movs	r2, #8
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8088 	beq.w	8003cda <HAL_DMA_IRQHandler+0xe0e>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8082 	beq.w	8003cda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <HAL_DMA_IRQHandler+0xe14>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d04a      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3f      	ldr	r2, [pc, #252]	; (8003ce4 <HAL_DMA_IRQHandler+0xe18>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d045      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a3e      	ldr	r2, [pc, #248]	; (8003ce8 <HAL_DMA_IRQHandler+0xe1c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d040      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3c      	ldr	r2, [pc, #240]	; (8003cec <HAL_DMA_IRQHandler+0xe20>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d03b      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a3b      	ldr	r2, [pc, #236]	; (8003cf0 <HAL_DMA_IRQHandler+0xe24>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d036      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a39      	ldr	r2, [pc, #228]	; (8003cf4 <HAL_DMA_IRQHandler+0xe28>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d031      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a38      	ldr	r2, [pc, #224]	; (8003cf8 <HAL_DMA_IRQHandler+0xe2c>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d02c      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a36      	ldr	r2, [pc, #216]	; (8003cfc <HAL_DMA_IRQHandler+0xe30>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d027      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a35      	ldr	r2, [pc, #212]	; (8003d00 <HAL_DMA_IRQHandler+0xe34>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d022      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a33      	ldr	r2, [pc, #204]	; (8003d04 <HAL_DMA_IRQHandler+0xe38>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <HAL_DMA_IRQHandler+0xe3c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d018      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a30      	ldr	r2, [pc, #192]	; (8003d0c <HAL_DMA_IRQHandler+0xe40>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d013      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <HAL_DMA_IRQHandler+0xe44>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d00e      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_DMA_IRQHandler+0xe48>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d009      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a2c      	ldr	r2, [pc, #176]	; (8003d18 <HAL_DMA_IRQHandler+0xe4c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d004      	beq.n	8003c76 <HAL_DMA_IRQHandler+0xdaa>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <HAL_DMA_IRQHandler+0xe50>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d108      	bne.n	8003c88 <HAL_DMA_IRQHandler+0xdbc>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 021c 	bic.w	r2, r2, #28
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	e007      	b.n	8003c98 <HAL_DMA_IRQHandler+0xdcc>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f022 020e 	bic.w	r2, r2, #14
 8003c96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d009      	beq.n	8003cda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	4798      	blx	r3
 8003cce:	e004      	b.n	8003cda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cd0:	bf00      	nop
 8003cd2:	e002      	b.n	8003cda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd4:	bf00      	nop
 8003cd6:	e000      	b.n	8003cda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cda:	3728      	adds	r7, #40	; 0x28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40020010 	.word	0x40020010
 8003ce4:	40020028 	.word	0x40020028
 8003ce8:	40020040 	.word	0x40020040
 8003cec:	40020058 	.word	0x40020058
 8003cf0:	40020070 	.word	0x40020070
 8003cf4:	40020088 	.word	0x40020088
 8003cf8:	400200a0 	.word	0x400200a0
 8003cfc:	400200b8 	.word	0x400200b8
 8003d00:	40020410 	.word	0x40020410
 8003d04:	40020428 	.word	0x40020428
 8003d08:	40020440 	.word	0x40020440
 8003d0c:	40020458 	.word	0x40020458
 8003d10:	40020470 	.word	0x40020470
 8003d14:	40020488 	.word	0x40020488
 8003d18:	400204a0 	.word	0x400204a0
 8003d1c:	400204b8 	.word	0x400204b8

08003d20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b087      	sub	sp, #28
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
 8003d2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a7f      	ldr	r2, [pc, #508]	; (8003f3c <DMA_SetConfig+0x21c>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d072      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a7d      	ldr	r2, [pc, #500]	; (8003f40 <DMA_SetConfig+0x220>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d06d      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a7c      	ldr	r2, [pc, #496]	; (8003f44 <DMA_SetConfig+0x224>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d068      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a7a      	ldr	r2, [pc, #488]	; (8003f48 <DMA_SetConfig+0x228>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d063      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a79      	ldr	r2, [pc, #484]	; (8003f4c <DMA_SetConfig+0x22c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d05e      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a77      	ldr	r2, [pc, #476]	; (8003f50 <DMA_SetConfig+0x230>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d059      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a76      	ldr	r2, [pc, #472]	; (8003f54 <DMA_SetConfig+0x234>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d054      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a74      	ldr	r2, [pc, #464]	; (8003f58 <DMA_SetConfig+0x238>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d04f      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a73      	ldr	r2, [pc, #460]	; (8003f5c <DMA_SetConfig+0x23c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d04a      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a71      	ldr	r2, [pc, #452]	; (8003f60 <DMA_SetConfig+0x240>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d045      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a70      	ldr	r2, [pc, #448]	; (8003f64 <DMA_SetConfig+0x244>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d040      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <DMA_SetConfig+0x248>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d03b      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a6d      	ldr	r2, [pc, #436]	; (8003f6c <DMA_SetConfig+0x24c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d036      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6b      	ldr	r2, [pc, #428]	; (8003f70 <DMA_SetConfig+0x250>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d031      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6a      	ldr	r2, [pc, #424]	; (8003f74 <DMA_SetConfig+0x254>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d02c      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a68      	ldr	r2, [pc, #416]	; (8003f78 <DMA_SetConfig+0x258>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d027      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a67      	ldr	r2, [pc, #412]	; (8003f7c <DMA_SetConfig+0x25c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d022      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <DMA_SetConfig+0x260>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01d      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a64      	ldr	r2, [pc, #400]	; (8003f84 <DMA_SetConfig+0x264>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d018      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a62      	ldr	r2, [pc, #392]	; (8003f88 <DMA_SetConfig+0x268>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d013      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a61      	ldr	r2, [pc, #388]	; (8003f8c <DMA_SetConfig+0x26c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00e      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a5f      	ldr	r2, [pc, #380]	; (8003f90 <DMA_SetConfig+0x270>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a5e      	ldr	r2, [pc, #376]	; (8003f94 <DMA_SetConfig+0x274>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d004      	beq.n	8003e2a <DMA_SetConfig+0x10a>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a5c      	ldr	r2, [pc, #368]	; (8003f98 <DMA_SetConfig+0x278>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d101      	bne.n	8003e2e <DMA_SetConfig+0x10e>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <DMA_SetConfig+0x110>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00d      	beq.n	8003e50 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e3c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e4e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a39      	ldr	r2, [pc, #228]	; (8003f3c <DMA_SetConfig+0x21c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d04a      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a38      	ldr	r2, [pc, #224]	; (8003f40 <DMA_SetConfig+0x220>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d045      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a36      	ldr	r2, [pc, #216]	; (8003f44 <DMA_SetConfig+0x224>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d040      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a35      	ldr	r2, [pc, #212]	; (8003f48 <DMA_SetConfig+0x228>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d03b      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a33      	ldr	r2, [pc, #204]	; (8003f4c <DMA_SetConfig+0x22c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d036      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a32      	ldr	r2, [pc, #200]	; (8003f50 <DMA_SetConfig+0x230>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d031      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a30      	ldr	r2, [pc, #192]	; (8003f54 <DMA_SetConfig+0x234>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02c      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <DMA_SetConfig+0x238>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d027      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a2d      	ldr	r2, [pc, #180]	; (8003f5c <DMA_SetConfig+0x23c>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d022      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a2c      	ldr	r2, [pc, #176]	; (8003f60 <DMA_SetConfig+0x240>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d01d      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <DMA_SetConfig+0x244>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d018      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <DMA_SetConfig+0x248>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d013      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a27      	ldr	r2, [pc, #156]	; (8003f6c <DMA_SetConfig+0x24c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d00e      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <DMA_SetConfig+0x250>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d009      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a24      	ldr	r2, [pc, #144]	; (8003f74 <DMA_SetConfig+0x254>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d004      	beq.n	8003ef0 <DMA_SetConfig+0x1d0>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a23      	ldr	r2, [pc, #140]	; (8003f78 <DMA_SetConfig+0x258>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d101      	bne.n	8003ef4 <DMA_SetConfig+0x1d4>
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e000      	b.n	8003ef6 <DMA_SetConfig+0x1d6>
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d059      	beq.n	8003fae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	223f      	movs	r2, #63	; 0x3f
 8003f04:	409a      	lsls	r2, r3
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f18:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d138      	bne.n	8003f9c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68ba      	ldr	r2, [r7, #8]
 8003f38:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f3a:	e086      	b.n	800404a <DMA_SetConfig+0x32a>
 8003f3c:	40020010 	.word	0x40020010
 8003f40:	40020028 	.word	0x40020028
 8003f44:	40020040 	.word	0x40020040
 8003f48:	40020058 	.word	0x40020058
 8003f4c:	40020070 	.word	0x40020070
 8003f50:	40020088 	.word	0x40020088
 8003f54:	400200a0 	.word	0x400200a0
 8003f58:	400200b8 	.word	0x400200b8
 8003f5c:	40020410 	.word	0x40020410
 8003f60:	40020428 	.word	0x40020428
 8003f64:	40020440 	.word	0x40020440
 8003f68:	40020458 	.word	0x40020458
 8003f6c:	40020470 	.word	0x40020470
 8003f70:	40020488 	.word	0x40020488
 8003f74:	400204a0 	.word	0x400204a0
 8003f78:	400204b8 	.word	0x400204b8
 8003f7c:	58025408 	.word	0x58025408
 8003f80:	5802541c 	.word	0x5802541c
 8003f84:	58025430 	.word	0x58025430
 8003f88:	58025444 	.word	0x58025444
 8003f8c:	58025458 	.word	0x58025458
 8003f90:	5802546c 	.word	0x5802546c
 8003f94:	58025480 	.word	0x58025480
 8003f98:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	60da      	str	r2, [r3, #12]
}
 8003fac:	e04d      	b.n	800404a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a29      	ldr	r2, [pc, #164]	; (8004058 <DMA_SetConfig+0x338>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a27      	ldr	r2, [pc, #156]	; (800405c <DMA_SetConfig+0x33c>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d01d      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a26      	ldr	r2, [pc, #152]	; (8004060 <DMA_SetConfig+0x340>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d018      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a24      	ldr	r2, [pc, #144]	; (8004064 <DMA_SetConfig+0x344>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a23      	ldr	r2, [pc, #140]	; (8004068 <DMA_SetConfig+0x348>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a21      	ldr	r2, [pc, #132]	; (800406c <DMA_SetConfig+0x34c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a20      	ldr	r2, [pc, #128]	; (8004070 <DMA_SetConfig+0x350>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <DMA_SetConfig+0x2de>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a1e      	ldr	r2, [pc, #120]	; (8004074 <DMA_SetConfig+0x354>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <DMA_SetConfig+0x2e2>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <DMA_SetConfig+0x2e4>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400c:	f003 031f 	and.w	r3, r3, #31
 8004010:	2201      	movs	r2, #1
 8004012:	409a      	lsls	r2, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d108      	bne.n	800403a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	60da      	str	r2, [r3, #12]
}
 8004038:	e007      	b.n	800404a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	60da      	str	r2, [r3, #12]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	58025408 	.word	0x58025408
 800405c:	5802541c 	.word	0x5802541c
 8004060:	58025430 	.word	0x58025430
 8004064:	58025444 	.word	0x58025444
 8004068:	58025458 	.word	0x58025458
 800406c:	5802546c 	.word	0x5802546c
 8004070:	58025480 	.word	0x58025480
 8004074:	58025494 	.word	0x58025494

08004078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a42      	ldr	r2, [pc, #264]	; (8004190 <DMA_CalcBaseAndBitshift+0x118>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d04a      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a41      	ldr	r2, [pc, #260]	; (8004194 <DMA_CalcBaseAndBitshift+0x11c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d045      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a3f      	ldr	r2, [pc, #252]	; (8004198 <DMA_CalcBaseAndBitshift+0x120>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d040      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a3e      	ldr	r2, [pc, #248]	; (800419c <DMA_CalcBaseAndBitshift+0x124>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d03b      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3c      	ldr	r2, [pc, #240]	; (80041a0 <DMA_CalcBaseAndBitshift+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d036      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a3b      	ldr	r2, [pc, #236]	; (80041a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d031      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a39      	ldr	r2, [pc, #228]	; (80041a8 <DMA_CalcBaseAndBitshift+0x130>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d02c      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a38      	ldr	r2, [pc, #224]	; (80041ac <DMA_CalcBaseAndBitshift+0x134>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d027      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a36      	ldr	r2, [pc, #216]	; (80041b0 <DMA_CalcBaseAndBitshift+0x138>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d022      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a35      	ldr	r2, [pc, #212]	; (80041b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d01d      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a33      	ldr	r2, [pc, #204]	; (80041b8 <DMA_CalcBaseAndBitshift+0x140>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d018      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a32      	ldr	r2, [pc, #200]	; (80041bc <DMA_CalcBaseAndBitshift+0x144>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d013      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a30      	ldr	r2, [pc, #192]	; (80041c0 <DMA_CalcBaseAndBitshift+0x148>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00e      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a2f      	ldr	r2, [pc, #188]	; (80041c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d009      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a2d      	ldr	r2, [pc, #180]	; (80041c8 <DMA_CalcBaseAndBitshift+0x150>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d004      	beq.n	8004120 <DMA_CalcBaseAndBitshift+0xa8>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a2c      	ldr	r2, [pc, #176]	; (80041cc <DMA_CalcBaseAndBitshift+0x154>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d101      	bne.n	8004124 <DMA_CalcBaseAndBitshift+0xac>
 8004120:	2301      	movs	r3, #1
 8004122:	e000      	b.n	8004126 <DMA_CalcBaseAndBitshift+0xae>
 8004124:	2300      	movs	r3, #0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d024      	beq.n	8004174 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	3b10      	subs	r3, #16
 8004132:	4a27      	ldr	r2, [pc, #156]	; (80041d0 <DMA_CalcBaseAndBitshift+0x158>)
 8004134:	fba2 2303 	umull	r2, r3, r2, r3
 8004138:	091b      	lsrs	r3, r3, #4
 800413a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	4a24      	ldr	r2, [pc, #144]	; (80041d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8004144:	5cd3      	ldrb	r3, [r2, r3]
 8004146:	461a      	mov	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d908      	bls.n	8004164 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	461a      	mov	r2, r3
 8004158:	4b1f      	ldr	r3, [pc, #124]	; (80041d8 <DMA_CalcBaseAndBitshift+0x160>)
 800415a:	4013      	ands	r3, r2
 800415c:	1d1a      	adds	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	659a      	str	r2, [r3, #88]	; 0x58
 8004162:	e00d      	b.n	8004180 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	4b1b      	ldr	r3, [pc, #108]	; (80041d8 <DMA_CalcBaseAndBitshift+0x160>)
 800416c:	4013      	ands	r3, r2
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	6593      	str	r3, [r2, #88]	; 0x58
 8004172:	e005      	b.n	8004180 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	40020010 	.word	0x40020010
 8004194:	40020028 	.word	0x40020028
 8004198:	40020040 	.word	0x40020040
 800419c:	40020058 	.word	0x40020058
 80041a0:	40020070 	.word	0x40020070
 80041a4:	40020088 	.word	0x40020088
 80041a8:	400200a0 	.word	0x400200a0
 80041ac:	400200b8 	.word	0x400200b8
 80041b0:	40020410 	.word	0x40020410
 80041b4:	40020428 	.word	0x40020428
 80041b8:	40020440 	.word	0x40020440
 80041bc:	40020458 	.word	0x40020458
 80041c0:	40020470 	.word	0x40020470
 80041c4:	40020488 	.word	0x40020488
 80041c8:	400204a0 	.word	0x400204a0
 80041cc:	400204b8 	.word	0x400204b8
 80041d0:	aaaaaaab 	.word	0xaaaaaaab
 80041d4:	0800b978 	.word	0x0800b978
 80041d8:	fffffc00 	.word	0xfffffc00

080041dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041e4:	2300      	movs	r3, #0
 80041e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d120      	bne.n	8004232 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d858      	bhi.n	80042aa <DMA_CheckFifoParam+0xce>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <DMA_CheckFifoParam+0x24>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004211 	.word	0x08004211
 8004204:	08004223 	.word	0x08004223
 8004208:	08004211 	.word	0x08004211
 800420c:	080042ab 	.word	0x080042ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d048      	beq.n	80042ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004220:	e045      	b.n	80042ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800422a:	d142      	bne.n	80042b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004230:	e03f      	b.n	80042b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423a:	d123      	bne.n	8004284 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004240:	2b03      	cmp	r3, #3
 8004242:	d838      	bhi.n	80042b6 <DMA_CheckFifoParam+0xda>
 8004244:	a201      	add	r2, pc, #4	; (adr r2, 800424c <DMA_CheckFifoParam+0x70>)
 8004246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424a:	bf00      	nop
 800424c:	0800425d 	.word	0x0800425d
 8004250:	08004263 	.word	0x08004263
 8004254:	0800425d 	.word	0x0800425d
 8004258:	08004275 	.word	0x08004275
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
        break;
 8004260:	e030      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d025      	beq.n	80042ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004272:	e022      	b.n	80042ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800427c:	d11f      	bne.n	80042be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004282:	e01c      	b.n	80042be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	2b02      	cmp	r3, #2
 800428a:	d902      	bls.n	8004292 <DMA_CheckFifoParam+0xb6>
 800428c:	2b03      	cmp	r3, #3
 800428e:	d003      	beq.n	8004298 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004290:	e018      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	73fb      	strb	r3, [r7, #15]
        break;
 8004296:	e015      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00e      	beq.n	80042c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	73fb      	strb	r3, [r7, #15]
    break;
 80042a8:	e00b      	b.n	80042c2 <DMA_CheckFifoParam+0xe6>
        break;
 80042aa:	bf00      	nop
 80042ac:	e00a      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        break;
 80042ae:	bf00      	nop
 80042b0:	e008      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        break;
 80042b2:	bf00      	nop
 80042b4:	e006      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        break;
 80042b6:	bf00      	nop
 80042b8:	e004      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e002      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
        break;
 80042be:	bf00      	nop
 80042c0:	e000      	b.n	80042c4 <DMA_CheckFifoParam+0xe8>
    break;
 80042c2:	bf00      	nop
    }
  }

  return status;
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop

080042d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a38      	ldr	r2, [pc, #224]	; (80043c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d022      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a36      	ldr	r2, [pc, #216]	; (80043cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d01d      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a35      	ldr	r2, [pc, #212]	; (80043d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d018      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a33      	ldr	r2, [pc, #204]	; (80043d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d013      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a32      	ldr	r2, [pc, #200]	; (80043d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00e      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a30      	ldr	r2, [pc, #192]	; (80043dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d009      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d004      	beq.n	8004332 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004332:	2301      	movs	r3, #1
 8004334:	e000      	b.n	8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004336:	2300      	movs	r3, #0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d01a      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	3b08      	subs	r3, #8
 8004344:	4a28      	ldr	r2, [pc, #160]	; (80043e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004346:	fba2 2303 	umull	r2, r3, r2, r3
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4b26      	ldr	r3, [pc, #152]	; (80043ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	461a      	mov	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004360:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 031f 	and.w	r3, r3, #31
 8004368:	2201      	movs	r2, #1
 800436a:	409a      	lsls	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004370:	e024      	b.n	80043bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	3b10      	subs	r3, #16
 800437a:	4a1e      	ldr	r2, [pc, #120]	; (80043f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	091b      	lsrs	r3, r3, #4
 8004382:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4a1c      	ldr	r2, [pc, #112]	; (80043f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d806      	bhi.n	800439a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4a1b      	ldr	r2, [pc, #108]	; (80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d902      	bls.n	800439a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3308      	adds	r3, #8
 8004398:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4b18      	ldr	r3, [pc, #96]	; (8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	461a      	mov	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 031f 	and.w	r3, r3, #31
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	58025408 	.word	0x58025408
 80043cc:	5802541c 	.word	0x5802541c
 80043d0:	58025430 	.word	0x58025430
 80043d4:	58025444 	.word	0x58025444
 80043d8:	58025458 	.word	0x58025458
 80043dc:	5802546c 	.word	0x5802546c
 80043e0:	58025480 	.word	0x58025480
 80043e4:	58025494 	.word	0x58025494
 80043e8:	cccccccd 	.word	0xcccccccd
 80043ec:	16009600 	.word	0x16009600
 80043f0:	58025880 	.word	0x58025880
 80043f4:	aaaaaaab 	.word	0xaaaaaaab
 80043f8:	400204b8 	.word	0x400204b8
 80043fc:	4002040f 	.word	0x4002040f
 8004400:	10008200 	.word	0x10008200
 8004404:	40020880 	.word	0x40020880

08004408 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004408:	b480      	push	{r7}
 800440a:	b085      	sub	sp, #20
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d04a      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d847      	bhi.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d022      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d01d      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a22      	ldr	r2, [pc, #136]	; (80044c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d018      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a21      	ldr	r2, [pc, #132]	; (80044cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d013      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d00e      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a1e      	ldr	r2, [pc, #120]	; (80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d009      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d004      	beq.n	8004474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d101      	bne.n	8004478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004478:	2300      	movs	r3, #0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	461a      	mov	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a15      	ldr	r2, [pc, #84]	; (80044e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004490:	671a      	str	r2, [r3, #112]	; 0x70
 8004492:	e009      	b.n	80044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4b14      	ldr	r3, [pc, #80]	; (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a11      	ldr	r2, [pc, #68]	; (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	2201      	movs	r2, #1
 80044ae:	409a      	lsls	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	58025408 	.word	0x58025408
 80044c4:	5802541c 	.word	0x5802541c
 80044c8:	58025430 	.word	0x58025430
 80044cc:	58025444 	.word	0x58025444
 80044d0:	58025458 	.word	0x58025458
 80044d4:	5802546c 	.word	0x5802546c
 80044d8:	58025480 	.word	0x58025480
 80044dc:	58025494 	.word	0x58025494
 80044e0:	1600963f 	.word	0x1600963f
 80044e4:	58025940 	.word	0x58025940
 80044e8:	1000823f 	.word	0x1000823f
 80044ec:	40020940 	.word	0x40020940

080044f0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0cf      	b.n	80046a2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004508:	2b00      	cmp	r3, #0
 800450a:	d106      	bne.n	800451a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2223      	movs	r2, #35	; 0x23
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f7fc fc35 	bl	8000d84 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800451a:	4b64      	ldr	r3, [pc, #400]	; (80046ac <HAL_ETH_Init+0x1bc>)
 800451c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004520:	4a62      	ldr	r2, [pc, #392]	; (80046ac <HAL_ETH_Init+0x1bc>)
 8004522:	f043 0302 	orr.w	r3, r3, #2
 8004526:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800452a:	4b60      	ldr	r3, [pc, #384]	; (80046ac <HAL_ETH_Init+0x1bc>)
 800452c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	60bb      	str	r3, [r7, #8]
 8004536:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7a1b      	ldrb	r3, [r3, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004540:	2000      	movs	r0, #0
 8004542:	f7fd f879 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
 8004546:	e003      	b.n	8004550 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004548:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800454c:	f7fd f874 	bl	8001638 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004550:	4b57      	ldr	r3, [pc, #348]	; (80046b0 <HAL_ETH_Init+0x1c0>)
 8004552:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800456a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800456c:	f7fd f858 	bl	8001620 <HAL_GetTick>
 8004570:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004572:	e011      	b.n	8004598 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004574:	f7fd f854 	bl	8001620 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004582:	d909      	bls.n	8004598 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2204      	movs	r2, #4
 8004588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	22e0      	movs	r2, #224	; 0xe0
 8004590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e084      	b.n	80046a2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1e4      	bne.n	8004574 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f886 	bl	80046bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80045b0:	f001 fcc8 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 80045b4:	4603      	mov	r3, r0
 80045b6:	4a3f      	ldr	r2, [pc, #252]	; (80046b4 <HAL_ETH_Init+0x1c4>)
 80045b8:	fba2 2303 	umull	r2, r3, r2, r3
 80045bc:	0c9a      	lsrs	r2, r3, #18
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3a01      	subs	r2, #1
 80045c4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fa71 	bl	8004ab0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80045da:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	6812      	ldr	r2, [r2, #0]
 80045e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045ea:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	f003 0303 	and.w	r3, r3, #3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	22e0      	movs	r2, #224	; 0xe0
 8004606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e049      	b.n	80046a2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_ETH_Init+0x1c8>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6952      	ldr	r2, [r2, #20]
 8004622:	0051      	lsls	r1, r2, #1
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	430b      	orrs	r3, r1
 800462a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 fad9 	bl	8004bea <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 fb1f 	bl	8004c7c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	3305      	adds	r3, #5
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	021a      	lsls	r2, r3, #8
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	3303      	adds	r3, #3
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	061a      	lsls	r2, r3, #24
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	3302      	adds	r3, #2
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	041b      	lsls	r3, r3, #16
 8004670:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	3301      	adds	r3, #1
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800467c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800468a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800468c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2210      	movs	r2, #16
 800469c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	58024400 	.word	0x58024400
 80046b0:	58000400 	.word	0x58000400
 80046b4:	431bde83 	.word	0x431bde83
 80046b8:	ffff8001 	.word	0xffff8001

080046bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80046cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80046d6:	f001 fc35 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 80046da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a1e      	ldr	r2, [pc, #120]	; (8004758 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d908      	bls.n	80046f6 <HAL_ETH_SetMDIOClockRange+0x3a>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d804      	bhi.n	80046f6 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046f2:	60fb      	str	r3, [r7, #12]
 80046f4:	e027      	b.n	8004746 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_ETH_SetMDIOClockRange+0xa0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d908      	bls.n	8004710 <HAL_ETH_SetMDIOClockRange+0x54>
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4a17      	ldr	r2, [pc, #92]	; (8004760 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d204      	bcs.n	8004710 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e01a      	b.n	8004746 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	4a13      	ldr	r2, [pc, #76]	; (8004760 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d303      	bcc.n	8004720 <HAL_ETH_SetMDIOClockRange+0x64>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	4a12      	ldr	r2, [pc, #72]	; (8004764 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d911      	bls.n	8004744 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4a10      	ldr	r2, [pc, #64]	; (8004764 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d908      	bls.n	800473a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	4a0f      	ldr	r2, [pc, #60]	; (8004768 <HAL_ETH_SetMDIOClockRange+0xac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d804      	bhi.n	800473a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e005      	b.n	8004746 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e000      	b.n	8004746 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004744:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	01312cff 	.word	0x01312cff
 800475c:	02160ebf 	.word	0x02160ebf
 8004760:	03938700 	.word	0x03938700
 8004764:	05f5e0ff 	.word	0x05f5e0ff
 8004768:	08f0d17f 	.word	0x08f0d17f

0800476c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800477e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	791b      	ldrb	r3, [r3, #4]
 8004784:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004786:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	7b1b      	ldrb	r3, [r3, #12]
 800478c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800478e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	7b5b      	ldrb	r3, [r3, #13]
 8004794:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004796:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	7b9b      	ldrb	r3, [r3, #14]
 800479c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800479e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	7bdb      	ldrb	r3, [r3, #15]
 80047a4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80047a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	7c12      	ldrb	r2, [r2, #16]
 80047ac:	2a00      	cmp	r2, #0
 80047ae:	d102      	bne.n	80047b6 <ETH_SetMACConfig+0x4a>
 80047b0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047b4:	e000      	b.n	80047b8 <ETH_SetMACConfig+0x4c>
 80047b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80047b8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80047ba:	683a      	ldr	r2, [r7, #0]
 80047bc:	7c52      	ldrb	r2, [r2, #17]
 80047be:	2a00      	cmp	r2, #0
 80047c0:	d102      	bne.n	80047c8 <ETH_SetMACConfig+0x5c>
 80047c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047c6:	e000      	b.n	80047ca <ETH_SetMACConfig+0x5e>
 80047c8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80047ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	7c9b      	ldrb	r3, [r3, #18]
 80047d0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80047d2:	431a      	orrs	r2, r3
               macconf->Speed |
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80047d8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80047de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	7f1b      	ldrb	r3, [r3, #28]
 80047e4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80047e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	7f5b      	ldrb	r3, [r3, #29]
 80047ec:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80047ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	7f92      	ldrb	r2, [r2, #30]
 80047f4:	2a00      	cmp	r2, #0
 80047f6:	d102      	bne.n	80047fe <ETH_SetMACConfig+0x92>
 80047f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047fc:	e000      	b.n	8004800 <ETH_SetMACConfig+0x94>
 80047fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004800:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	7fdb      	ldrb	r3, [r3, #31]
 8004806:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004808:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800480a:	683a      	ldr	r2, [r7, #0]
 800480c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004810:	2a00      	cmp	r2, #0
 8004812:	d102      	bne.n	800481a <ETH_SetMACConfig+0xae>
 8004814:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004818:	e000      	b.n	800481c <ETH_SetMACConfig+0xb0>
 800481a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800481c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004822:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800482a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800482c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	4b56      	ldr	r3, [pc, #344]	; (8004998 <ETH_SetMACConfig+0x22c>)
 800483e:	4013      	ands	r3, r2
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6812      	ldr	r2, [r2, #0]
 8004844:	68f9      	ldr	r1, [r7, #12]
 8004846:	430b      	orrs	r3, r1
 8004848:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004856:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004858:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004860:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800486a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800486c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004874:	2a00      	cmp	r2, #0
 8004876:	d102      	bne.n	800487e <ETH_SetMACConfig+0x112>
 8004878:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800487c:	e000      	b.n	8004880 <ETH_SetMACConfig+0x114>
 800487e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004880:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685a      	ldr	r2, [r3, #4]
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <ETH_SetMACConfig+0x230>)
 8004892:	4013      	ands	r3, r2
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	68f9      	ldr	r1, [r7, #12]
 800489a:	430b      	orrs	r3, r1
 800489c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048a4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	4b3a      	ldr	r3, [pc, #232]	; (80049a0 <ETH_SetMACConfig+0x234>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6812      	ldr	r2, [r2, #0]
 80048bc:	68f9      	ldr	r1, [r7, #12]
 80048be:	430b      	orrs	r3, r1
 80048c0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80048c8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80048ce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d101      	bne.n	80048de <ETH_SetMACConfig+0x172>
 80048da:	2280      	movs	r2, #128	; 0x80
 80048dc:	e000      	b.n	80048e0 <ETH_SetMACConfig+0x174>
 80048de:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80048e0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048f2:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80048f6:	4013      	ands	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	430b      	orrs	r3, r1
 8004900:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004908:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004910:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004912:	4313      	orrs	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f023 0103 	bic.w	r1, r3, #3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	430a      	orrs	r2, r1
 800492a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004936:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	430a      	orrs	r2, r1
 8004944:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004952:	2a00      	cmp	r2, #0
 8004954:	d101      	bne.n	800495a <ETH_SetMACConfig+0x1ee>
 8004956:	2240      	movs	r2, #64	; 0x40
 8004958:	e000      	b.n	800495c <ETH_SetMACConfig+0x1f0>
 800495a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800495c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004964:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004966:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800496e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004970:	4313      	orrs	r3, r2
 8004972:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800497c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	430a      	orrs	r2, r1
 8004988:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	00048083 	.word	0x00048083
 800499c:	c0f88000 	.word	0xc0f88000
 80049a0:	fffffef0 	.word	0xfffffef0

080049a4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	4b38      	ldr	r3, [pc, #224]	; (8004a9c <ETH_SetDMAConfig+0xf8>)
 80049ba:	4013      	ands	r3, r2
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	6811      	ldr	r1, [r2, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	430b      	orrs	r3, r1
 80049c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049ca:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	791b      	ldrb	r3, [r3, #4]
 80049d0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	7b1b      	ldrb	r3, [r3, #12]
 80049dc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049de:	4313      	orrs	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	4b2c      	ldr	r3, [pc, #176]	; (8004aa0 <ETH_SetDMAConfig+0xfc>)
 80049ee:	4013      	ands	r3, r2
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6812      	ldr	r2, [r2, #0]
 80049f4:	68f9      	ldr	r1, [r7, #12]
 80049f6:	430b      	orrs	r3, r1
 80049f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80049fc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	7b5b      	ldrb	r3, [r3, #13]
 8004a02:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004a18:	4b22      	ldr	r3, [pc, #136]	; (8004aa4 <ETH_SetDMAConfig+0x100>)
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6812      	ldr	r2, [r2, #0]
 8004a20:	68f9      	ldr	r1, [r7, #12]
 8004a22:	430b      	orrs	r3, r1
 8004a24:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a28:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	7d1b      	ldrb	r3, [r3, #20]
 8004a34:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a36:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	7f5b      	ldrb	r3, [r3, #29]
 8004a3c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a4a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <ETH_SetDMAConfig+0x104>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a5e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	7f1b      	ldrb	r3, [r3, #28]
 8004a66:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a78:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004a7c:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <ETH_SetDMAConfig+0x108>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	68f9      	ldr	r1, [r7, #12]
 8004a86:	430b      	orrs	r3, r1
 8004a88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a8c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004a90:	bf00      	nop
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr
 8004a9c:	ffff87fd 	.word	0xffff87fd
 8004aa0:	ffff2ffe 	.word	0xffff2ffe
 8004aa4:	fffec000 	.word	0xfffec000
 8004aa8:	ffc0efef 	.word	0xffc0efef
 8004aac:	7fc0ffff 	.word	0x7fc0ffff

08004ab0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0a4      	sub	sp, #144	; 0x90
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004ada:	2301      	movs	r3, #1
 8004adc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004aec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004af0:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004b08:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004b0c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004b14:	2300      	movs	r3, #0
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004b32:	2300      	movs	r3, #0
 8004b34:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004b36:	2300      	movs	r3, #0
 8004b38:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004b48:	2320      	movs	r3, #32
 8004b4a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004b5a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b64:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b72:	2300      	movs	r3, #0
 8004b74:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff fde6 	bl	800476c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bbe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bc4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bc8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004bd0:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004bd4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bd6:	f107 0308 	add.w	r3, r7, #8
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f7ff fee1 	bl	80049a4 <ETH_SetDMAConfig>
}
 8004be2:	bf00      	nop
 8004be4:	3790      	adds	r7, #144	; 0x90
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
 8004bf6:	e01d      	b.n	8004c34 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	68d9      	ldr	r1, [r3, #12]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	005b      	lsls	r3, r3, #1
 8004c02:	4413      	add	r3, r2
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	440b      	add	r3, r1
 8004c08:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2200      	movs	r2, #0
 8004c14:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	3206      	adds	r2, #6
 8004c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3301      	adds	r3, #1
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2b03      	cmp	r3, #3
 8004c38:	d9de      	bls.n	8004bf8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c48:	461a      	mov	r2, r3
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68da      	ldr	r2, [r3, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	e023      	b.n	8004cd2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6919      	ldr	r1, [r3, #16]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4613      	mov	r3, r2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	4413      	add	r3, r2
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	440b      	add	r3, r1
 8004c9a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	2200      	movs	r2, #0
 8004cac:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004cc0:	68b9      	ldr	r1, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	3212      	adds	r2, #18
 8004cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d9d8      	bls.n	8004c8a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	461a      	mov	r2, r3
 8004d00:	2303      	movs	r3, #3
 8004d02:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004d2a:	bf00      	nop
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
	...

08004d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b089      	sub	sp, #36	; 0x24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d46:	4b86      	ldr	r3, [pc, #536]	; (8004f60 <HAL_GPIO_Init+0x228>)
 8004d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d4a:	e18c      	b.n	8005066 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	2101      	movs	r1, #1
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	4013      	ands	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 817e 	beq.w	8005060 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d005      	beq.n	8004d7c <HAL_GPIO_Init+0x44>
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0303 	and.w	r3, r3, #3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d130      	bne.n	8004dde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	005b      	lsls	r3, r3, #1
 8004d86:	2203      	movs	r2, #3
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	43db      	mvns	r3, r3
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	4013      	ands	r3, r2
 8004d92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004db2:	2201      	movs	r2, #1
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	43db      	mvns	r3, r3
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	091b      	lsrs	r3, r3, #4
 8004dc8:	f003 0201 	and.w	r2, r3, #1
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f003 0303 	and.w	r3, r3, #3
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d017      	beq.n	8004e1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	2203      	movs	r2, #3
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	005b      	lsls	r3, r3, #1
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d123      	bne.n	8004e6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	08da      	lsrs	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3208      	adds	r2, #8
 8004e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	69ba      	ldr	r2, [r7, #24]
 8004e46:	4013      	ands	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	08da      	lsrs	r2, r3, #3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3208      	adds	r2, #8
 8004e68:	69b9      	ldr	r1, [r7, #24]
 8004e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	2203      	movs	r2, #3
 8004e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7e:	43db      	mvns	r3, r3
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	4013      	ands	r3, r2
 8004e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f003 0203 	and.w	r2, r3, #3
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 80d8 	beq.w	8005060 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eb0:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_GPIO_Init+0x22c>)
 8004eb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004eb6:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <HAL_GPIO_Init+0x22c>)
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ec0:	4b28      	ldr	r3, [pc, #160]	; (8004f64 <HAL_GPIO_Init+0x22c>)
 8004ec2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ece:	4a26      	ldr	r2, [pc, #152]	; (8004f68 <HAL_GPIO_Init+0x230>)
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	089b      	lsrs	r3, r3, #2
 8004ed4:	3302      	adds	r3, #2
 8004ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	f003 0303 	and.w	r3, r3, #3
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	220f      	movs	r2, #15
 8004ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eea:	43db      	mvns	r3, r3
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	4013      	ands	r3, r2
 8004ef0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_GPIO_Init+0x234>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d04a      	beq.n	8004f90 <HAL_GPIO_Init+0x258>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a1c      	ldr	r2, [pc, #112]	; (8004f70 <HAL_GPIO_Init+0x238>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d02b      	beq.n	8004f5a <HAL_GPIO_Init+0x222>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a1b      	ldr	r2, [pc, #108]	; (8004f74 <HAL_GPIO_Init+0x23c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d025      	beq.n	8004f56 <HAL_GPIO_Init+0x21e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a1a      	ldr	r2, [pc, #104]	; (8004f78 <HAL_GPIO_Init+0x240>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01f      	beq.n	8004f52 <HAL_GPIO_Init+0x21a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a19      	ldr	r2, [pc, #100]	; (8004f7c <HAL_GPIO_Init+0x244>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d019      	beq.n	8004f4e <HAL_GPIO_Init+0x216>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_GPIO_Init+0x248>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d013      	beq.n	8004f4a <HAL_GPIO_Init+0x212>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a17      	ldr	r2, [pc, #92]	; (8004f84 <HAL_GPIO_Init+0x24c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d00d      	beq.n	8004f46 <HAL_GPIO_Init+0x20e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a16      	ldr	r2, [pc, #88]	; (8004f88 <HAL_GPIO_Init+0x250>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d007      	beq.n	8004f42 <HAL_GPIO_Init+0x20a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a15      	ldr	r2, [pc, #84]	; (8004f8c <HAL_GPIO_Init+0x254>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <HAL_GPIO_Init+0x206>
 8004f3a:	2309      	movs	r3, #9
 8004f3c:	e029      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e027      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f42:	2307      	movs	r3, #7
 8004f44:	e025      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f46:	2306      	movs	r3, #6
 8004f48:	e023      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f4a:	2305      	movs	r3, #5
 8004f4c:	e021      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f4e:	2304      	movs	r3, #4
 8004f50:	e01f      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f52:	2303      	movs	r3, #3
 8004f54:	e01d      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e01b      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e019      	b.n	8004f92 <HAL_GPIO_Init+0x25a>
 8004f5e:	bf00      	nop
 8004f60:	58000080 	.word	0x58000080
 8004f64:	58024400 	.word	0x58024400
 8004f68:	58000400 	.word	0x58000400
 8004f6c:	58020000 	.word	0x58020000
 8004f70:	58020400 	.word	0x58020400
 8004f74:	58020800 	.word	0x58020800
 8004f78:	58020c00 	.word	0x58020c00
 8004f7c:	58021000 	.word	0x58021000
 8004f80:	58021400 	.word	0x58021400
 8004f84:	58021800 	.word	0x58021800
 8004f88:	58021c00 	.word	0x58021c00
 8004f8c:	58022400 	.word	0x58022400
 8004f90:	2300      	movs	r3, #0
 8004f92:	69fa      	ldr	r2, [r7, #28]
 8004f94:	f002 0203 	and.w	r2, r2, #3
 8004f98:	0092      	lsls	r2, r2, #2
 8004f9a:	4093      	lsls	r3, r2
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fa2:	4938      	ldr	r1, [pc, #224]	; (8005084 <HAL_GPIO_Init+0x34c>)
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	089b      	lsrs	r3, r3, #2
 8004fa8:	3302      	adds	r3, #2
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	43db      	mvns	r3, r3
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d003      	beq.n	8004fd6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	43db      	mvns	r3, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	4013      	ands	r3, r2
 8004fee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005004:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	43db      	mvns	r3, r3
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	4013      	ands	r3, r2
 8005044:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	2b00      	cmp	r3, #0
 8005072:	f47f ae6b 	bne.w	8004d4c <HAL_GPIO_Init+0x14>
  }
}
 8005076:	bf00      	nop
 8005078:	bf00      	nop
 800507a:	3724      	adds	r7, #36	; 0x24
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	58000400 	.word	0x58000400

08005088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	460b      	mov	r3, r1
 8005092:	807b      	strh	r3, [r7, #2]
 8005094:	4613      	mov	r3, r2
 8005096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005098:	787b      	ldrb	r3, [r7, #1]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800509e:	887a      	ldrh	r2, [r7, #2]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80050a4:	e003      	b.n	80050ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050a6:	887b      	ldrh	r3, [r7, #2]
 80050a8:	041a      	lsls	r2, r3, #16
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	619a      	str	r2, [r3, #24]
}
 80050ae:	bf00      	nop
 80050b0:	370c      	adds	r7, #12
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
	...

080050bc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80050c4:	4b19      	ldr	r3, [pc, #100]	; (800512c <HAL_PWREx_ConfigSupply+0x70>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b04      	cmp	r3, #4
 80050ce:	d00a      	beq.n	80050e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80050d0:	4b16      	ldr	r3, [pc, #88]	; (800512c <HAL_PWREx_ConfigSupply+0x70>)
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d001      	beq.n	80050e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e01f      	b.n	8005122 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e01d      	b.n	8005122 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80050e6:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_PWREx_ConfigSupply+0x70>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 0207 	bic.w	r2, r3, #7
 80050ee:	490f      	ldr	r1, [pc, #60]	; (800512c <HAL_PWREx_ConfigSupply+0x70>)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80050f6:	f7fc fa93 	bl	8001620 <HAL_GetTick>
 80050fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80050fc:	e009      	b.n	8005112 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80050fe:	f7fc fa8f 	bl	8001620 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510c:	d901      	bls.n	8005112 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e007      	b.n	8005122 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_PWREx_ConfigSupply+0x70>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800511a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511e:	d1ee      	bne.n	80050fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	58024800 	.word	0x58024800

08005130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e3c8      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 8087 	beq.w	800525e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005150:	4b88      	ldr	r3, [pc, #544]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005158:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800515a:	4b86      	ldr	r3, [pc, #536]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005162:	2b10      	cmp	r3, #16
 8005164:	d007      	beq.n	8005176 <HAL_RCC_OscConfig+0x46>
 8005166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005168:	2b18      	cmp	r3, #24
 800516a:	d110      	bne.n	800518e <HAL_RCC_OscConfig+0x5e>
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d10b      	bne.n	800518e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005176:	4b7f      	ldr	r3, [pc, #508]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d06c      	beq.n	800525c <HAL_RCC_OscConfig+0x12c>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d168      	bne.n	800525c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e3a2      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005196:	d106      	bne.n	80051a6 <HAL_RCC_OscConfig+0x76>
 8005198:	4b76      	ldr	r3, [pc, #472]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a75      	ldr	r2, [pc, #468]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800519e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a2:	6013      	str	r3, [r2, #0]
 80051a4:	e02e      	b.n	8005204 <HAL_RCC_OscConfig+0xd4>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10c      	bne.n	80051c8 <HAL_RCC_OscConfig+0x98>
 80051ae:	4b71      	ldr	r3, [pc, #452]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a70      	ldr	r2, [pc, #448]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b8:	6013      	str	r3, [r2, #0]
 80051ba:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a6d      	ldr	r2, [pc, #436]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e01d      	b.n	8005204 <HAL_RCC_OscConfig+0xd4>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0xbc>
 80051d2:	4b68      	ldr	r3, [pc, #416]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a67      	ldr	r2, [pc, #412]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b65      	ldr	r3, [pc, #404]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a64      	ldr	r2, [pc, #400]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0xd4>
 80051ec:	4b61      	ldr	r3, [pc, #388]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a60      	ldr	r2, [pc, #384]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b5e      	ldr	r3, [pc, #376]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a5d      	ldr	r2, [pc, #372]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800520c:	f7fc fa08 	bl	8001620 <HAL_GetTick>
 8005210:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fc fa04 	bl	8001620 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	; 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e356      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005226:	4b53      	ldr	r3, [pc, #332]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0xe4>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fc f9f4 	bl	8001620 <HAL_GetTick>
 8005238:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fc f9f0 	bl	8001620 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e342      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800524e:	4b49      	ldr	r3, [pc, #292]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x10c>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	f000 808c 	beq.w	8005384 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526c:	4b41      	ldr	r3, [pc, #260]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800526e:	691b      	ldr	r3, [r3, #16]
 8005270:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005274:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005276:	4b3f      	ldr	r3, [pc, #252]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_RCC_OscConfig+0x162>
 8005282:	6a3b      	ldr	r3, [r7, #32]
 8005284:	2b18      	cmp	r3, #24
 8005286:	d137      	bne.n	80052f8 <HAL_RCC_OscConfig+0x1c8>
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d132      	bne.n	80052f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d005      	beq.n	80052aa <HAL_RCC_OscConfig+0x17a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e314      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052aa:	4b32      	ldr	r3, [pc, #200]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 0219 	bic.w	r2, r3, #25
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	492f      	ldr	r1, [pc, #188]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fc f9b0 	bl	8001620 <HAL_GetTick>
 80052c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052c4:	f7fc f9ac 	bl	8001620 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e2fe      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80052d6:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052e2:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	4920      	ldr	r1, [pc, #128]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052f6:	e045      	b.n	8005384 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d026      	beq.n	800534e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005300:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f023 0219 	bic.w	r2, r3, #25
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	4919      	ldr	r1, [pc, #100]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800530e:	4313      	orrs	r3, r2
 8005310:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005312:	f7fc f985 	bl	8001620 <HAL_GetTick>
 8005316:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800531a:	f7fc f981 	bl	8001620 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e2d3      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800532c:	4b11      	ldr	r3, [pc, #68]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	061b      	lsls	r3, r3, #24
 8005346:	490b      	ldr	r1, [pc, #44]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005348:	4313      	orrs	r3, r2
 800534a:	604b      	str	r3, [r1, #4]
 800534c:	e01a      	b.n	8005384 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800534e:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a08      	ldr	r2, [pc, #32]	; (8005374 <HAL_RCC_OscConfig+0x244>)
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535a:	f7fc f961 	bl	8001620 <HAL_GetTick>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005360:	e00a      	b.n	8005378 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005362:	f7fc f95d 	bl	8001620 <HAL_GetTick>
 8005366:	4602      	mov	r2, r0
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	1ad3      	subs	r3, r2, r3
 800536c:	2b02      	cmp	r3, #2
 800536e:	d903      	bls.n	8005378 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005370:	2303      	movs	r3, #3
 8005372:	e2af      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
 8005374:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005378:	4b96      	ldr	r3, [pc, #600]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b00      	cmp	r3, #0
 8005382:	d1ee      	bne.n	8005362 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b00      	cmp	r3, #0
 800538e:	d06a      	beq.n	8005466 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005390:	4b90      	ldr	r3, [pc, #576]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005398:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800539a:	4b8e      	ldr	r3, [pc, #568]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d007      	beq.n	80053b6 <HAL_RCC_OscConfig+0x286>
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b18      	cmp	r3, #24
 80053aa:	d11b      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2b4>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d116      	bne.n	80053e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053b6:	4b87      	ldr	r3, [pc, #540]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_RCC_OscConfig+0x29e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	2b80      	cmp	r3, #128	; 0x80
 80053c8:	d001      	beq.n	80053ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e282      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053ce:	4b81      	ldr	r3, [pc, #516]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	061b      	lsls	r3, r3, #24
 80053dc:	497d      	ldr	r1, [pc, #500]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053e2:	e040      	b.n	8005466 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d023      	beq.n	8005434 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053ec:	4b79      	ldr	r3, [pc, #484]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a78      	ldr	r2, [pc, #480]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80053f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f8:	f7fc f912 	bl	8001620 <HAL_GetTick>
 80053fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005400:	f7fc f90e 	bl	8001620 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e260      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005412:	4b70      	ldr	r3, [pc, #448]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800541e:	4b6d      	ldr	r3, [pc, #436]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	061b      	lsls	r3, r3, #24
 800542c:	4969      	ldr	r1, [pc, #420]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800542e:	4313      	orrs	r3, r2
 8005430:	60cb      	str	r3, [r1, #12]
 8005432:	e018      	b.n	8005466 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005434:	4b67      	ldr	r3, [pc, #412]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a66      	ldr	r2, [pc, #408]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800543a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc f8ee 	bl	8001620 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005448:	f7fc f8ea 	bl	8001620 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e23c      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800545a:	4b5e      	ldr	r3, [pc, #376]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d036      	beq.n	80054e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d019      	beq.n	80054ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800547a:	4b56      	ldr	r3, [pc, #344]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800547c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800547e:	4a55      	ldr	r2, [pc, #340]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005480:	f043 0301 	orr.w	r3, r3, #1
 8005484:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fc f8cb 	bl	8001620 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800548e:	f7fc f8c7 	bl	8001620 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e219      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054a0:	4b4c      	ldr	r3, [pc, #304]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d0f0      	beq.n	800548e <HAL_RCC_OscConfig+0x35e>
 80054ac:	e018      	b.n	80054e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ae:	4b49      	ldr	r3, [pc, #292]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b2:	4a48      	ldr	r2, [pc, #288]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054b4:	f023 0301 	bic.w	r3, r3, #1
 80054b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ba:	f7fc f8b1 	bl	8001620 <HAL_GetTick>
 80054be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054c2:	f7fc f8ad 	bl	8001620 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e1ff      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054d4:	4b3f      	ldr	r3, [pc, #252]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0320 	and.w	r3, r3, #32
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d036      	beq.n	800555a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a36      	ldr	r2, [pc, #216]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80054fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80054fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005500:	f7fc f88e 	bl	8001620 <HAL_GetTick>
 8005504:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005508:	f7fc f88a 	bl	8001620 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1dc      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800551a:	4b2e      	ldr	r3, [pc, #184]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x3d8>
 8005526:	e018      	b.n	800555a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005528:	4b2a      	ldr	r3, [pc, #168]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a29      	ldr	r2, [pc, #164]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 800552e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005532:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005534:	f7fc f874 	bl	8001620 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800553c:	f7fc f870 	bl	8001620 <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e1c2      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800554e:	4b21      	ldr	r3, [pc, #132]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1f0      	bne.n	800553c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0304 	and.w	r3, r3, #4
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 8086 	beq.w	8005674 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <HAL_RCC_OscConfig+0x4a8>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a1a      	ldr	r2, [pc, #104]	; (80055d8 <HAL_RCC_OscConfig+0x4a8>)
 800556e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005572:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005574:	f7fc f854 	bl	8001620 <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fc f850 	bl	8001620 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b64      	cmp	r3, #100	; 0x64
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e1a2      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800558e:	4b12      	ldr	r3, [pc, #72]	; (80055d8 <HAL_RCC_OscConfig+0x4a8>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005596:	2b00      	cmp	r3, #0
 8005598:	d0f0      	beq.n	800557c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d106      	bne.n	80055b0 <HAL_RCC_OscConfig+0x480>
 80055a2:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a0b      	ldr	r2, [pc, #44]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055a8:	f043 0301 	orr.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	e032      	b.n	8005616 <HAL_RCC_OscConfig+0x4e6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d111      	bne.n	80055dc <HAL_RCC_OscConfig+0x4ac>
 80055b8:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055bc:	4a05      	ldr	r2, [pc, #20]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055be:	f023 0301 	bic.w	r3, r3, #1
 80055c2:	6713      	str	r3, [r2, #112]	; 0x70
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	4a02      	ldr	r2, [pc, #8]	; (80055d4 <HAL_RCC_OscConfig+0x4a4>)
 80055ca:	f023 0304 	bic.w	r3, r3, #4
 80055ce:	6713      	str	r3, [r2, #112]	; 0x70
 80055d0:	e021      	b.n	8005616 <HAL_RCC_OscConfig+0x4e6>
 80055d2:	bf00      	nop
 80055d4:	58024400 	.word	0x58024400
 80055d8:	58024800 	.word	0x58024800
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	2b05      	cmp	r3, #5
 80055e2:	d10c      	bne.n	80055fe <HAL_RCC_OscConfig+0x4ce>
 80055e4:	4b83      	ldr	r3, [pc, #524]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	4a82      	ldr	r2, [pc, #520]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80055ea:	f043 0304 	orr.w	r3, r3, #4
 80055ee:	6713      	str	r3, [r2, #112]	; 0x70
 80055f0:	4b80      	ldr	r3, [pc, #512]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80055f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f4:	4a7f      	ldr	r2, [pc, #508]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80055f6:	f043 0301 	orr.w	r3, r3, #1
 80055fa:	6713      	str	r3, [r2, #112]	; 0x70
 80055fc:	e00b      	b.n	8005616 <HAL_RCC_OscConfig+0x4e6>
 80055fe:	4b7d      	ldr	r3, [pc, #500]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	4a7c      	ldr	r2, [pc, #496]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	6713      	str	r3, [r2, #112]	; 0x70
 800560a:	4b7a      	ldr	r3, [pc, #488]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800560c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560e:	4a79      	ldr	r2, [pc, #484]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005610:	f023 0304 	bic.w	r3, r3, #4
 8005614:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d015      	beq.n	800564a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561e:	f7fb ffff 	bl	8001620 <HAL_GetTick>
 8005622:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005624:	e00a      	b.n	800563c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005626:	f7fb fffb 	bl	8001620 <HAL_GetTick>
 800562a:	4602      	mov	r2, r0
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f241 3288 	movw	r2, #5000	; 0x1388
 8005634:	4293      	cmp	r3, r2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e14b      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800563c:	4b6d      	ldr	r3, [pc, #436]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ee      	beq.n	8005626 <HAL_RCC_OscConfig+0x4f6>
 8005648:	e014      	b.n	8005674 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fb ffe9 	bl	8001620 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fb ffe5 	bl	8001620 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e135      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005668:	4b62      	ldr	r3, [pc, #392]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ee      	bne.n	8005652 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 812a 	beq.w	80058d2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800567e:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005686:	2b18      	cmp	r3, #24
 8005688:	f000 80ba 	beq.w	8005800 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005690:	2b02      	cmp	r3, #2
 8005692:	f040 8095 	bne.w	80057c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005696:	4b57      	ldr	r3, [pc, #348]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a56      	ldr	r2, [pc, #344]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800569c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a2:	f7fb ffbd 	bl	8001620 <HAL_GetTick>
 80056a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056a8:	e008      	b.n	80056bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056aa:	f7fb ffb9 	bl	8001620 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e10b      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056bc:	4b4d      	ldr	r3, [pc, #308]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1f0      	bne.n	80056aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c8:	4b4a      	ldr	r3, [pc, #296]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80056ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056cc:	4b4a      	ldr	r3, [pc, #296]	; (80057f8 <HAL_RCC_OscConfig+0x6c8>)
 80056ce:	4013      	ands	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80056d8:	0112      	lsls	r2, r2, #4
 80056da:	430a      	orrs	r2, r1
 80056dc:	4945      	ldr	r1, [pc, #276]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	628b      	str	r3, [r1, #40]	; 0x28
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	3b01      	subs	r3, #1
 80056e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f0:	3b01      	subs	r3, #1
 80056f2:	025b      	lsls	r3, r3, #9
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	431a      	orrs	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fc:	3b01      	subs	r3, #1
 80056fe:	041b      	lsls	r3, r3, #16
 8005700:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	3b01      	subs	r3, #1
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005712:	4938      	ldr	r1, [pc, #224]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005714:	4313      	orrs	r3, r2
 8005716:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	4a35      	ldr	r2, [pc, #212]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800571e:	f023 0301 	bic.w	r3, r3, #1
 8005722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005724:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005728:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCC_OscConfig+0x6cc>)
 800572a:	4013      	ands	r3, r2
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005730:	00d2      	lsls	r2, r2, #3
 8005732:	4930      	ldr	r1, [pc, #192]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005734:	4313      	orrs	r3, r2
 8005736:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005738:	4b2e      	ldr	r3, [pc, #184]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	f023 020c 	bic.w	r2, r3, #12
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005744:	492b      	ldr	r1, [pc, #172]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005746:	4313      	orrs	r3, r2
 8005748:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800574a:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800574c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574e:	f023 0202 	bic.w	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	4927      	ldr	r1, [pc, #156]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005758:	4313      	orrs	r3, r2
 800575a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800575c:	4b25      	ldr	r3, [pc, #148]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	4a24      	ldr	r2, [pc, #144]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005766:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005768:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	4a21      	ldr	r2, [pc, #132]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800576e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005772:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005774:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	4a1e      	ldr	r2, [pc, #120]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800577a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800577e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005780:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005786:	f043 0301 	orr.w	r3, r3, #1
 800578a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fb ff42 	bl	8001620 <HAL_GetTick>
 800579c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fb ff3e 	bl	8001620 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e090      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x670>
 80057be:	e088      	b.n	80058d2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fb ff28 	bl	8001620 <HAL_GetTick>
 80057d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fb ff24 	bl	8001620 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e076      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_OscConfig+0x6c4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x6a4>
 80057f2:	e06e      	b.n	80058d2 <HAL_RCC_OscConfig+0x7a2>
 80057f4:	58024400 	.word	0x58024400
 80057f8:	fffffc0c 	.word	0xfffffc0c
 80057fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 8005802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005804:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005806:	4b35      	ldr	r3, [pc, #212]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	2b01      	cmp	r3, #1
 8005812:	d031      	beq.n	8005878 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f003 0203 	and.w	r2, r3, #3
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d12a      	bne.n	8005878 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d122      	bne.n	8005878 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d11a      	bne.n	8005878 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	0a5b      	lsrs	r3, r3, #9
 8005846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005850:	429a      	cmp	r2, r3
 8005852:	d111      	bne.n	8005878 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0c1b      	lsrs	r3, r3, #16
 8005858:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005860:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005862:	429a      	cmp	r2, r3
 8005864:	d108      	bne.n	8005878 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	0e1b      	lsrs	r3, r3, #24
 800586a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e02b      	b.n	80058d4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800587c:	4b17      	ldr	r3, [pc, #92]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 800587e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005880:	08db      	lsrs	r3, r3, #3
 8005882:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005886:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800588c:	693a      	ldr	r2, [r7, #16]
 800588e:	429a      	cmp	r2, r3
 8005890:	d01f      	beq.n	80058d2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005892:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	4a11      	ldr	r2, [pc, #68]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 8005898:	f023 0301 	bic.w	r3, r3, #1
 800589c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800589e:	f7fb febf 	bl	8001620 <HAL_GetTick>
 80058a2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058a4:	bf00      	nop
 80058a6:	f7fb febb 	bl	8001620 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d0f9      	beq.n	80058a6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058b2:	4b0a      	ldr	r3, [pc, #40]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 80058b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b6:	4b0a      	ldr	r3, [pc, #40]	; (80058e0 <HAL_RCC_OscConfig+0x7b0>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058be:	00d2      	lsls	r2, r2, #3
 80058c0:	4906      	ldr	r1, [pc, #24]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 80058c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ca:	4a04      	ldr	r2, [pc, #16]	; (80058dc <HAL_RCC_OscConfig+0x7ac>)
 80058cc:	f043 0301 	orr.w	r3, r3, #1
 80058d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3730      	adds	r7, #48	; 0x30
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	58024400 	.word	0x58024400
 80058e0:	ffff0007 	.word	0xffff0007

080058e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e19c      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058f8:	4b8a      	ldr	r3, [pc, #552]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	429a      	cmp	r2, r3
 8005904:	d910      	bls.n	8005928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005906:	4b87      	ldr	r3, [pc, #540]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f023 020f 	bic.w	r2, r3, #15
 800590e:	4985      	ldr	r1, [pc, #532]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	4313      	orrs	r3, r2
 8005914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005916:	4b83      	ldr	r3, [pc, #524]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d001      	beq.n	8005928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e184      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d010      	beq.n	8005956 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	4b7b      	ldr	r3, [pc, #492]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005940:	429a      	cmp	r2, r3
 8005942:	d908      	bls.n	8005956 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005944:	4b78      	ldr	r3, [pc, #480]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005946:	699b      	ldr	r3, [r3, #24]
 8005948:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	4975      	ldr	r1, [pc, #468]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005952:	4313      	orrs	r3, r2
 8005954:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0308 	and.w	r3, r3, #8
 800595e:	2b00      	cmp	r3, #0
 8005960:	d010      	beq.n	8005984 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695a      	ldr	r2, [r3, #20]
 8005966:	4b70      	ldr	r3, [pc, #448]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800596e:	429a      	cmp	r2, r3
 8005970:	d908      	bls.n	8005984 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005972:	4b6d      	ldr	r3, [pc, #436]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	496a      	ldr	r1, [pc, #424]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005980:	4313      	orrs	r3, r2
 8005982:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0310 	and.w	r3, r3, #16
 800598c:	2b00      	cmp	r3, #0
 800598e:	d010      	beq.n	80059b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800599c:	429a      	cmp	r2, r3
 800599e:	d908      	bls.n	80059b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059a0:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059a2:	69db      	ldr	r3, [r3, #28]
 80059a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
 80059ac:	495e      	ldr	r1, [pc, #376]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d010      	beq.n	80059e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	4b59      	ldr	r3, [pc, #356]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d908      	bls.n	80059e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80059ce:	4b56      	ldr	r3, [pc, #344]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	4953      	ldr	r1, [pc, #332]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d010      	beq.n	8005a0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	68da      	ldr	r2, [r3, #12]
 80059f0:	4b4d      	ldr	r3, [pc, #308]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	f003 030f 	and.w	r3, r3, #15
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d908      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059fc:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	f023 020f 	bic.w	r2, r3, #15
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	4947      	ldr	r1, [pc, #284]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d055      	beq.n	8005ac6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a1a:	4b43      	ldr	r3, [pc, #268]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	4940      	ldr	r1, [pc, #256]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d107      	bne.n	8005a44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a34:	4b3c      	ldr	r3, [pc, #240]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d121      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e0f6      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d107      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a4c:	4b36      	ldr	r3, [pc, #216]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d115      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0ea      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d107      	bne.n	8005a74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a64:	4b30      	ldr	r3, [pc, #192]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0de      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a74:	4b2c      	ldr	r3, [pc, #176]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0304 	and.w	r3, r3, #4
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0d6      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a84:	4b28      	ldr	r3, [pc, #160]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	f023 0207 	bic.w	r2, r3, #7
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	4925      	ldr	r1, [pc, #148]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a96:	f7fb fdc3 	bl	8001620 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9e:	f7fb fdbf 	bl	8001620 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e0be      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab4:	4b1c      	ldr	r3, [pc, #112]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	00db      	lsls	r3, r3, #3
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d1eb      	bne.n	8005a9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0302 	and.w	r3, r3, #2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d010      	beq.n	8005af4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	4b14      	ldr	r3, [pc, #80]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f003 030f 	and.w	r3, r3, #15
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d208      	bcs.n	8005af4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	f023 020f 	bic.w	r2, r3, #15
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	490e      	ldr	r1, [pc, #56]	; (8005b28 <HAL_RCC_ClockConfig+0x244>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005af4:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 030f 	and.w	r3, r3, #15
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d214      	bcs.n	8005b2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b02:	4b08      	ldr	r3, [pc, #32]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f023 020f 	bic.w	r2, r3, #15
 8005b0a:	4906      	ldr	r1, [pc, #24]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b12:	4b04      	ldr	r3, [pc, #16]	; (8005b24 <HAL_RCC_ClockConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 030f 	and.w	r3, r3, #15
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d005      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e086      	b.n	8005c32 <HAL_RCC_ClockConfig+0x34e>
 8005b24:	52002000 	.word	0x52002000
 8005b28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0304 	and.w	r3, r3, #4
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	4b3f      	ldr	r3, [pc, #252]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d208      	bcs.n	8005b5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b48:	4b3c      	ldr	r3, [pc, #240]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4939      	ldr	r1, [pc, #228]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d010      	beq.n	8005b88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d208      	bcs.n	8005b88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b76:	4b31      	ldr	r3, [pc, #196]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	492e      	ldr	r1, [pc, #184]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d010      	beq.n	8005bb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	699a      	ldr	r2, [r3, #24]
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d208      	bcs.n	8005bb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ba4:	4b25      	ldr	r3, [pc, #148]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005ba6:	69db      	ldr	r3, [r3, #28]
 8005ba8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	4922      	ldr	r1, [pc, #136]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d010      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	4b1d      	ldr	r3, [pc, #116]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d208      	bcs.n	8005be4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005bd2:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	4917      	ldr	r1, [pc, #92]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005be0:	4313      	orrs	r3, r2
 8005be2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005be4:	f000 f834 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8005be8:	4602      	mov	r2, r0
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	0a1b      	lsrs	r3, r3, #8
 8005bf0:	f003 030f 	and.w	r3, r3, #15
 8005bf4:	4912      	ldr	r1, [pc, #72]	; (8005c40 <HAL_RCC_ClockConfig+0x35c>)
 8005bf6:	5ccb      	ldrb	r3, [r1, r3]
 8005bf8:	f003 031f 	and.w	r3, r3, #31
 8005bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005c00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c02:	4b0e      	ldr	r3, [pc, #56]	; (8005c3c <HAL_RCC_ClockConfig+0x358>)
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f003 030f 	and.w	r3, r3, #15
 8005c0a:	4a0d      	ldr	r2, [pc, #52]	; (8005c40 <HAL_RCC_ClockConfig+0x35c>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	fa22 f303 	lsr.w	r3, r2, r3
 8005c18:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <HAL_RCC_ClockConfig+0x360>)
 8005c1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c1c:	4a0a      	ldr	r2, [pc, #40]	; (8005c48 <HAL_RCC_ClockConfig+0x364>)
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <HAL_RCC_ClockConfig+0x368>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fb fcb0 	bl	800158c <HAL_InitTick>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	0800b968 	.word	0x0800b968
 8005c44:	24000004 	.word	0x24000004
 8005c48:	24000000 	.word	0x24000000
 8005c4c:	24000008 	.word	0x24000008

08005c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c56:	4bb3      	ldr	r3, [pc, #716]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c5e:	2b18      	cmp	r3, #24
 8005c60:	f200 8155 	bhi.w	8005f0e <HAL_RCC_GetSysClockFreq+0x2be>
 8005c64:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005cd1 	.word	0x08005cd1
 8005c70:	08005f0f 	.word	0x08005f0f
 8005c74:	08005f0f 	.word	0x08005f0f
 8005c78:	08005f0f 	.word	0x08005f0f
 8005c7c:	08005f0f 	.word	0x08005f0f
 8005c80:	08005f0f 	.word	0x08005f0f
 8005c84:	08005f0f 	.word	0x08005f0f
 8005c88:	08005f0f 	.word	0x08005f0f
 8005c8c:	08005cf7 	.word	0x08005cf7
 8005c90:	08005f0f 	.word	0x08005f0f
 8005c94:	08005f0f 	.word	0x08005f0f
 8005c98:	08005f0f 	.word	0x08005f0f
 8005c9c:	08005f0f 	.word	0x08005f0f
 8005ca0:	08005f0f 	.word	0x08005f0f
 8005ca4:	08005f0f 	.word	0x08005f0f
 8005ca8:	08005f0f 	.word	0x08005f0f
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005f0f 	.word	0x08005f0f
 8005cb4:	08005f0f 	.word	0x08005f0f
 8005cb8:	08005f0f 	.word	0x08005f0f
 8005cbc:	08005f0f 	.word	0x08005f0f
 8005cc0:	08005f0f 	.word	0x08005f0f
 8005cc4:	08005f0f 	.word	0x08005f0f
 8005cc8:	08005f0f 	.word	0x08005f0f
 8005ccc:	08005d03 	.word	0x08005d03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cd0:	4b94      	ldr	r3, [pc, #592]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cdc:	4b91      	ldr	r3, [pc, #580]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	08db      	lsrs	r3, r3, #3
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	4a90      	ldr	r2, [pc, #576]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8005cec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005cee:	e111      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cf0:	4b8d      	ldr	r3, [pc, #564]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005cf2:	61bb      	str	r3, [r7, #24]
      break;
 8005cf4:	e10e      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005cf6:	4b8d      	ldr	r3, [pc, #564]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005cf8:	61bb      	str	r3, [r7, #24]
      break;
 8005cfa:	e10b      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005cfc:	4b8c      	ldr	r3, [pc, #560]	; (8005f30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005cfe:	61bb      	str	r3, [r7, #24]
      break;
 8005d00:	e108      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d02:	4b88      	ldr	r3, [pc, #544]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d0c:	4b85      	ldr	r3, [pc, #532]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	091b      	lsrs	r3, r3, #4
 8005d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d18:	4b82      	ldr	r3, [pc, #520]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d22:	4b80      	ldr	r3, [pc, #512]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d26:	08db      	lsrs	r3, r3, #3
 8005d28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	fb02 f303 	mul.w	r3, r2, r3
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80e1 	beq.w	8005f08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	f000 8083 	beq.w	8005e54 <HAL_RCC_GetSysClockFreq+0x204>
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	f200 80a1 	bhi.w	8005e98 <HAL_RCC_GetSysClockFreq+0x248>
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d003      	beq.n	8005d64 <HAL_RCC_GetSysClockFreq+0x114>
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d056      	beq.n	8005e10 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d62:	e099      	b.n	8005e98 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d64:	4b6f      	ldr	r3, [pc, #444]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 0320 	and.w	r3, r3, #32
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d02d      	beq.n	8005dcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d70:	4b6c      	ldr	r3, [pc, #432]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	08db      	lsrs	r3, r3, #3
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	4a6b      	ldr	r2, [pc, #428]	; (8005f28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d9a:	4b62      	ldr	r3, [pc, #392]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005daa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005dca:	e087      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f38 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dde:	4b51      	ldr	r3, [pc, #324]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dee:	ed97 6a02 	vldr	s12, [r7, #8]
 8005df2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e0e:	e065      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e22:	4b40      	ldr	r3, [pc, #256]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e32:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e36:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e52:	e043      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	ee07 3a90 	vmov	s15, r3
 8005e5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e66:	4b2f      	ldr	r3, [pc, #188]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6e:	ee07 3a90 	vmov	s15, r3
 8005e72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e7a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e96:	e021      	b.n	8005edc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f3c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eaa:	4b1e      	ldr	r3, [pc, #120]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb2:	ee07 3a90 	vmov	s15, r3
 8005eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eba:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ebe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f34 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005eda:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005edc:	4b11      	ldr	r3, [pc, #68]	; (8005f24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee0:	0a5b      	lsrs	r3, r3, #9
 8005ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	ee07 3a90 	vmov	s15, r3
 8005ef0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ef4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f00:	ee17 3a90 	vmov	r3, s15
 8005f04:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f06:	e005      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61bb      	str	r3, [r7, #24]
      break;
 8005f0c:	e002      	b.n	8005f14 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f10:	61bb      	str	r3, [r7, #24]
      break;
 8005f12:	bf00      	nop
  }

  return sysclockfreq;
 8005f14:	69bb      	ldr	r3, [r7, #24]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3724      	adds	r7, #36	; 0x24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop
 8005f24:	58024400 	.word	0x58024400
 8005f28:	03d09000 	.word	0x03d09000
 8005f2c:	003d0900 	.word	0x003d0900
 8005f30:	007a1200 	.word	0x007a1200
 8005f34:	46000000 	.word	0x46000000
 8005f38:	4c742400 	.word	0x4c742400
 8005f3c:	4a742400 	.word	0x4a742400
 8005f40:	4af42400 	.word	0x4af42400

08005f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b082      	sub	sp, #8
 8005f48:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f4a:	f7ff fe81 	bl	8005c50 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4602      	mov	r2, r0
 8005f50:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	0a1b      	lsrs	r3, r3, #8
 8005f56:	f003 030f 	and.w	r3, r3, #15
 8005f5a:	490f      	ldr	r1, [pc, #60]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f5c:	5ccb      	ldrb	r3, [r1, r3]
 8005f5e:	f003 031f 	and.w	r3, r3, #31
 8005f62:	fa22 f303 	lsr.w	r3, r2, r3
 8005f66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	4a09      	ldr	r2, [pc, #36]	; (8005f98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f72:	5cd3      	ldrb	r3, [r2, r3]
 8005f74:	f003 031f 	and.w	r3, r3, #31
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7e:	4a07      	ldr	r2, [pc, #28]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f82:	4a07      	ldr	r2, [pc, #28]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f88:	4b04      	ldr	r3, [pc, #16]	; (8005f9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}
 8005f94:	58024400 	.word	0x58024400
 8005f98:	0800b968 	.word	0x0800b968
 8005f9c:	24000004 	.word	0x24000004
 8005fa0:	24000000 	.word	0x24000000

08005fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fa8:	f7ff ffcc 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	4904      	ldr	r1, [pc, #16]	; (8005fcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fba:	5ccb      	ldrb	r3, [r1, r3]
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	58024400 	.word	0x58024400
 8005fcc:	0800b968 	.word	0x0800b968

08005fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005fd4:	f7ff ffb6 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fdc:	69db      	ldr	r3, [r3, #28]
 8005fde:	0a1b      	lsrs	r3, r3, #8
 8005fe0:	f003 0307 	and.w	r3, r3, #7
 8005fe4:	4904      	ldr	r1, [pc, #16]	; (8005ff8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fe6:	5ccb      	ldrb	r3, [r1, r3]
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	58024400 	.word	0x58024400
 8005ff8:	0800b968 	.word	0x0800b968

08005ffc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b0c6      	sub	sp, #280	; 0x118
 8006002:	af00      	add	r7, sp, #0
 8006004:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006008:	2300      	movs	r3, #0
 800600a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800600e:	2300      	movs	r3, #0
 8006010:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006020:	2500      	movs	r5, #0
 8006022:	ea54 0305 	orrs.w	r3, r4, r5
 8006026:	d049      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800602c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800602e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006032:	d02f      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006034:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006038:	d828      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800603a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800603e:	d01a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006044:	d822      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006046:	2b00      	cmp	r3, #0
 8006048:	d003      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604e:	d007      	beq.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006050:	e01c      	b.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006052:	4bab      	ldr	r3, [pc, #684]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006056:	4aaa      	ldr	r2, [pc, #680]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800605c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800605e:	e01a      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006064:	3308      	adds	r3, #8
 8006066:	2102      	movs	r1, #2
 8006068:	4618      	mov	r0, r3
 800606a:	f001 fc25 	bl	80078b8 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800607a:	3328      	adds	r3, #40	; 0x28
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fccc 	bl	8007a1c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800609e:	4b98      	ldr	r3, [pc, #608]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ac:	4a94      	ldr	r2, [pc, #592]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	6513      	str	r3, [r2, #80]	; 0x50
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80060c8:	f04f 0900 	mov.w	r9, #0
 80060cc:	ea58 0309 	orrs.w	r3, r8, r9
 80060d0:	d047      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80060d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d82a      	bhi.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80060dc:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	080060f9 	.word	0x080060f9
 80060e8:	08006107 	.word	0x08006107
 80060ec:	0800611d 	.word	0x0800611d
 80060f0:	0800613b 	.word	0x0800613b
 80060f4:	0800613b 	.word	0x0800613b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060f8:	4b81      	ldr	r3, [pc, #516]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fc:	4a80      	ldr	r2, [pc, #512]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006102:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006104:	e01a      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800610a:	3308      	adds	r3, #8
 800610c:	2100      	movs	r1, #0
 800610e:	4618      	mov	r0, r3
 8006110:	f001 fbd2 	bl	80078b8 <RCCEx_PLL2_Config>
 8006114:	4603      	mov	r3, r0
 8006116:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800611a:	e00f      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800611c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006120:	3328      	adds	r3, #40	; 0x28
 8006122:	2100      	movs	r1, #0
 8006124:	4618      	mov	r0, r3
 8006126:	f001 fc79 	bl	8007a1c <RCCEx_PLL3_Config>
 800612a:	4603      	mov	r3, r0
 800612c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006130:	e004      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006138:	e000      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800613a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10a      	bne.n	800615a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006144:	4b6e      	ldr	r3, [pc, #440]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006148:	f023 0107 	bic.w	r1, r3, #7
 800614c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006152:	4a6b      	ldr	r2, [pc, #428]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006154:	430b      	orrs	r3, r1
 8006156:	6513      	str	r3, [r2, #80]	; 0x50
 8006158:	e003      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800615e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616a:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800616e:	f04f 0b00 	mov.w	fp, #0
 8006172:	ea5a 030b 	orrs.w	r3, sl, fp
 8006176:	d05b      	beq.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006180:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006184:	d03b      	beq.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006186:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800618a:	d834      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800618c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006190:	d037      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006192:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006196:	d82e      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006198:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800619c:	d033      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800619e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061a2:	d828      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061a8:	d01a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80061aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ae:	d822      	bhi.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80061b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061b8:	d007      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80061ba:	e01c      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061bc:	4b50      	ldr	r3, [pc, #320]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a4f      	ldr	r2, [pc, #316]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061c8:	e01e      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ce:	3308      	adds	r3, #8
 80061d0:	2100      	movs	r1, #0
 80061d2:	4618      	mov	r0, r3
 80061d4:	f001 fb70 	bl	80078b8 <RCCEx_PLL2_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80061de:	e013      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80061e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e4:	3328      	adds	r3, #40	; 0x28
 80061e6:	2100      	movs	r1, #0
 80061e8:	4618      	mov	r0, r3
 80061ea:	f001 fc17 	bl	8007a1c <RCCEx_PLL3_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80061f4:	e008      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80061fc:	e004      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80061fe:	bf00      	nop
 8006200:	e002      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006202:	bf00      	nop
 8006204:	e000      	b.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006210:	4b3b      	ldr	r3, [pc, #236]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006214:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800621c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006220:	4a37      	ldr	r2, [pc, #220]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006222:	430b      	orrs	r3, r1
 8006224:	6593      	str	r3, [r2, #88]	; 0x58
 8006226:	e003      	b.n	8006230 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006228:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800622c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006230:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800623c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006240:	2300      	movs	r3, #0
 8006242:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006246:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800624a:	460b      	mov	r3, r1
 800624c:	4313      	orrs	r3, r2
 800624e:	d05d      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006254:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006258:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800625c:	d03b      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800625e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006262:	d834      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006268:	d037      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800626a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800626e:	d82e      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006270:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006274:	d033      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8006276:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800627a:	d828      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800627c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006280:	d01a      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006286:	d822      	bhi.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800628c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006290:	d007      	beq.n	80062a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006292:	e01c      	b.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006294:	4b1a      	ldr	r3, [pc, #104]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006298:	4a19      	ldr	r2, [pc, #100]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800629a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062a0:	e01e      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062a6:	3308      	adds	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f001 fb04 	bl	80078b8 <RCCEx_PLL2_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062b6:	e013      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062bc:	3328      	adds	r3, #40	; 0x28
 80062be:	2100      	movs	r1, #0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fbab 	bl	8007a1c <RCCEx_PLL3_Config>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062cc:	e008      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062d4:	e004      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80062de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062e0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10d      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80062e8:	4b05      	ldr	r3, [pc, #20]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ec:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062f8:	4a01      	ldr	r2, [pc, #4]	; (8006300 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	6593      	str	r3, [r2, #88]	; 0x58
 80062fe:	e005      	b.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006300:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006304:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006308:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800630c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800631c:	2300      	movs	r3, #0
 800631e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006322:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006326:	460b      	mov	r3, r1
 8006328:	4313      	orrs	r3, r2
 800632a:	d03a      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006332:	2b30      	cmp	r3, #48	; 0x30
 8006334:	d01f      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006336:	2b30      	cmp	r3, #48	; 0x30
 8006338:	d819      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800633a:	2b20      	cmp	r3, #32
 800633c:	d00c      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800633e:	2b20      	cmp	r3, #32
 8006340:	d815      	bhi.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d019      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006346:	2b10      	cmp	r3, #16
 8006348:	d111      	bne.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800634a:	4baa      	ldr	r3, [pc, #680]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	4aa9      	ldr	r2, [pc, #676]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006354:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006356:	e011      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800635c:	3308      	adds	r3, #8
 800635e:	2102      	movs	r1, #2
 8006360:	4618      	mov	r0, r3
 8006362:	f001 faa9 	bl	80078b8 <RCCEx_PLL2_Config>
 8006366:	4603      	mov	r3, r0
 8006368:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800636c:	e006      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006374:	e002      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8006376:	bf00      	nop
 8006378:	e000      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800637a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800637c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006380:	2b00      	cmp	r3, #0
 8006382:	d10a      	bne.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006384:	4b9b      	ldr	r3, [pc, #620]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006388:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800638c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	4a98      	ldr	r2, [pc, #608]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006394:	430b      	orrs	r3, r1
 8006396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006398:	e003      	b.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800639a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800639e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80063ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063b2:	2300      	movs	r3, #0
 80063b4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80063bc:	460b      	mov	r3, r1
 80063be:	4313      	orrs	r3, r2
 80063c0:	d051      	beq.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80063c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063cc:	d035      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80063ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063d2:	d82e      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063d8:	d031      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80063da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063de:	d828      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e4:	d01a      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80063e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ea:	d822      	bhi.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d003      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80063f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063f4:	d007      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80063f6:	e01c      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063f8:	4b7e      	ldr	r3, [pc, #504]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	4a7d      	ldr	r2, [pc, #500]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006402:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006404:	e01c      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006406:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800640a:	3308      	adds	r3, #8
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f001 fa52 	bl	80078b8 <RCCEx_PLL2_Config>
 8006414:	4603      	mov	r3, r0
 8006416:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800641a:	e011      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006420:	3328      	adds	r3, #40	; 0x28
 8006422:	2100      	movs	r1, #0
 8006424:	4618      	mov	r0, r3
 8006426:	f001 faf9 	bl	8007a1c <RCCEx_PLL3_Config>
 800642a:	4603      	mov	r3, r0
 800642c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006430:	e006      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006438:	e002      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800643a:	bf00      	nop
 800643c:	e000      	b.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800643e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006440:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006448:	4b6a      	ldr	r3, [pc, #424]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006456:	4a67      	ldr	r2, [pc, #412]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006458:	430b      	orrs	r3, r1
 800645a:	6513      	str	r3, [r2, #80]	; 0x50
 800645c:	e003      	b.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800645e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006462:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006472:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006476:	2300      	movs	r3, #0
 8006478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800647c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8006480:	460b      	mov	r3, r1
 8006482:	4313      	orrs	r3, r2
 8006484:	d053      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006490:	d033      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8006492:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006496:	d82c      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8006498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800649c:	d02f      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800649e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064a2:	d826      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064a8:	d02b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80064aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ae:	d820      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064b4:	d012      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80064b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064ba:	d81a      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c4:	d115      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ca:	3308      	adds	r3, #8
 80064cc:	2101      	movs	r1, #1
 80064ce:	4618      	mov	r0, r3
 80064d0:	f001 f9f2 	bl	80078b8 <RCCEx_PLL2_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064da:	e015      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064e0:	3328      	adds	r3, #40	; 0x28
 80064e2:	2101      	movs	r1, #1
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fa99 	bl	8007a1c <RCCEx_PLL3_Config>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80064f0:	e00a      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064fa:	bf00      	nop
 80064fc:	e004      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80064fe:	bf00      	nop
 8006500:	e002      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006502:	bf00      	nop
 8006504:	e000      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006508:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800650c:	2b00      	cmp	r3, #0
 800650e:	d10a      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006510:	4b38      	ldr	r3, [pc, #224]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006514:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006518:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800651c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800651e:	4a35      	ldr	r2, [pc, #212]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6513      	str	r3, [r2, #80]	; 0x50
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800652a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800653a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800653e:	2300      	movs	r3, #0
 8006540:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006544:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006548:	460b      	mov	r3, r1
 800654a:	4313      	orrs	r3, r2
 800654c:	d058      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800654e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006556:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800655a:	d033      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800655c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006560:	d82c      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d02f      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8006568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800656c:	d826      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800656e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006572:	d02b      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8006574:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006578:	d820      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800657a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657e:	d012      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006580:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006584:	d81a      	bhi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d022      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800658a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800658e:	d115      	bne.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006590:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006594:	3308      	adds	r3, #8
 8006596:	2101      	movs	r1, #1
 8006598:	4618      	mov	r0, r3
 800659a:	f001 f98d 	bl	80078b8 <RCCEx_PLL2_Config>
 800659e:	4603      	mov	r3, r0
 80065a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065a4:	e015      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065aa:	3328      	adds	r3, #40	; 0x28
 80065ac:	2101      	movs	r1, #1
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fa34 	bl	8007a1c <RCCEx_PLL3_Config>
 80065b4:	4603      	mov	r3, r0
 80065b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065ba:	e00a      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80065c2:	e006      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065c4:	bf00      	nop
 80065c6:	e004      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065c8:	bf00      	nop
 80065ca:	e002      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065cc:	bf00      	nop
 80065ce:	e000      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80065d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10e      	bne.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80065da:	4b06      	ldr	r3, [pc, #24]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065de:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80065e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80065ea:	4a02      	ldr	r2, [pc, #8]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80065ec:	430b      	orrs	r3, r1
 80065ee:	6593      	str	r3, [r2, #88]	; 0x58
 80065f0:	e006      	b.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80065f2:	bf00      	nop
 80065f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80065fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006608:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800660c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006610:	2300      	movs	r3, #0
 8006612:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006616:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800661a:	460b      	mov	r3, r1
 800661c:	4313      	orrs	r3, r2
 800661e:	d037      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006620:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006626:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800662a:	d00e      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006630:	d816      	bhi.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006632:	2b00      	cmp	r3, #0
 8006634:	d018      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006636:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800663a:	d111      	bne.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800663c:	4bc4      	ldr	r3, [pc, #784]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4ac3      	ldr	r2, [pc, #780]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006646:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006648:	e00f      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800664a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664e:	3308      	adds	r3, #8
 8006650:	2101      	movs	r1, #1
 8006652:	4618      	mov	r0, r3
 8006654:	f001 f930 	bl	80078b8 <RCCEx_PLL2_Config>
 8006658:	4603      	mov	r3, r0
 800665a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800665e:	e004      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006666:	e000      	b.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8006668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800666a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10a      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006672:	4bb7      	ldr	r3, [pc, #732]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006676:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800667a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	4ab3      	ldr	r2, [pc, #716]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006682:	430b      	orrs	r3, r1
 8006684:	6513      	str	r3, [r2, #80]	; 0x50
 8006686:	e003      	b.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006688:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800668c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800669c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066a0:	2300      	movs	r3, #0
 80066a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80066aa:	460b      	mov	r3, r1
 80066ac:	4313      	orrs	r3, r2
 80066ae:	d039      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80066b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066b6:	2b03      	cmp	r3, #3
 80066b8:	d81c      	bhi.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80066ba:	a201      	add	r2, pc, #4	; (adr r2, 80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80066bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c0:	080066fd 	.word	0x080066fd
 80066c4:	080066d1 	.word	0x080066d1
 80066c8:	080066df 	.word	0x080066df
 80066cc:	080066fd 	.word	0x080066fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066d0:	4b9f      	ldr	r3, [pc, #636]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d4:	4a9e      	ldr	r2, [pc, #632]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066dc:	e00f      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e2:	3308      	adds	r3, #8
 80066e4:	2102      	movs	r1, #2
 80066e6:	4618      	mov	r0, r3
 80066e8:	f001 f8e6 	bl	80078b8 <RCCEx_PLL2_Config>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80066f2:	e004      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066fa:	e000      	b.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80066fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006702:	2b00      	cmp	r3, #0
 8006704:	d10a      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006706:	4b92      	ldr	r3, [pc, #584]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800670a:	f023 0103 	bic.w	r1, r3, #3
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006714:	4a8e      	ldr	r2, [pc, #568]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006716:	430b      	orrs	r3, r1
 8006718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800671a:	e003      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800671c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006720:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006730:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006734:	2300      	movs	r3, #0
 8006736:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800673a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800673e:	460b      	mov	r3, r1
 8006740:	4313      	orrs	r3, r2
 8006742:	f000 8099 	beq.w	8006878 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006746:	4b83      	ldr	r3, [pc, #524]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a82      	ldr	r2, [pc, #520]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800674c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006750:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006752:	f7fa ff65 	bl	8001620 <HAL_GetTick>
 8006756:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800675a:	e00b      	b.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800675c:	f7fa ff60 	bl	8001620 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b64      	cmp	r3, #100	; 0x64
 800676a:	d903      	bls.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800676c:	2303      	movs	r3, #3
 800676e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006772:	e005      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006774:	4b77      	ldr	r3, [pc, #476]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0ed      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8006780:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006784:	2b00      	cmp	r3, #0
 8006786:	d173      	bne.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800678a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006790:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006794:	4053      	eors	r3, r2
 8006796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800679a:	2b00      	cmp	r3, #0
 800679c:	d015      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800679e:	4b6c      	ldr	r3, [pc, #432]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067aa:	4b69      	ldr	r3, [pc, #420]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	4a68      	ldr	r2, [pc, #416]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067b4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067b6:	4b66      	ldr	r3, [pc, #408]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ba:	4a65      	ldr	r2, [pc, #404]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067c0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80067c2:	4a63      	ldr	r2, [pc, #396]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80067c8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d118      	bne.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d8:	f7fa ff22 	bl	8001620 <HAL_GetTick>
 80067dc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067e0:	e00d      	b.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fa ff1d 	bl	8001620 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067ec:	1ad2      	subs	r2, r2, r3
 80067ee:	f241 3388 	movw	r3, #5000	; 0x1388
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d903      	bls.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 80067fc:	e005      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067fe:	4b54      	ldr	r3, [pc, #336]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d0eb      	beq.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800680a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800680e:	2b00      	cmp	r3, #0
 8006810:	d129      	bne.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006816:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800681a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800681e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006822:	d10e      	bne.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006824:	4b4a      	ldr	r3, [pc, #296]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800682c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006830:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006834:	091a      	lsrs	r2, r3, #4
 8006836:	4b48      	ldr	r3, [pc, #288]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006838:	4013      	ands	r3, r2
 800683a:	4a45      	ldr	r2, [pc, #276]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800683c:	430b      	orrs	r3, r1
 800683e:	6113      	str	r3, [r2, #16]
 8006840:	e005      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006842:	4b43      	ldr	r3, [pc, #268]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	4a42      	ldr	r2, [pc, #264]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006848:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800684c:	6113      	str	r3, [r2, #16]
 800684e:	4b40      	ldr	r3, [pc, #256]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006850:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800685a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800685e:	4a3c      	ldr	r2, [pc, #240]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006860:	430b      	orrs	r3, r1
 8006862:	6713      	str	r3, [r2, #112]	; 0x70
 8006864:	e008      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006866:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800686a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800686e:	e003      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006870:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006874:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006880:	f002 0301 	and.w	r3, r2, #1
 8006884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006888:	2300      	movs	r3, #0
 800688a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800688e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	f000 808f 	beq.w	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800689e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068a0:	2b28      	cmp	r3, #40	; 0x28
 80068a2:	d871      	bhi.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	08006991 	.word	0x08006991
 80068b0:	08006989 	.word	0x08006989
 80068b4:	08006989 	.word	0x08006989
 80068b8:	08006989 	.word	0x08006989
 80068bc:	08006989 	.word	0x08006989
 80068c0:	08006989 	.word	0x08006989
 80068c4:	08006989 	.word	0x08006989
 80068c8:	08006989 	.word	0x08006989
 80068cc:	0800695d 	.word	0x0800695d
 80068d0:	08006989 	.word	0x08006989
 80068d4:	08006989 	.word	0x08006989
 80068d8:	08006989 	.word	0x08006989
 80068dc:	08006989 	.word	0x08006989
 80068e0:	08006989 	.word	0x08006989
 80068e4:	08006989 	.word	0x08006989
 80068e8:	08006989 	.word	0x08006989
 80068ec:	08006973 	.word	0x08006973
 80068f0:	08006989 	.word	0x08006989
 80068f4:	08006989 	.word	0x08006989
 80068f8:	08006989 	.word	0x08006989
 80068fc:	08006989 	.word	0x08006989
 8006900:	08006989 	.word	0x08006989
 8006904:	08006989 	.word	0x08006989
 8006908:	08006989 	.word	0x08006989
 800690c:	08006991 	.word	0x08006991
 8006910:	08006989 	.word	0x08006989
 8006914:	08006989 	.word	0x08006989
 8006918:	08006989 	.word	0x08006989
 800691c:	08006989 	.word	0x08006989
 8006920:	08006989 	.word	0x08006989
 8006924:	08006989 	.word	0x08006989
 8006928:	08006989 	.word	0x08006989
 800692c:	08006991 	.word	0x08006991
 8006930:	08006989 	.word	0x08006989
 8006934:	08006989 	.word	0x08006989
 8006938:	08006989 	.word	0x08006989
 800693c:	08006989 	.word	0x08006989
 8006940:	08006989 	.word	0x08006989
 8006944:	08006989 	.word	0x08006989
 8006948:	08006989 	.word	0x08006989
 800694c:	08006991 	.word	0x08006991
 8006950:	58024400 	.word	0x58024400
 8006954:	58024800 	.word	0x58024800
 8006958:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800695c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006960:	3308      	adds	r3, #8
 8006962:	2101      	movs	r1, #1
 8006964:	4618      	mov	r0, r3
 8006966:	f000 ffa7 	bl	80078b8 <RCCEx_PLL2_Config>
 800696a:	4603      	mov	r3, r0
 800696c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006970:	e00f      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006976:	3328      	adds	r3, #40	; 0x28
 8006978:	2101      	movs	r1, #1
 800697a:	4618      	mov	r0, r3
 800697c:	f001 f84e 	bl	8007a1c <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006986:	e004      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800698e:	e000      	b.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8006990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006992:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800699a:	4bbf      	ldr	r3, [pc, #764]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069a8:	4abb      	ldr	r2, [pc, #748]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069aa:	430b      	orrs	r3, r1
 80069ac:	6553      	str	r3, [r2, #84]	; 0x54
 80069ae:	e003      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c0:	f002 0302 	and.w	r3, r2, #2
 80069c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069c8:	2300      	movs	r3, #0
 80069ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80069ce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4313      	orrs	r3, r2
 80069d6:	d041      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80069d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069de:	2b05      	cmp	r3, #5
 80069e0:	d824      	bhi.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80069e2:	a201      	add	r2, pc, #4	; (adr r2, 80069e8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80069e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e8:	08006a35 	.word	0x08006a35
 80069ec:	08006a01 	.word	0x08006a01
 80069f0:	08006a17 	.word	0x08006a17
 80069f4:	08006a35 	.word	0x08006a35
 80069f8:	08006a35 	.word	0x08006a35
 80069fc:	08006a35 	.word	0x08006a35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a04:	3308      	adds	r3, #8
 8006a06:	2101      	movs	r1, #1
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 ff55 	bl	80078b8 <RCCEx_PLL2_Config>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a14:	e00f      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1a:	3328      	adds	r3, #40	; 0x28
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fffc 	bl	8007a1c <RCCEx_PLL3_Config>
 8006a24:	4603      	mov	r3, r0
 8006a26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a2a:	e004      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006a34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a3e:	4b96      	ldr	r3, [pc, #600]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a42:	f023 0107 	bic.w	r1, r3, #7
 8006a46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a4c:	4a92      	ldr	r2, [pc, #584]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a4e:	430b      	orrs	r3, r1
 8006a50:	6553      	str	r3, [r2, #84]	; 0x54
 8006a52:	e003      	b.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a64:	f002 0304 	and.w	r3, r2, #4
 8006a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006a72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a76:	460b      	mov	r3, r1
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	d044      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a84:	2b05      	cmp	r3, #5
 8006a86:	d825      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006a88:	a201      	add	r2, pc, #4	; (adr r2, 8006a90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a8e:	bf00      	nop
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006aa9 	.word	0x08006aa9
 8006a98:	08006abf 	.word	0x08006abf
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aac:	3308      	adds	r3, #8
 8006aae:	2101      	movs	r1, #1
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 ff01 	bl	80078b8 <RCCEx_PLL2_Config>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006abc:	e00f      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac2:	3328      	adds	r3, #40	; 0x28
 8006ac4:	2101      	movs	r1, #1
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 ffa8 	bl	8007a1c <RCCEx_PLL3_Config>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006ad2:	e004      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ada:	e000      	b.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ade:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ae6:	4b6c      	ldr	r3, [pc, #432]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006aea:	f023 0107 	bic.w	r1, r3, #7
 8006aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af6:	4a68      	ldr	r2, [pc, #416]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006af8:	430b      	orrs	r3, r1
 8006afa:	6593      	str	r3, [r2, #88]	; 0x58
 8006afc:	e003      	b.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f002 0320 	and.w	r3, r2, #32
 8006b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b20:	460b      	mov	r3, r1
 8006b22:	4313      	orrs	r3, r2
 8006b24:	d055      	beq.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b32:	d033      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b38:	d82c      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b3e:	d02f      	beq.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b44:	d826      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b4a:	d02b      	beq.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006b4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b50:	d820      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b56:	d012      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b5c:	d81a      	bhi.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d022      	beq.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006b62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b66:	d115      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	2100      	movs	r1, #0
 8006b70:	4618      	mov	r0, r3
 8006b72:	f000 fea1 	bl	80078b8 <RCCEx_PLL2_Config>
 8006b76:	4603      	mov	r3, r0
 8006b78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b7c:	e015      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b82:	3328      	adds	r3, #40	; 0x28
 8006b84:	2102      	movs	r1, #2
 8006b86:	4618      	mov	r0, r3
 8006b88:	f000 ff48 	bl	8007a1c <RCCEx_PLL3_Config>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006b92:	e00a      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b9a:	e006      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006b9c:	bf00      	nop
 8006b9e:	e004      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ba0:	bf00      	nop
 8006ba2:	e002      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ba4:	bf00      	nop
 8006ba6:	e000      	b.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006ba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006baa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bb2:	4b39      	ldr	r3, [pc, #228]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc2:	4a35      	ldr	r2, [pc, #212]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bc4:	430b      	orrs	r3, r1
 8006bc6:	6553      	str	r3, [r2, #84]	; 0x54
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bda:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be2:	2300      	movs	r3, #0
 8006be4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006be8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006bec:	460b      	mov	r3, r1
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	d058      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006bfe:	d033      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006c00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c04:	d82c      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c0a:	d02f      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c10:	d826      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c16:	d02b      	beq.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006c18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c1c:	d820      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c22:	d012      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d81a      	bhi.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d022      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c32:	d115      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c38:	3308      	adds	r3, #8
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f000 fe3b 	bl	80078b8 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c48:	e015      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c4e:	3328      	adds	r3, #40	; 0x28
 8006c50:	2102      	movs	r1, #2
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 fee2 	bl	8007a1c <RCCEx_PLL3_Config>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c5e:	e00a      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006c66:	e006      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c68:	bf00      	nop
 8006c6a:	e004      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c6c:	bf00      	nop
 8006c6e:	e002      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c70:	bf00      	nop
 8006c72:	e000      	b.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10e      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006c7e:	4b06      	ldr	r3, [pc, #24]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c82:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c8e:	4a02      	ldr	r2, [pc, #8]	; (8006c98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6593      	str	r3, [r2, #88]	; 0x58
 8006c94:	e006      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ca0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d055      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ccc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cd0:	d033      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006cd2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006cd6:	d82c      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cdc:	d02f      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	d826      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006ce4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006ce8:	d02b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006cea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006cee:	d820      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cf4:	d012      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cfa:	d81a      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d022      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d04:	d115      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fdd2 	bl	80078b8 <RCCEx_PLL2_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d1a:	e015      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d20:	3328      	adds	r3, #40	; 0x28
 8006d22:	2102      	movs	r1, #2
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fe79 	bl	8007a1c <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d30:	e00a      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d3a:	bf00      	nop
 8006d3c:	e004      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d50:	4ba0      	ldr	r3, [pc, #640]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d54:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d60:	4a9c      	ldr	r2, [pc, #624]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6593      	str	r3, [r2, #88]	; 0x58
 8006d66:	e003      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f002 0308 	and.w	r3, r2, #8
 8006d7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006d86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d01e      	beq.n	8006dce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d9c:	d10c      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006da2:	3328      	adds	r3, #40	; 0x28
 8006da4:	2102      	movs	r1, #2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 fe38 	bl	8007a1c <RCCEx_PLL3_Config>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006db8:	4b86      	ldr	r3, [pc, #536]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dbc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dc8:	4a82      	ldr	r2, [pc, #520]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f002 0310 	and.w	r3, r2, #16
 8006dda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dde:	2300      	movs	r3, #0
 8006de0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006de4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006de8:	460b      	mov	r3, r1
 8006dea:	4313      	orrs	r3, r2
 8006dec:	d01e      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006dee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006df6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfa:	d10c      	bne.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e00:	3328      	adds	r3, #40	; 0x28
 8006e02:	2102      	movs	r1, #2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f000 fe09 	bl	8007a1c <RCCEx_PLL3_Config>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d002      	beq.n	8006e16 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e16:	4b6f      	ldr	r3, [pc, #444]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e26:	4a6b      	ldr	r2, [pc, #428]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e28:	430b      	orrs	r3, r1
 8006e2a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006e38:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e3e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e42:	460b      	mov	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d03e      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e54:	d022      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5a:	d81b      	bhi.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e64:	d00b      	beq.n	8006e7e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006e66:	e015      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	2100      	movs	r1, #0
 8006e70:	4618      	mov	r0, r3
 8006e72:	f000 fd21 	bl	80078b8 <RCCEx_PLL2_Config>
 8006e76:	4603      	mov	r3, r0
 8006e78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e7c:	e00f      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e82:	3328      	adds	r3, #40	; 0x28
 8006e84:	2102      	movs	r1, #2
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fdc8 	bl	8007a1c <RCCEx_PLL3_Config>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006e92:	e004      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006e9a:	e000      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e9e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10b      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ea6:	4b4b      	ldr	r3, [pc, #300]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eaa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006eae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eb6:	4a47      	ldr	r2, [pc, #284]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006eb8:	430b      	orrs	r3, r1
 8006eba:	6593      	str	r3, [r2, #88]	; 0x58
 8006ebc:	e003      	b.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ebe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ec2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ece:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006ed2:	673b      	str	r3, [r7, #112]	; 0x70
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	677b      	str	r3, [r7, #116]	; 0x74
 8006ed8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006edc:	460b      	mov	r3, r1
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	d03b      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006ee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006eee:	d01f      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006ef0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ef4:	d818      	bhi.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006efa:	d003      	beq.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f00:	d007      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006f02:	e011      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f04:	4b33      	ldr	r3, [pc, #204]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a32      	ldr	r2, [pc, #200]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f10:	e00f      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f16:	3328      	adds	r3, #40	; 0x28
 8006f18:	2101      	movs	r1, #1
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f000 fd7e 	bl	8007a1c <RCCEx_PLL3_Config>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f26:	e004      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f2e:	e000      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006f30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f32:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f4a:	4a22      	ldr	r2, [pc, #136]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f4c:	430b      	orrs	r3, r1
 8006f4e:	6553      	str	r3, [r2, #84]	; 0x54
 8006f50:	e003      	b.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f62:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006f66:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f68:	2300      	movs	r3, #0
 8006f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f6c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006f70:	460b      	mov	r3, r1
 8006f72:	4313      	orrs	r3, r2
 8006f74:	d034      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d003      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f84:	d007      	beq.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006f86:	e011      	b.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f88:	4b12      	ldr	r3, [pc, #72]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f8c:	4a11      	ldr	r2, [pc, #68]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006f94:	e00e      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fc8a 	bl	80078b8 <RCCEx_PLL2_Config>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006faa:	e003      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fb4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10d      	bne.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fbc:	4b05      	ldr	r3, [pc, #20]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fca:	4a02      	ldr	r2, [pc, #8]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fd0:	e006      	b.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006fd2:	bf00      	nop
 8006fd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006fdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006fec:	663b      	str	r3, [r7, #96]	; 0x60
 8006fee:	2300      	movs	r3, #0
 8006ff0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ff2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	d00c      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007000:	3328      	adds	r3, #40	; 0x28
 8007002:	2102      	movs	r1, #2
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fd09 	bl	8007a1c <RCCEx_PLL3_Config>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d002      	beq.n	8007016 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800701a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007022:	65bb      	str	r3, [r7, #88]	; 0x58
 8007024:	2300      	movs	r3, #0
 8007026:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007028:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800702c:	460b      	mov	r3, r1
 800702e:	4313      	orrs	r3, r2
 8007030:	d036      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007038:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800703c:	d018      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800703e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007042:	d811      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007048:	d014      	beq.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800704a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704e:	d80b      	bhi.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d011      	beq.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007058:	d106      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800705a:	4bb7      	ldr	r3, [pc, #732]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705e:	4ab6      	ldr	r2, [pc, #728]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007064:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007066:	e008      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800706e:	e004      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007070:	bf00      	nop
 8007072:	e002      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007074:	bf00      	nop
 8007076:	e000      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8007078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800707a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800707e:	2b00      	cmp	r3, #0
 8007080:	d10a      	bne.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007082:	4bad      	ldr	r3, [pc, #692]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007086:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800708a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800708e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007090:	4aa9      	ldr	r2, [pc, #676]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007092:	430b      	orrs	r3, r1
 8007094:	6553      	str	r3, [r2, #84]	; 0x54
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007098:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800709c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80070ac:	653b      	str	r3, [r7, #80]	; 0x50
 80070ae:	2300      	movs	r3, #0
 80070b0:	657b      	str	r3, [r7, #84]	; 0x54
 80070b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80070b6:	460b      	mov	r3, r1
 80070b8:	4313      	orrs	r3, r2
 80070ba:	d009      	beq.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070bc:	4b9e      	ldr	r3, [pc, #632]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80070c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ca:	4a9b      	ldr	r2, [pc, #620]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80070dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070de:	2300      	movs	r3, #0
 80070e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80070e6:	460b      	mov	r3, r1
 80070e8:	4313      	orrs	r3, r2
 80070ea:	d009      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070ec:	4b92      	ldr	r3, [pc, #584]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070f0:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80070f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070fa:	4a8f      	ldr	r2, [pc, #572]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070fc:	430b      	orrs	r3, r1
 80070fe:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007108:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800710c:	643b      	str	r3, [r7, #64]	; 0x40
 800710e:	2300      	movs	r3, #0
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
 8007112:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007116:	460b      	mov	r3, r1
 8007118:	4313      	orrs	r3, r2
 800711a:	d00e      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800711c:	4b86      	ldr	r3, [pc, #536]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800711e:	691b      	ldr	r3, [r3, #16]
 8007120:	4a85      	ldr	r2, [pc, #532]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007122:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007126:	6113      	str	r3, [r2, #16]
 8007128:	4b83      	ldr	r3, [pc, #524]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800712a:	6919      	ldr	r1, [r3, #16]
 800712c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007130:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007134:	4a80      	ldr	r2, [pc, #512]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007136:	430b      	orrs	r3, r1
 8007138:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800714c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007150:	460b      	mov	r3, r1
 8007152:	4313      	orrs	r3, r2
 8007154:	d009      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007156:	4b78      	ldr	r3, [pc, #480]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800715e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	4a74      	ldr	r2, [pc, #464]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007166:	430b      	orrs	r3, r1
 8007168:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800716a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8007176:	633b      	str	r3, [r7, #48]	; 0x30
 8007178:	2300      	movs	r3, #0
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
 800717c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007180:	460b      	mov	r3, r1
 8007182:	4313      	orrs	r3, r2
 8007184:	d00a      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007186:	4b6c      	ldr	r3, [pc, #432]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800718a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800718e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007196:	4a68      	ldr	r2, [pc, #416]	; (8007338 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007198:	430b      	orrs	r3, r1
 800719a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800719c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	2100      	movs	r1, #0
 80071a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80071b2:	460b      	mov	r3, r1
 80071b4:	4313      	orrs	r3, r2
 80071b6:	d011      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071bc:	3308      	adds	r3, #8
 80071be:	2100      	movs	r1, #0
 80071c0:	4618      	mov	r0, r3
 80071c2:	f000 fb79 	bl	80078b8 <RCCEx_PLL2_Config>
 80071c6:	4603      	mov	r3, r0
 80071c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80071cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d003      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80071d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	2100      	movs	r1, #0
 80071e6:	6239      	str	r1, [r7, #32]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
 80071ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d011      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	3308      	adds	r3, #8
 80071fe:	2101      	movs	r1, #1
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb59 	bl	80078b8 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800720c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007218:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	2100      	movs	r1, #0
 8007226:	61b9      	str	r1, [r7, #24]
 8007228:	f003 0304 	and.w	r3, r3, #4
 800722c:	61fb      	str	r3, [r7, #28]
 800722e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d011      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	3308      	adds	r3, #8
 800723e:	2102      	movs	r1, #2
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fb39 	bl	80078b8 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800724c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007258:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	2100      	movs	r1, #0
 8007266:	6139      	str	r1, [r7, #16]
 8007268:	f003 0308 	and.w	r3, r3, #8
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007272:	460b      	mov	r3, r1
 8007274:	4313      	orrs	r3, r2
 8007276:	d011      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	3328      	adds	r3, #40	; 0x28
 800727e:	2100      	movs	r1, #0
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fbcb 	bl	8007a1c <RCCEx_PLL3_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800728c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007298:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	2100      	movs	r1, #0
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	f003 0310 	and.w	r3, r3, #16
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d011      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072bc:	3328      	adds	r3, #40	; 0x28
 80072be:	2101      	movs	r1, #1
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fbab 	bl	8007a1c <RCCEx_PLL3_Config>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80072cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	2100      	movs	r1, #0
 80072e6:	6039      	str	r1, [r7, #0]
 80072e8:	f003 0320 	and.w	r3, r3, #32
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80072f2:	460b      	mov	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	d011      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fc:	3328      	adds	r3, #40	; 0x28
 80072fe:	2102      	movs	r1, #2
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fb8b 	bl	8007a1c <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800730c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007318:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800731c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	e000      	b.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007328:	2301      	movs	r3, #1
}
 800732a:	4618      	mov	r0, r3
 800732c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007330:	46bd      	mov	sp, r7
 8007332:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007336:	bf00      	nop
 8007338:	58024400 	.word	0x58024400

0800733c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007340:	f7fe fe00 	bl	8005f44 <HAL_RCC_GetHCLKFreq>
 8007344:	4602      	mov	r2, r0
 8007346:	4b06      	ldr	r3, [pc, #24]	; (8007360 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	091b      	lsrs	r3, r3, #4
 800734c:	f003 0307 	and.w	r3, r3, #7
 8007350:	4904      	ldr	r1, [pc, #16]	; (8007364 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007352:	5ccb      	ldrb	r3, [r1, r3]
 8007354:	f003 031f 	and.w	r3, r3, #31
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800735c:	4618      	mov	r0, r3
 800735e:	bd80      	pop	{r7, pc}
 8007360:	58024400 	.word	0x58024400
 8007364:	0800b968 	.word	0x0800b968

08007368 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007368:	b480      	push	{r7}
 800736a:	b089      	sub	sp, #36	; 0x24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007370:	4ba1      	ldr	r3, [pc, #644]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800737a:	4b9f      	ldr	r3, [pc, #636]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800737c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737e:	0b1b      	lsrs	r3, r3, #12
 8007380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007384:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007386:	4b9c      	ldr	r3, [pc, #624]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007392:	4b99      	ldr	r3, [pc, #612]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	08db      	lsrs	r3, r3, #3
 8007398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800739c:	693a      	ldr	r2, [r7, #16]
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	ee07 3a90 	vmov	s15, r3
 80073a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8111 	beq.w	80075d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	f000 8083 	beq.w	80074c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	f200 80a1 	bhi.w	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b01      	cmp	r3, #1
 80073d0:	d056      	beq.n	8007480 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80073d2:	e099      	b.n	8007508 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073d4:	4b88      	ldr	r3, [pc, #544]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02d      	beq.n	800743c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80073e0:	4b85      	ldr	r3, [pc, #532]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f003 0303 	and.w	r3, r3, #3
 80073ea:	4a84      	ldr	r2, [pc, #528]	; (80075fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80073ec:	fa22 f303 	lsr.w	r3, r2, r3
 80073f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	ee07 3a90 	vmov	s15, r3
 8007402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800740a:	4b7b      	ldr	r3, [pc, #492]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800741a:	ed97 6a03 	vldr	s12, [r7, #12]
 800741e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800742a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800742e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007436:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800743a:	e087      	b.n	800754c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007604 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800744a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744e:	4b6a      	ldr	r3, [pc, #424]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007456:	ee07 3a90 	vmov	s15, r3
 800745a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007462:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800746a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800747e:	e065      	b.n	800754c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	ee07 3a90 	vmov	s15, r3
 8007486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800748a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800748e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007492:	4b59      	ldr	r3, [pc, #356]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800749a:	ee07 3a90 	vmov	s15, r3
 800749e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c2:	e043      	b.n	800754c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	ee07 3a90 	vmov	s15, r3
 80074ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800760c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80074d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d6:	4b48      	ldr	r3, [pc, #288]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074de:	ee07 3a90 	vmov	s15, r3
 80074e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80074ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007506:	e021      	b.n	800754c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	ee07 3a90 	vmov	s15, r3
 800750e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007608 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800751a:	4b37      	ldr	r3, [pc, #220]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800751c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007522:	ee07 3a90 	vmov	s15, r3
 8007526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800752a:	ed97 6a03 	vldr	s12, [r7, #12]
 800752e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007600 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800753a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800754a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800754c:	4b2a      	ldr	r3, [pc, #168]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800754e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007550:	0a5b      	lsrs	r3, r3, #9
 8007552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007556:	ee07 3a90 	vmov	s15, r3
 800755a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800755e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007562:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007566:	edd7 6a07 	vldr	s13, [r7, #28]
 800756a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800756e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007572:	ee17 2a90 	vmov	r2, s15
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800757a:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	0c1b      	lsrs	r3, r3, #16
 8007580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007584:	ee07 3a90 	vmov	s15, r3
 8007588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007590:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007594:	edd7 6a07 	vldr	s13, [r7, #28]
 8007598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800759c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075a0:	ee17 2a90 	vmov	r2, s15
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	0e1b      	lsrs	r3, r3, #24
 80075ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075b2:	ee07 3a90 	vmov	s15, r3
 80075b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ce:	ee17 2a90 	vmov	r2, s15
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80075d6:	e008      	b.n	80075ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	609a      	str	r2, [r3, #8]
}
 80075ea:	bf00      	nop
 80075ec:	3724      	adds	r7, #36	; 0x24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	58024400 	.word	0x58024400
 80075fc:	03d09000 	.word	0x03d09000
 8007600:	46000000 	.word	0x46000000
 8007604:	4c742400 	.word	0x4c742400
 8007608:	4a742400 	.word	0x4a742400
 800760c:	4af42400 	.word	0x4af42400

08007610 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007618:	4ba1      	ldr	r3, [pc, #644]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	f003 0303 	and.w	r3, r3, #3
 8007620:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007622:	4b9f      	ldr	r3, [pc, #636]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007626:	0d1b      	lsrs	r3, r3, #20
 8007628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800762c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800762e:	4b9c      	ldr	r3, [pc, #624]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007632:	0a1b      	lsrs	r3, r3, #8
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800763a:	4b99      	ldr	r3, [pc, #612]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763e:	08db      	lsrs	r3, r3, #3
 8007640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 8111 	beq.w	8007880 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b02      	cmp	r3, #2
 8007662:	f000 8083 	beq.w	800776c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	2b02      	cmp	r3, #2
 800766a:	f200 80a1 	bhi.w	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d003      	beq.n	800767c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	2b01      	cmp	r3, #1
 8007678:	d056      	beq.n	8007728 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800767a:	e099      	b.n	80077b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800767c:	4b88      	ldr	r3, [pc, #544]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f003 0320 	and.w	r3, r3, #32
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02d      	beq.n	80076e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007688:	4b85      	ldr	r3, [pc, #532]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	08db      	lsrs	r3, r3, #3
 800768e:	f003 0303 	and.w	r3, r3, #3
 8007692:	4a84      	ldr	r2, [pc, #528]	; (80078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007694:	fa22 f303 	lsr.w	r3, r2, r3
 8007698:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	ee07 3a90 	vmov	s15, r3
 80076a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b2:	4b7b      	ldr	r3, [pc, #492]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ba:	ee07 3a90 	vmov	s15, r3
 80076be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80076ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80076e2:	e087      	b.n	80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80076f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f6:	4b6a      	ldr	r3, [pc, #424]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fe:	ee07 3a90 	vmov	s15, r3
 8007702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007706:	ed97 6a03 	vldr	s12, [r7, #12]
 800770a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800770e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007716:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007726:	e065      	b.n	80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	ee07 3a90 	vmov	s15, r3
 800772e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007732:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773a:	4b59      	ldr	r3, [pc, #356]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800773c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774a:	ed97 6a03 	vldr	s12, [r7, #12]
 800774e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800776a:	e043      	b.n	80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	ee07 3a90 	vmov	s15, r3
 8007772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007776:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800777a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777e:	4b48      	ldr	r3, [pc, #288]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007786:	ee07 3a90 	vmov	s15, r3
 800778a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007792:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ae:	e021      	b.n	80077f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	ee07 3a90 	vmov	s15, r3
 80077b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077c2:	4b37      	ldr	r3, [pc, #220]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ca:	ee07 3a90 	vmov	s15, r3
 80077ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80077f4:	4b2a      	ldr	r3, [pc, #168]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f8:	0a5b      	lsrs	r3, r3, #9
 80077fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800780a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800780e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800781a:	ee17 2a90 	vmov	r2, s15
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007822:	4b1f      	ldr	r3, [pc, #124]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800782c:	ee07 3a90 	vmov	s15, r3
 8007830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007834:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800783c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007848:	ee17 2a90 	vmov	r2, s15
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007850:	4b13      	ldr	r3, [pc, #76]	; (80078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007854:	0e1b      	lsrs	r3, r3, #24
 8007856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800786a:	edd7 6a07 	vldr	s13, [r7, #28]
 800786e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007876:	ee17 2a90 	vmov	r2, s15
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800787e:	e008      	b.n	8007892 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
}
 8007892:	bf00      	nop
 8007894:	3724      	adds	r7, #36	; 0x24
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	58024400 	.word	0x58024400
 80078a4:	03d09000 	.word	0x03d09000
 80078a8:	46000000 	.word	0x46000000
 80078ac:	4c742400 	.word	0x4c742400
 80078b0:	4a742400 	.word	0x4a742400
 80078b4:	4af42400 	.word	0x4af42400

080078b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80078c6:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ca:	f003 0303 	and.w	r3, r3, #3
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d101      	bne.n	80078d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e099      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80078d6:	4b4f      	ldr	r3, [pc, #316]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a4e      	ldr	r2, [pc, #312]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7f9 fe9d 	bl	8001620 <HAL_GetTick>
 80078e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078e8:	e008      	b.n	80078fc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078ea:	f7f9 fe99 	bl	8001620 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d901      	bls.n	80078fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e086      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078fc:	4b45      	ldr	r3, [pc, #276]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1f0      	bne.n	80078ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007908:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	031b      	lsls	r3, r3, #12
 8007916:	493f      	ldr	r1, [pc, #252]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007918:	4313      	orrs	r3, r2
 800791a:	628b      	str	r3, [r1, #40]	; 0x28
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	3b01      	subs	r3, #1
 8007922:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	3b01      	subs	r3, #1
 800792c:	025b      	lsls	r3, r3, #9
 800792e:	b29b      	uxth	r3, r3
 8007930:	431a      	orrs	r2, r3
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	3b01      	subs	r3, #1
 8007938:	041b      	lsls	r3, r3, #16
 800793a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800793e:	431a      	orrs	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	3b01      	subs	r3, #1
 8007946:	061b      	lsls	r3, r3, #24
 8007948:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800794c:	4931      	ldr	r1, [pc, #196]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800794e:	4313      	orrs	r3, r2
 8007950:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007952:	4b30      	ldr	r3, [pc, #192]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007956:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	492d      	ldr	r1, [pc, #180]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007960:	4313      	orrs	r3, r2
 8007962:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007964:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	f023 0220 	bic.w	r2, r3, #32
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	4928      	ldr	r1, [pc, #160]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007972:	4313      	orrs	r3, r2
 8007974:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007976:	4b27      	ldr	r3, [pc, #156]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797a:	4a26      	ldr	r2, [pc, #152]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800797c:	f023 0310 	bic.w	r3, r3, #16
 8007980:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007982:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007986:	4b24      	ldr	r3, [pc, #144]	; (8007a18 <RCCEx_PLL2_Config+0x160>)
 8007988:	4013      	ands	r3, r2
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	69d2      	ldr	r2, [r2, #28]
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	4920      	ldr	r1, [pc, #128]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007992:	4313      	orrs	r3, r2
 8007994:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007996:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4a1e      	ldr	r2, [pc, #120]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 800799c:	f043 0310 	orr.w	r3, r3, #16
 80079a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d106      	bne.n	80079b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4a19      	ldr	r2, [pc, #100]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079b4:	e00f      	b.n	80079d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d106      	bne.n	80079ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079bc:	4b15      	ldr	r3, [pc, #84]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a14      	ldr	r2, [pc, #80]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079c8:	e005      	b.n	80079d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a0e      	ldr	r2, [pc, #56]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80079e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079e2:	f7f9 fe1d 	bl	8001620 <HAL_GetTick>
 80079e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079e8:	e008      	b.n	80079fc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079ea:	f7f9 fe19 	bl	8001620 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d901      	bls.n	80079fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80079f8:	2303      	movs	r3, #3
 80079fa:	e006      	b.n	8007a0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80079fc:	4b05      	ldr	r3, [pc, #20]	; (8007a14 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d0f0      	beq.n	80079ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	58024400 	.word	0x58024400
 8007a18:	ffff0007 	.word	0xffff0007

08007a1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a2a:	4b53      	ldr	r3, [pc, #332]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	d101      	bne.n	8007a3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e099      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a3a:	4b4f      	ldr	r3, [pc, #316]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a4e      	ldr	r2, [pc, #312]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a46:	f7f9 fdeb 	bl	8001620 <HAL_GetTick>
 8007a4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a4c:	e008      	b.n	8007a60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a4e:	f7f9 fde7 	bl	8001620 <HAL_GetTick>
 8007a52:	4602      	mov	r2, r0
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	1ad3      	subs	r3, r2, r3
 8007a58:	2b02      	cmp	r3, #2
 8007a5a:	d901      	bls.n	8007a60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e086      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a60:	4b45      	ldr	r3, [pc, #276]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1f0      	bne.n	8007a4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007a6c:	4b42      	ldr	r3, [pc, #264]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a70:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	051b      	lsls	r3, r3, #20
 8007a7a:	493f      	ldr	r1, [pc, #252]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	628b      	str	r3, [r1, #40]	; 0x28
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	025b      	lsls	r3, r3, #9
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	431a      	orrs	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	3b01      	subs	r3, #1
 8007a9c:	041b      	lsls	r3, r3, #16
 8007a9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007aa2:	431a      	orrs	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	061b      	lsls	r3, r3, #24
 8007aac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007ab0:	4931      	ldr	r1, [pc, #196]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ab2:	4313      	orrs	r3, r2
 8007ab4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ab6:	4b30      	ldr	r3, [pc, #192]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492d      	ldr	r1, [pc, #180]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007ac8:	4b2b      	ldr	r3, [pc, #172]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	4928      	ldr	r1, [pc, #160]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ada:	4b27      	ldr	r3, [pc, #156]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ade:	4a26      	ldr	r2, [pc, #152]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007ae6:	4b24      	ldr	r3, [pc, #144]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <RCCEx_PLL3_Config+0x160>)
 8007aec:	4013      	ands	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	69d2      	ldr	r2, [r2, #28]
 8007af2:	00d2      	lsls	r2, r2, #3
 8007af4:	4920      	ldr	r1, [pc, #128]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007af6:	4313      	orrs	r3, r2
 8007af8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007afa:	4b1f      	ldr	r3, [pc, #124]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afe:	4a1e      	ldr	r2, [pc, #120]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b04:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b10:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b18:	e00f      	b.n	8007b3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d106      	bne.n	8007b2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b20:	4b15      	ldr	r3, [pc, #84]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b24:	4a14      	ldr	r2, [pc, #80]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b2c:	e005      	b.n	8007b3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b2e:	4b12      	ldr	r3, [pc, #72]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b38:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a0e      	ldr	r2, [pc, #56]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b46:	f7f9 fd6b 	bl	8001620 <HAL_GetTick>
 8007b4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b4c:	e008      	b.n	8007b60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b4e:	f7f9 fd67 	bl	8001620 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d901      	bls.n	8007b60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e006      	b.n	8007b6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b60:	4b05      	ldr	r3, [pc, #20]	; (8007b78 <RCCEx_PLL3_Config+0x15c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d0f0      	beq.n	8007b4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
 8007b76:	bf00      	nop
 8007b78:	58024400 	.word	0x58024400
 8007b7c:	ffff0007 	.word	0xffff0007

08007b80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e049      	b.n	8007c26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7f9 f9ba 	bl	8000f20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681a      	ldr	r2, [r3, #0]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	3304      	adds	r3, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	f000 fa66 	bl	8008090 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3708      	adds	r7, #8
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
	...

08007c30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d109      	bne.n	8007c54 <HAL_TIM_PWM_Start+0x24>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	bf14      	ite	ne
 8007c4c:	2301      	movne	r3, #1
 8007c4e:	2300      	moveq	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e03c      	b.n	8007cce <HAL_TIM_PWM_Start+0x9e>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d109      	bne.n	8007c6e <HAL_TIM_PWM_Start+0x3e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	bf14      	ite	ne
 8007c66:	2301      	movne	r3, #1
 8007c68:	2300      	moveq	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	e02f      	b.n	8007cce <HAL_TIM_PWM_Start+0x9e>
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	d109      	bne.n	8007c88 <HAL_TIM_PWM_Start+0x58>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	bf14      	ite	ne
 8007c80:	2301      	movne	r3, #1
 8007c82:	2300      	moveq	r3, #0
 8007c84:	b2db      	uxtb	r3, r3
 8007c86:	e022      	b.n	8007cce <HAL_TIM_PWM_Start+0x9e>
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	2b0c      	cmp	r3, #12
 8007c8c:	d109      	bne.n	8007ca2 <HAL_TIM_PWM_Start+0x72>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	bf14      	ite	ne
 8007c9a:	2301      	movne	r3, #1
 8007c9c:	2300      	moveq	r3, #0
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	e015      	b.n	8007cce <HAL_TIM_PWM_Start+0x9e>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b10      	cmp	r3, #16
 8007ca6:	d109      	bne.n	8007cbc <HAL_TIM_PWM_Start+0x8c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	bf14      	ite	ne
 8007cb4:	2301      	movne	r3, #1
 8007cb6:	2300      	moveq	r3, #0
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	e008      	b.n	8007cce <HAL_TIM_PWM_Start+0x9e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007cc2:	b2db      	uxtb	r3, r3
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	bf14      	ite	ne
 8007cc8:	2301      	movne	r3, #1
 8007cca:	2300      	moveq	r3, #0
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e0ab      	b.n	8007e2e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d104      	bne.n	8007ce6 <HAL_TIM_PWM_Start+0xb6>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2202      	movs	r2, #2
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce4:	e023      	b.n	8007d2e <HAL_TIM_PWM_Start+0xfe>
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b04      	cmp	r3, #4
 8007cea:	d104      	bne.n	8007cf6 <HAL_TIM_PWM_Start+0xc6>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2202      	movs	r2, #2
 8007cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cf4:	e01b      	b.n	8007d2e <HAL_TIM_PWM_Start+0xfe>
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d104      	bne.n	8007d06 <HAL_TIM_PWM_Start+0xd6>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2202      	movs	r2, #2
 8007d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d04:	e013      	b.n	8007d2e <HAL_TIM_PWM_Start+0xfe>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b0c      	cmp	r3, #12
 8007d0a:	d104      	bne.n	8007d16 <HAL_TIM_PWM_Start+0xe6>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d14:	e00b      	b.n	8007d2e <HAL_TIM_PWM_Start+0xfe>
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b10      	cmp	r3, #16
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xf6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d24:	e003      	b.n	8007d2e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2201      	movs	r2, #1
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f000 fd26 	bl	8008788 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a3d      	ldr	r2, [pc, #244]	; (8007e38 <HAL_TIM_PWM_Start+0x208>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d013      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x13e>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <HAL_TIM_PWM_Start+0x20c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d00e      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x13e>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <HAL_TIM_PWM_Start+0x210>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d009      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x13e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a39      	ldr	r2, [pc, #228]	; (8007e44 <HAL_TIM_PWM_Start+0x214>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d004      	beq.n	8007d6e <HAL_TIM_PWM_Start+0x13e>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a37      	ldr	r2, [pc, #220]	; (8007e48 <HAL_TIM_PWM_Start+0x218>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d101      	bne.n	8007d72 <HAL_TIM_PWM_Start+0x142>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e000      	b.n	8007d74 <HAL_TIM_PWM_Start+0x144>
 8007d72:	2300      	movs	r3, #0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d007      	beq.n	8007d88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <HAL_TIM_PWM_Start+0x208>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d02c      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9a:	d027      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <HAL_TIM_PWM_Start+0x21c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d022      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a29      	ldr	r2, [pc, #164]	; (8007e50 <HAL_TIM_PWM_Start+0x220>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d01d      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a27      	ldr	r2, [pc, #156]	; (8007e54 <HAL_TIM_PWM_Start+0x224>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d018      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a1f      	ldr	r2, [pc, #124]	; (8007e3c <HAL_TIM_PWM_Start+0x20c>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d013      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a23      	ldr	r2, [pc, #140]	; (8007e58 <HAL_TIM_PWM_Start+0x228>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d00e      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a1b      	ldr	r2, [pc, #108]	; (8007e40 <HAL_TIM_PWM_Start+0x210>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d009      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a1f      	ldr	r2, [pc, #124]	; (8007e5c <HAL_TIM_PWM_Start+0x22c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d004      	beq.n	8007dec <HAL_TIM_PWM_Start+0x1bc>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4a1e      	ldr	r2, [pc, #120]	; (8007e60 <HAL_TIM_PWM_Start+0x230>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d115      	bne.n	8007e18 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <HAL_TIM_PWM_Start+0x234>)
 8007df4:	4013      	ands	r3, r2
 8007df6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b06      	cmp	r3, #6
 8007dfc:	d015      	beq.n	8007e2a <HAL_TIM_PWM_Start+0x1fa>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e04:	d011      	beq.n	8007e2a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0201 	orr.w	r2, r2, #1
 8007e14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e16:	e008      	b.n	8007e2a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0201 	orr.w	r2, r2, #1
 8007e26:	601a      	str	r2, [r3, #0]
 8007e28:	e000      	b.n	8007e2c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3710      	adds	r7, #16
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40010000 	.word	0x40010000
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40001800 	.word	0x40001800
 8007e5c:	4000e000 	.word	0x4000e000
 8007e60:	4000e400 	.word	0x4000e400
 8007e64:	00010007 	.word	0x00010007

08007e68 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e0ff      	b.n	8008086 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2b14      	cmp	r3, #20
 8007e92:	f200 80f0 	bhi.w	8008076 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e96:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08008077 	.word	0x08008077
 8007ea4:	08008077 	.word	0x08008077
 8007ea8:	08008077 	.word	0x08008077
 8007eac:	08007f31 	.word	0x08007f31
 8007eb0:	08008077 	.word	0x08008077
 8007eb4:	08008077 	.word	0x08008077
 8007eb8:	08008077 	.word	0x08008077
 8007ebc:	08007f73 	.word	0x08007f73
 8007ec0:	08008077 	.word	0x08008077
 8007ec4:	08008077 	.word	0x08008077
 8007ec8:	08008077 	.word	0x08008077
 8007ecc:	08007fb3 	.word	0x08007fb3
 8007ed0:	08008077 	.word	0x08008077
 8007ed4:	08008077 	.word	0x08008077
 8007ed8:	08008077 	.word	0x08008077
 8007edc:	08007ff5 	.word	0x08007ff5
 8007ee0:	08008077 	.word	0x08008077
 8007ee4:	08008077 	.word	0x08008077
 8007ee8:	08008077 	.word	0x08008077
 8007eec:	08008035 	.word	0x08008035
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68b9      	ldr	r1, [r7, #8]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f000 f970 	bl	80081dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0208 	orr.w	r2, r2, #8
 8007f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f022 0204 	bic.w	r2, r2, #4
 8007f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6999      	ldr	r1, [r3, #24]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691a      	ldr	r2, [r3, #16]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	619a      	str	r2, [r3, #24]
      break;
 8007f2e:	e0a5      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f9e0 	bl	80082fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	021a      	lsls	r2, r3, #8
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	619a      	str	r2, [r3, #24]
      break;
 8007f70:	e084      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68b9      	ldr	r1, [r7, #8]
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f000 fa49 	bl	8008410 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0208 	orr.w	r2, r2, #8
 8007f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69da      	ldr	r2, [r3, #28]
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f022 0204 	bic.w	r2, r2, #4
 8007f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	69d9      	ldr	r1, [r3, #28]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	61da      	str	r2, [r3, #28]
      break;
 8007fb0:	e064      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fab1 	bl	8008520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69d9      	ldr	r1, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	021a      	lsls	r2, r3, #8
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	430a      	orrs	r2, r1
 8007ff0:	61da      	str	r2, [r3, #28]
      break;
 8007ff2:	e043      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 fafa 	bl	80085f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f042 0208 	orr.w	r2, r2, #8
 800800e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0204 	bic.w	r2, r2, #4
 800801e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	691a      	ldr	r2, [r3, #16]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008032:	e023      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fb3e 	bl	80086bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800804e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691b      	ldr	r3, [r3, #16]
 800806a:	021a      	lsls	r2, r3, #8
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008074:	e002      	b.n	800807c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	75fb      	strb	r3, [r7, #23]
      break;
 800807a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008084:	7dfb      	ldrb	r3, [r7, #23]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop

08008090 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	4a44      	ldr	r2, [pc, #272]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d013      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ae:	d00f      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4a41      	ldr	r2, [pc, #260]	; (80081b8 <TIM_Base_SetConfig+0x128>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00b      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4a40      	ldr	r2, [pc, #256]	; (80081bc <TIM_Base_SetConfig+0x12c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d007      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	4a3f      	ldr	r2, [pc, #252]	; (80081c0 <TIM_Base_SetConfig+0x130>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d003      	beq.n	80080d0 <TIM_Base_SetConfig+0x40>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	4a3e      	ldr	r2, [pc, #248]	; (80081c4 <TIM_Base_SetConfig+0x134>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d108      	bne.n	80080e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	4313      	orrs	r3, r2
 80080e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a33      	ldr	r2, [pc, #204]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d027      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080f0:	d023      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a30      	ldr	r2, [pc, #192]	; (80081b8 <TIM_Base_SetConfig+0x128>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01f      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a2f      	ldr	r2, [pc, #188]	; (80081bc <TIM_Base_SetConfig+0x12c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d01b      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	4a2e      	ldr	r2, [pc, #184]	; (80081c0 <TIM_Base_SetConfig+0x130>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d017      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a2d      	ldr	r2, [pc, #180]	; (80081c4 <TIM_Base_SetConfig+0x134>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d013      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a2c      	ldr	r2, [pc, #176]	; (80081c8 <TIM_Base_SetConfig+0x138>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00f      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a2b      	ldr	r2, [pc, #172]	; (80081cc <TIM_Base_SetConfig+0x13c>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d00b      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a2a      	ldr	r2, [pc, #168]	; (80081d0 <TIM_Base_SetConfig+0x140>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d007      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a29      	ldr	r2, [pc, #164]	; (80081d4 <TIM_Base_SetConfig+0x144>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d003      	beq.n	800813a <TIM_Base_SetConfig+0xaa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a28      	ldr	r2, [pc, #160]	; (80081d8 <TIM_Base_SetConfig+0x148>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d108      	bne.n	800814c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008140:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	4313      	orrs	r3, r2
 800814a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	689a      	ldr	r2, [r3, #8]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <TIM_Base_SetConfig+0x124>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d00f      	beq.n	8008198 <TIM_Base_SetConfig+0x108>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	4a12      	ldr	r2, [pc, #72]	; (80081c4 <TIM_Base_SetConfig+0x134>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00b      	beq.n	8008198 <TIM_Base_SetConfig+0x108>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4a11      	ldr	r2, [pc, #68]	; (80081c8 <TIM_Base_SetConfig+0x138>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d007      	beq.n	8008198 <TIM_Base_SetConfig+0x108>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a10      	ldr	r2, [pc, #64]	; (80081cc <TIM_Base_SetConfig+0x13c>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d003      	beq.n	8008198 <TIM_Base_SetConfig+0x108>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <TIM_Base_SetConfig+0x140>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d103      	bne.n	80081a0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	691a      	ldr	r2, [r3, #16]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	615a      	str	r2, [r3, #20]
}
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000
 80081b8:	40000400 	.word	0x40000400
 80081bc:	40000800 	.word	0x40000800
 80081c0:	40000c00 	.word	0x40000c00
 80081c4:	40010400 	.word	0x40010400
 80081c8:	40014000 	.word	0x40014000
 80081cc:	40014400 	.word	0x40014400
 80081d0:	40014800 	.word	0x40014800
 80081d4:	4000e000 	.word	0x4000e000
 80081d8:	4000e400 	.word	0x4000e400

080081dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f023 0201 	bic.w	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	4b37      	ldr	r3, [pc, #220]	; (80082e4 <TIM_OC1_SetConfig+0x108>)
 8008208:	4013      	ands	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f023 0303 	bic.w	r3, r3, #3
 8008212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	4313      	orrs	r3, r2
 800821c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f023 0302 	bic.w	r3, r3, #2
 8008224:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	697a      	ldr	r2, [r7, #20]
 800822c:	4313      	orrs	r3, r2
 800822e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4a2d      	ldr	r2, [pc, #180]	; (80082e8 <TIM_OC1_SetConfig+0x10c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d00f      	beq.n	8008258 <TIM_OC1_SetConfig+0x7c>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a2c      	ldr	r2, [pc, #176]	; (80082ec <TIM_OC1_SetConfig+0x110>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d00b      	beq.n	8008258 <TIM_OC1_SetConfig+0x7c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a2b      	ldr	r2, [pc, #172]	; (80082f0 <TIM_OC1_SetConfig+0x114>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d007      	beq.n	8008258 <TIM_OC1_SetConfig+0x7c>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2a      	ldr	r2, [pc, #168]	; (80082f4 <TIM_OC1_SetConfig+0x118>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d003      	beq.n	8008258 <TIM_OC1_SetConfig+0x7c>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a29      	ldr	r2, [pc, #164]	; (80082f8 <TIM_OC1_SetConfig+0x11c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d10c      	bne.n	8008272 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f023 0308 	bic.w	r3, r3, #8
 800825e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	697a      	ldr	r2, [r7, #20]
 8008266:	4313      	orrs	r3, r2
 8008268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f023 0304 	bic.w	r3, r3, #4
 8008270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	4a1c      	ldr	r2, [pc, #112]	; (80082e8 <TIM_OC1_SetConfig+0x10c>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00f      	beq.n	800829a <TIM_OC1_SetConfig+0xbe>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	4a1b      	ldr	r2, [pc, #108]	; (80082ec <TIM_OC1_SetConfig+0x110>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d00b      	beq.n	800829a <TIM_OC1_SetConfig+0xbe>
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <TIM_OC1_SetConfig+0x114>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d007      	beq.n	800829a <TIM_OC1_SetConfig+0xbe>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a19      	ldr	r2, [pc, #100]	; (80082f4 <TIM_OC1_SetConfig+0x118>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d003      	beq.n	800829a <TIM_OC1_SetConfig+0xbe>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a18      	ldr	r2, [pc, #96]	; (80082f8 <TIM_OC1_SetConfig+0x11c>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d111      	bne.n	80082be <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	68fa      	ldr	r2, [r7, #12]
 80082c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	685a      	ldr	r2, [r3, #4]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	621a      	str	r2, [r3, #32]
}
 80082d8:	bf00      	nop
 80082da:	371c      	adds	r7, #28
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	fffeff8f 	.word	0xfffeff8f
 80082e8:	40010000 	.word	0x40010000
 80082ec:	40010400 	.word	0x40010400
 80082f0:	40014000 	.word	0x40014000
 80082f4:	40014400 	.word	0x40014400
 80082f8:	40014800 	.word	0x40014800

080082fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b087      	sub	sp, #28
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	f023 0210 	bic.w	r2, r3, #16
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a1b      	ldr	r3, [r3, #32]
 8008316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4b34      	ldr	r3, [pc, #208]	; (80083f8 <TIM_OC2_SetConfig+0xfc>)
 8008328:	4013      	ands	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	f023 0320 	bic.w	r3, r3, #32
 8008346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	4313      	orrs	r3, r2
 8008352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a29      	ldr	r2, [pc, #164]	; (80083fc <TIM_OC2_SetConfig+0x100>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_OC2_SetConfig+0x68>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a28      	ldr	r2, [pc, #160]	; (8008400 <TIM_OC2_SetConfig+0x104>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d10d      	bne.n	8008380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	4313      	orrs	r3, r2
 8008376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800837e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a1e      	ldr	r2, [pc, #120]	; (80083fc <TIM_OC2_SetConfig+0x100>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00f      	beq.n	80083a8 <TIM_OC2_SetConfig+0xac>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a1d      	ldr	r2, [pc, #116]	; (8008400 <TIM_OC2_SetConfig+0x104>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00b      	beq.n	80083a8 <TIM_OC2_SetConfig+0xac>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a1c      	ldr	r2, [pc, #112]	; (8008404 <TIM_OC2_SetConfig+0x108>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <TIM_OC2_SetConfig+0xac>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a1b      	ldr	r2, [pc, #108]	; (8008408 <TIM_OC2_SetConfig+0x10c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_OC2_SetConfig+0xac>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1a      	ldr	r2, [pc, #104]	; (800840c <TIM_OC2_SetConfig+0x110>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d113      	bne.n	80083d0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	699b      	ldr	r3, [r3, #24]
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	693a      	ldr	r2, [r7, #16]
 80083d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	621a      	str	r2, [r3, #32]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	feff8fff 	.word	0xfeff8fff
 80083fc:	40010000 	.word	0x40010000
 8008400:	40010400 	.word	0x40010400
 8008404:	40014000 	.word	0x40014000
 8008408:	40014400 	.word	0x40014400
 800840c:	40014800 	.word	0x40014800

08008410 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a1b      	ldr	r3, [r3, #32]
 800841e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	69db      	ldr	r3, [r3, #28]
 8008436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	4b33      	ldr	r3, [pc, #204]	; (8008508 <TIM_OC3_SetConfig+0xf8>)
 800843c:	4013      	ands	r3, r2
 800843e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0303 	bic.w	r3, r3, #3
 8008446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	4313      	orrs	r3, r2
 8008450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008458:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	021b      	lsls	r3, r3, #8
 8008460:	697a      	ldr	r2, [r7, #20]
 8008462:	4313      	orrs	r3, r2
 8008464:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a28      	ldr	r2, [pc, #160]	; (800850c <TIM_OC3_SetConfig+0xfc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d003      	beq.n	8008476 <TIM_OC3_SetConfig+0x66>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a27      	ldr	r2, [pc, #156]	; (8008510 <TIM_OC3_SetConfig+0x100>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d10d      	bne.n	8008492 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800847c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	021b      	lsls	r3, r3, #8
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	4313      	orrs	r3, r2
 8008488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	4a1d      	ldr	r2, [pc, #116]	; (800850c <TIM_OC3_SetConfig+0xfc>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d00f      	beq.n	80084ba <TIM_OC3_SetConfig+0xaa>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a1c      	ldr	r2, [pc, #112]	; (8008510 <TIM_OC3_SetConfig+0x100>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d00b      	beq.n	80084ba <TIM_OC3_SetConfig+0xaa>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a1b      	ldr	r2, [pc, #108]	; (8008514 <TIM_OC3_SetConfig+0x104>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d007      	beq.n	80084ba <TIM_OC3_SetConfig+0xaa>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1a      	ldr	r2, [pc, #104]	; (8008518 <TIM_OC3_SetConfig+0x108>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d003      	beq.n	80084ba <TIM_OC3_SetConfig+0xaa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a19      	ldr	r2, [pc, #100]	; (800851c <TIM_OC3_SetConfig+0x10c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d113      	bne.n	80084e2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	695b      	ldr	r3, [r3, #20]
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	621a      	str	r2, [r3, #32]
}
 80084fc:	bf00      	nop
 80084fe:	371c      	adds	r7, #28
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	fffeff8f 	.word	0xfffeff8f
 800850c:	40010000 	.word	0x40010000
 8008510:	40010400 	.word	0x40010400
 8008514:	40014000 	.word	0x40014000
 8008518:	40014400 	.word	0x40014400
 800851c:	40014800 	.word	0x40014800

08008520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a1b      	ldr	r3, [r3, #32]
 800852e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a1b      	ldr	r3, [r3, #32]
 800853a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	69db      	ldr	r3, [r3, #28]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	4b24      	ldr	r3, [pc, #144]	; (80085dc <TIM_OC4_SetConfig+0xbc>)
 800854c:	4013      	ands	r3, r2
 800854e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	021b      	lsls	r3, r3, #8
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	4313      	orrs	r3, r2
 8008562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800856a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	031b      	lsls	r3, r3, #12
 8008572:	693a      	ldr	r2, [r7, #16]
 8008574:	4313      	orrs	r3, r2
 8008576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a19      	ldr	r2, [pc, #100]	; (80085e0 <TIM_OC4_SetConfig+0xc0>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d00f      	beq.n	80085a0 <TIM_OC4_SetConfig+0x80>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a18      	ldr	r2, [pc, #96]	; (80085e4 <TIM_OC4_SetConfig+0xc4>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00b      	beq.n	80085a0 <TIM_OC4_SetConfig+0x80>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a17      	ldr	r2, [pc, #92]	; (80085e8 <TIM_OC4_SetConfig+0xc8>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d007      	beq.n	80085a0 <TIM_OC4_SetConfig+0x80>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a16      	ldr	r2, [pc, #88]	; (80085ec <TIM_OC4_SetConfig+0xcc>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d003      	beq.n	80085a0 <TIM_OC4_SetConfig+0x80>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a15      	ldr	r2, [pc, #84]	; (80085f0 <TIM_OC4_SetConfig+0xd0>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d109      	bne.n	80085b4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	019b      	lsls	r3, r3, #6
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	693a      	ldr	r2, [r7, #16]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	feff8fff 	.word	0xfeff8fff
 80085e0:	40010000 	.word	0x40010000
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40014400 	.word	0x40014400
 80085f0:	40014800 	.word	0x40014800

080085f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b087      	sub	sp, #28
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a1b      	ldr	r3, [r3, #32]
 800860e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4b21      	ldr	r3, [pc, #132]	; (80086a4 <TIM_OC5_SetConfig+0xb0>)
 8008620:	4013      	ands	r3, r2
 8008622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	4313      	orrs	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008634:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	041b      	lsls	r3, r3, #16
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	4313      	orrs	r3, r2
 8008640:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a18      	ldr	r2, [pc, #96]	; (80086a8 <TIM_OC5_SetConfig+0xb4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d00f      	beq.n	800866a <TIM_OC5_SetConfig+0x76>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	4a17      	ldr	r2, [pc, #92]	; (80086ac <TIM_OC5_SetConfig+0xb8>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d00b      	beq.n	800866a <TIM_OC5_SetConfig+0x76>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a16      	ldr	r2, [pc, #88]	; (80086b0 <TIM_OC5_SetConfig+0xbc>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d007      	beq.n	800866a <TIM_OC5_SetConfig+0x76>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a15      	ldr	r2, [pc, #84]	; (80086b4 <TIM_OC5_SetConfig+0xc0>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d003      	beq.n	800866a <TIM_OC5_SetConfig+0x76>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a14      	ldr	r2, [pc, #80]	; (80086b8 <TIM_OC5_SetConfig+0xc4>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d109      	bne.n	800867e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008670:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	695b      	ldr	r3, [r3, #20]
 8008676:	021b      	lsls	r3, r3, #8
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	4313      	orrs	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	68fa      	ldr	r2, [r7, #12]
 8008688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	621a      	str	r2, [r3, #32]
}
 8008698:	bf00      	nop
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	fffeff8f 	.word	0xfffeff8f
 80086a8:	40010000 	.word	0x40010000
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40014000 	.word	0x40014000
 80086b4:	40014400 	.word	0x40014400
 80086b8:	40014800 	.word	0x40014800

080086bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086bc:	b480      	push	{r7}
 80086be:	b087      	sub	sp, #28
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	685b      	ldr	r3, [r3, #4]
 80086dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086e4:	68fa      	ldr	r2, [r7, #12]
 80086e6:	4b22      	ldr	r3, [pc, #136]	; (8008770 <TIM_OC6_SetConfig+0xb4>)
 80086e8:	4013      	ands	r3, r2
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	021b      	lsls	r3, r3, #8
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	4313      	orrs	r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	689b      	ldr	r3, [r3, #8]
 8008704:	051b      	lsls	r3, r3, #20
 8008706:	693a      	ldr	r2, [r7, #16]
 8008708:	4313      	orrs	r3, r2
 800870a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	4a19      	ldr	r2, [pc, #100]	; (8008774 <TIM_OC6_SetConfig+0xb8>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d00f      	beq.n	8008734 <TIM_OC6_SetConfig+0x78>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a18      	ldr	r2, [pc, #96]	; (8008778 <TIM_OC6_SetConfig+0xbc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d00b      	beq.n	8008734 <TIM_OC6_SetConfig+0x78>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4a17      	ldr	r2, [pc, #92]	; (800877c <TIM_OC6_SetConfig+0xc0>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d007      	beq.n	8008734 <TIM_OC6_SetConfig+0x78>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a16      	ldr	r2, [pc, #88]	; (8008780 <TIM_OC6_SetConfig+0xc4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC6_SetConfig+0x78>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <TIM_OC6_SetConfig+0xc8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d109      	bne.n	8008748 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800873a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	029b      	lsls	r3, r3, #10
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	feff8fff 	.word	0xfeff8fff
 8008774:	40010000 	.word	0x40010000
 8008778:	40010400 	.word	0x40010400
 800877c:	40014000 	.word	0x40014000
 8008780:	40014400 	.word	0x40014400
 8008784:	40014800 	.word	0x40014800

08008788 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008788:	b480      	push	{r7}
 800878a:	b087      	sub	sp, #28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	f003 031f 	and.w	r3, r3, #31
 800879a:	2201      	movs	r2, #1
 800879c:	fa02 f303 	lsl.w	r3, r2, r3
 80087a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1a      	ldr	r2, [r3, #32]
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	43db      	mvns	r3, r3
 80087aa:	401a      	ands	r2, r3
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6a1a      	ldr	r2, [r3, #32]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f003 031f 	and.w	r3, r3, #31
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	fa01 f303 	lsl.w	r3, r1, r3
 80087c0:	431a      	orrs	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	621a      	str	r2, [r3, #32]
}
 80087c6:	bf00      	nop
 80087c8:	371c      	adds	r7, #28
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
	...

080087d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d101      	bne.n	80087ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e8:	2302      	movs	r3, #2
 80087ea:	e077      	b.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2202      	movs	r2, #2
 80087f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a35      	ldr	r2, [pc, #212]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d004      	beq.n	8008820 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a34      	ldr	r2, [pc, #208]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d108      	bne.n	8008832 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008826:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	68fa      	ldr	r2, [r7, #12]
 800882e:	4313      	orrs	r3, r2
 8008830:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008838:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a25      	ldr	r2, [pc, #148]	; (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02c      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	d027      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a22      	ldr	r2, [pc, #136]	; (80088f0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d022      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a21      	ldr	r2, [pc, #132]	; (80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01d      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a1f      	ldr	r2, [pc, #124]	; (80088f8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d018      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1a      	ldr	r2, [pc, #104]	; (80088ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00e      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a1a      	ldr	r2, [pc, #104]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a18      	ldr	r2, [pc, #96]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d10c      	bne.n	80088ca <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2201      	movs	r2, #1
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr
 80088e8:	40010000 	.word	0x40010000
 80088ec:	40010400 	.word	0x40010400
 80088f0:	40000400 	.word	0x40000400
 80088f4:	40000800 	.word	0x40000800
 80088f8:	40000c00 	.word	0x40000c00
 80088fc:	40001800 	.word	0x40001800
 8008900:	40014000 	.word	0x40014000
 8008904:	4000e000 	.word	0x4000e000
 8008908:	4000e400 	.word	0x4000e400

0800890c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008916:	2300      	movs	r3, #0
 8008918:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008924:	2302      	movs	r3, #2
 8008926:	e087      	b.n	8008a38 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	4313      	orrs	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4313      	orrs	r3, r2
 8008966:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	691b      	ldr	r3, [r3, #16]
 8008972:	4313      	orrs	r3, r2
 8008974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	695b      	ldr	r3, [r3, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898e:	4313      	orrs	r3, r2
 8008990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	041b      	lsls	r3, r3, #16
 800899e:	4313      	orrs	r3, r2
 80089a0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a27      	ldr	r2, [pc, #156]	; (8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d004      	beq.n	80089b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d106      	bne.n	80089c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a1e      	ldr	r2, [pc, #120]	; (8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a1d      	ldr	r2, [pc, #116]	; (8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d126      	bne.n	8008a26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e2:	051b      	lsls	r3, r3, #20
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a0e      	ldr	r2, [pc, #56]	; (8008a44 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a0d      	ldr	r2, [pc, #52]	; (8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d106      	bne.n	8008a26 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3714      	adds	r7, #20
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a42:	4770      	bx	lr
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40010400 	.word	0x40010400

08008a4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b082      	sub	sp, #8
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e042      	b.n	8008ae4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d106      	bne.n	8008a76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f7f8 fab3 	bl	8000fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2224      	movs	r2, #36	; 0x24
 8008a7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f022 0201 	bic.w	r2, r2, #1
 8008a8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 fc5c 	bl	800934c <UART_SetConfig>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e022      	b.n	8008ae4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d002      	beq.n	8008aac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f001 fabc 	bl	800a024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	685a      	ldr	r2, [r3, #4]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008aba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689a      	ldr	r2, [r3, #8]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008aca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fb43 	bl	800a168 <UART_CheckIdleState>
 8008ae2:	4603      	mov	r3, r0
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3708      	adds	r7, #8
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b08a      	sub	sp, #40	; 0x28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	4613      	mov	r3, r2
 8008af8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d137      	bne.n	8008b74 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <HAL_UART_Receive_DMA+0x24>
 8008b0a:	88fb      	ldrh	r3, [r7, #6]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d101      	bne.n	8008b14 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e030      	b.n	8008b76 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2200      	movs	r2, #0
 8008b18:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a18      	ldr	r2, [pc, #96]	; (8008b80 <HAL_UART_Receive_DMA+0x94>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d01f      	beq.n	8008b64 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d018      	beq.n	8008b64 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	e853 3f00 	ldrex	r3, [r3]
 8008b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b46:	627b      	str	r3, [r7, #36]	; 0x24
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	623b      	str	r3, [r7, #32]
 8008b52:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b54:	69f9      	ldr	r1, [r7, #28]
 8008b56:	6a3a      	ldr	r2, [r7, #32]
 8008b58:	e841 2300 	strex	r3, r2, [r1]
 8008b5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d1e6      	bne.n	8008b32 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	461a      	mov	r2, r3
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f001 fc0e 	bl	800a38c <UART_Start_Receive_DMA>
 8008b70:	4603      	mov	r3, r0
 8008b72:	e000      	b.n	8008b76 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b74:	2302      	movs	r3, #2
  }
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3728      	adds	r7, #40	; 0x28
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	58000c00 	.word	0x58000c00

08008b84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b0ba      	sub	sp, #232	; 0xe8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	69db      	ldr	r3, [r3, #28]
 8008b92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008baa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008bae:	f640 030f 	movw	r3, #2063	; 0x80f
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008bb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d11b      	bne.n	8008bf8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d015      	beq.n	8008bf8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bd0:	f003 0320 	and.w	r3, r3, #32
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d105      	bne.n	8008be4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	f000 8377 	beq.w	80092dc <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	4798      	blx	r3
      }
      return;
 8008bf6:	e371      	b.n	80092dc <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 8123 	beq.w	8008e48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c02:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008c06:	4b8d      	ldr	r3, [pc, #564]	; (8008e3c <HAL_UART_IRQHandler+0x2b8>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d106      	bne.n	8008c1c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008c12:	4b8b      	ldr	r3, [pc, #556]	; (8008e40 <HAL_UART_IRQHandler+0x2bc>)
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 8116 	beq.w	8008e48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d011      	beq.n	8008c4c <HAL_UART_IRQHandler+0xc8>
 8008c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c42:	f043 0201 	orr.w	r2, r3, #1
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d011      	beq.n	8008c7c <HAL_UART_IRQHandler+0xf8>
 8008c58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d00b      	beq.n	8008c7c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c72:	f043 0204 	orr.w	r2, r3, #4
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d011      	beq.n	8008cac <HAL_UART_IRQHandler+0x128>
 8008c88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8c:	f003 0301 	and.w	r3, r3, #1
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00b      	beq.n	8008cac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ca2:	f043 0202 	orr.w	r2, r3, #2
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb0:	f003 0308 	and.w	r3, r3, #8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d017      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cc4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008cc8:	4b5c      	ldr	r3, [pc, #368]	; (8008e3c <HAL_UART_IRQHandler+0x2b8>)
 8008cca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cde:	f043 0208 	orr.w	r2, r3, #8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ce8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d012      	beq.n	8008d1a <HAL_UART_IRQHandler+0x196>
 8008cf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00c      	beq.n	8008d1a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d10:	f043 0220 	orr.w	r2, r3, #32
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 82dd 	beq.w	80092e0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d013      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d105      	bne.n	8008d4a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d007      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d003      	beq.n	8008d5a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6e:	2b40      	cmp	r3, #64	; 0x40
 8008d70:	d005      	beq.n	8008d7e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d054      	beq.n	8008e28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fbec 	bl	800a55c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d8e:	2b40      	cmp	r3, #64	; 0x40
 8008d90:	d146      	bne.n	8008e20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	3308      	adds	r3, #8
 8008d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008dac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3308      	adds	r3, #8
 8008dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1d9      	bne.n	8008d92 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d017      	beq.n	8008e18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dee:	4a15      	ldr	r2, [pc, #84]	; (8008e44 <HAL_UART_IRQHandler+0x2c0>)
 8008df0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f7f9 fe21 	bl	8002a40 <HAL_DMA_Abort_IT>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d019      	beq.n	8008e38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008e12:	4610      	mov	r0, r2
 8008e14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e16:	e00f      	b.n	8008e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa81 	bl	8009320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1e:	e00b      	b.n	8008e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fa7d 	bl	8009320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e26:	e007      	b.n	8008e38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f000 fa79 	bl	8009320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008e36:	e253      	b.n	80092e0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e38:	bf00      	nop
    return;
 8008e3a:	e251      	b.n	80092e0 <HAL_UART_IRQHandler+0x75c>
 8008e3c:	10000001 	.word	0x10000001
 8008e40:	04000120 	.word	0x04000120
 8008e44:	0800a80f 	.word	0x0800a80f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 81e7 	bne.w	8009220 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 81e0 	beq.w	8009220 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81d9 	beq.w	8009220 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2210      	movs	r2, #16
 8008e74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	f040 8151 	bne.w	8009128 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	4a96      	ldr	r2, [pc, #600]	; (80090e8 <HAL_UART_IRQHandler+0x564>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d068      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a93      	ldr	r2, [pc, #588]	; (80090ec <HAL_UART_IRQHandler+0x568>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d061      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a91      	ldr	r2, [pc, #580]	; (80090f0 <HAL_UART_IRQHandler+0x56c>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d05a      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a8e      	ldr	r2, [pc, #568]	; (80090f4 <HAL_UART_IRQHandler+0x570>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d053      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a8c      	ldr	r2, [pc, #560]	; (80090f8 <HAL_UART_IRQHandler+0x574>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d04c      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a89      	ldr	r2, [pc, #548]	; (80090fc <HAL_UART_IRQHandler+0x578>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d045      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a87      	ldr	r2, [pc, #540]	; (8009100 <HAL_UART_IRQHandler+0x57c>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d03e      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4a84      	ldr	r2, [pc, #528]	; (8009104 <HAL_UART_IRQHandler+0x580>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d037      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	4a82      	ldr	r2, [pc, #520]	; (8009108 <HAL_UART_IRQHandler+0x584>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d030      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a7f      	ldr	r2, [pc, #508]	; (800910c <HAL_UART_IRQHandler+0x588>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d029      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a7d      	ldr	r2, [pc, #500]	; (8009110 <HAL_UART_IRQHandler+0x58c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d022      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a7a      	ldr	r2, [pc, #488]	; (8009114 <HAL_UART_IRQHandler+0x590>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d01b      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a78      	ldr	r2, [pc, #480]	; (8009118 <HAL_UART_IRQHandler+0x594>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d014      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a75      	ldr	r2, [pc, #468]	; (800911c <HAL_UART_IRQHandler+0x598>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d00d      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a73      	ldr	r2, [pc, #460]	; (8009120 <HAL_UART_IRQHandler+0x59c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d006      	beq.n	8008f66 <HAL_UART_IRQHandler+0x3e2>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a70      	ldr	r2, [pc, #448]	; (8009124 <HAL_UART_IRQHandler+0x5a0>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d106      	bne.n	8008f74 <HAL_UART_IRQHandler+0x3f0>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	e005      	b.n	8008f80 <HAL_UART_IRQHandler+0x3fc>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	685b      	ldr	r3, [r3, #4]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 81ab 	beq.w	80092e4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	f080 81a3 	bcs.w	80092e4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fa4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb4:	f000 8087 	beq.w	80090c6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	461a      	mov	r2, r3
 8008fde:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fe2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fe6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d1da      	bne.n	8008fb8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800900a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800900c:	e853 3f00 	ldrex	r3, [r3]
 8009010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3308      	adds	r3, #8
 8009022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800902a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800902e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800903a:	2b00      	cmp	r3, #0
 800903c:	d1e1      	bne.n	8009002 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3308      	adds	r3, #8
 8009044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009048:	e853 3f00 	ldrex	r3, [r3]
 800904c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800904e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	3308      	adds	r3, #8
 800905e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e3      	bne.n	800903e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2220      	movs	r2, #32
 800907a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2200      	movs	r2, #0
 8009082:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908c:	e853 3f00 	ldrex	r3, [r3]
 8009090:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009092:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009094:	f023 0310 	bic.w	r3, r3, #16
 8009098:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80090a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090ae:	e841 2300 	strex	r3, r2, [r1]
 80090b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d1e4      	bne.n	8009084 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7f9 f99f 	bl	8002404 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2202      	movs	r2, #2
 80090ca:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090d8:	b29b      	uxth	r3, r3
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	b29b      	uxth	r3, r3
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f927 	bl	8009334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090e6:	e0fd      	b.n	80092e4 <HAL_UART_IRQHandler+0x760>
 80090e8:	40020010 	.word	0x40020010
 80090ec:	40020028 	.word	0x40020028
 80090f0:	40020040 	.word	0x40020040
 80090f4:	40020058 	.word	0x40020058
 80090f8:	40020070 	.word	0x40020070
 80090fc:	40020088 	.word	0x40020088
 8009100:	400200a0 	.word	0x400200a0
 8009104:	400200b8 	.word	0x400200b8
 8009108:	40020410 	.word	0x40020410
 800910c:	40020428 	.word	0x40020428
 8009110:	40020440 	.word	0x40020440
 8009114:	40020458 	.word	0x40020458
 8009118:	40020470 	.word	0x40020470
 800911c:	40020488 	.word	0x40020488
 8009120:	400204a0 	.word	0x400204a0
 8009124:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009134:	b29b      	uxth	r3, r3
 8009136:	1ad3      	subs	r3, r2, r3
 8009138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009142:	b29b      	uxth	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 80cf 	beq.w	80092e8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800914a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80ca 	beq.w	80092e8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009176:	647b      	str	r3, [r7, #68]	; 0x44
 8009178:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800917c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e4      	bne.n	8009154 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	623b      	str	r3, [r7, #32]
   return(result);
 800919a:	6a3a      	ldr	r2, [r7, #32]
 800919c:	4b55      	ldr	r3, [pc, #340]	; (80092f4 <HAL_UART_IRQHandler+0x770>)
 800919e:	4013      	ands	r3, r2
 80091a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	3308      	adds	r3, #8
 80091aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80091ae:	633a      	str	r2, [r7, #48]	; 0x30
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091b6:	e841 2300 	strex	r3, r2, [r1]
 80091ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d1e3      	bne.n	800918a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2220      	movs	r2, #32
 80091c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2200      	movs	r2, #0
 80091ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	e853 3f00 	ldrex	r3, [r3]
 80091e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0310 	bic.w	r3, r3, #16
 80091ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	461a      	mov	r2, r3
 80091f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091f8:	61fb      	str	r3, [r7, #28]
 80091fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091fc:	69b9      	ldr	r1, [r7, #24]
 80091fe:	69fa      	ldr	r2, [r7, #28]
 8009200:	e841 2300 	strex	r3, r2, [r1]
 8009204:	617b      	str	r3, [r7, #20]
   return(result);
 8009206:	697b      	ldr	r3, [r7, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1e4      	bne.n	80091d6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2202      	movs	r2, #2
 8009210:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009212:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f88b 	bl	8009334 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800921e:	e063      	b.n	80092e8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00e      	beq.n	800924a <HAL_UART_IRQHandler+0x6c6>
 800922c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009234:	2b00      	cmp	r3, #0
 8009236:	d008      	beq.n	800924a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f001 fb24 	bl	800a890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009248:	e051      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800924a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009252:	2b00      	cmp	r3, #0
 8009254:	d014      	beq.n	8009280 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800925e:	2b00      	cmp	r3, #0
 8009260:	d105      	bne.n	800926e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009262:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009266:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d008      	beq.n	8009280 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009272:	2b00      	cmp	r3, #0
 8009274:	d03a      	beq.n	80092ec <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	4798      	blx	r3
    }
    return;
 800927e:	e035      	b.n	80092ec <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d009      	beq.n	80092a0 <HAL_UART_IRQHandler+0x71c>
 800928c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b00      	cmp	r3, #0
 8009296:	d003      	beq.n	80092a0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f001 face 	bl	800a83a <UART_EndTransmit_IT>
    return;
 800929e:	e026      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d009      	beq.n	80092c0 <HAL_UART_IRQHandler+0x73c>
 80092ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f001 fafd 	bl	800a8b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092be:	e016      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d010      	beq.n	80092ee <HAL_UART_IRQHandler+0x76a>
 80092cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	da0c      	bge.n	80092ee <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f001 fae5 	bl	800a8a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092da:	e008      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
      return;
 80092dc:	bf00      	nop
 80092de:	e006      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
    return;
 80092e0:	bf00      	nop
 80092e2:	e004      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
      return;
 80092e4:	bf00      	nop
 80092e6:	e002      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
      return;
 80092e8:	bf00      	nop
 80092ea:	e000      	b.n	80092ee <HAL_UART_IRQHandler+0x76a>
    return;
 80092ec:	bf00      	nop
  }
}
 80092ee:	37e8      	adds	r7, #232	; 0xe8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}
 80092f4:	effffffe 	.word	0xeffffffe

080092f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b083      	sub	sp, #12
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009314:	bf00      	nop
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009328:	bf00      	nop
 800932a:	370c      	adds	r7, #12
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	460b      	mov	r3, r1
 800933e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800934c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009350:	b092      	sub	sp, #72	; 0x48
 8009352:	af00      	add	r7, sp, #0
 8009354:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	431a      	orrs	r2, r3
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	431a      	orrs	r2, r3
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	69db      	ldr	r3, [r3, #28]
 8009370:	4313      	orrs	r3, r2
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	4bbe      	ldr	r3, [pc, #760]	; (8009674 <UART_SetConfig+0x328>)
 800937c:	4013      	ands	r3, r2
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009384:	430b      	orrs	r3, r1
 8009386:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	68da      	ldr	r2, [r3, #12]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	699b      	ldr	r3, [r3, #24]
 80093a2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4ab3      	ldr	r2, [pc, #716]	; (8009678 <UART_SetConfig+0x32c>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d004      	beq.n	80093b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093b4:	4313      	orrs	r3, r2
 80093b6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	689a      	ldr	r2, [r3, #8]
 80093be:	4baf      	ldr	r3, [pc, #700]	; (800967c <UART_SetConfig+0x330>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	6812      	ldr	r2, [r2, #0]
 80093c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80093c8:	430b      	orrs	r3, r1
 80093ca:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	f023 010f 	bic.w	r1, r3, #15
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	430a      	orrs	r2, r1
 80093e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4aa6      	ldr	r2, [pc, #664]	; (8009680 <UART_SetConfig+0x334>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d177      	bne.n	80094dc <UART_SetConfig+0x190>
 80093ec:	4ba5      	ldr	r3, [pc, #660]	; (8009684 <UART_SetConfig+0x338>)
 80093ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093f4:	2b28      	cmp	r3, #40	; 0x28
 80093f6:	d86d      	bhi.n	80094d4 <UART_SetConfig+0x188>
 80093f8:	a201      	add	r2, pc, #4	; (adr r2, 8009400 <UART_SetConfig+0xb4>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	080094a5 	.word	0x080094a5
 8009404:	080094d5 	.word	0x080094d5
 8009408:	080094d5 	.word	0x080094d5
 800940c:	080094d5 	.word	0x080094d5
 8009410:	080094d5 	.word	0x080094d5
 8009414:	080094d5 	.word	0x080094d5
 8009418:	080094d5 	.word	0x080094d5
 800941c:	080094d5 	.word	0x080094d5
 8009420:	080094ad 	.word	0x080094ad
 8009424:	080094d5 	.word	0x080094d5
 8009428:	080094d5 	.word	0x080094d5
 800942c:	080094d5 	.word	0x080094d5
 8009430:	080094d5 	.word	0x080094d5
 8009434:	080094d5 	.word	0x080094d5
 8009438:	080094d5 	.word	0x080094d5
 800943c:	080094d5 	.word	0x080094d5
 8009440:	080094b5 	.word	0x080094b5
 8009444:	080094d5 	.word	0x080094d5
 8009448:	080094d5 	.word	0x080094d5
 800944c:	080094d5 	.word	0x080094d5
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094d5 	.word	0x080094d5
 8009458:	080094d5 	.word	0x080094d5
 800945c:	080094d5 	.word	0x080094d5
 8009460:	080094bd 	.word	0x080094bd
 8009464:	080094d5 	.word	0x080094d5
 8009468:	080094d5 	.word	0x080094d5
 800946c:	080094d5 	.word	0x080094d5
 8009470:	080094d5 	.word	0x080094d5
 8009474:	080094d5 	.word	0x080094d5
 8009478:	080094d5 	.word	0x080094d5
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094c5 	.word	0x080094c5
 8009484:	080094d5 	.word	0x080094d5
 8009488:	080094d5 	.word	0x080094d5
 800948c:	080094d5 	.word	0x080094d5
 8009490:	080094d5 	.word	0x080094d5
 8009494:	080094d5 	.word	0x080094d5
 8009498:	080094d5 	.word	0x080094d5
 800949c:	080094d5 	.word	0x080094d5
 80094a0:	080094cd 	.word	0x080094cd
 80094a4:	2301      	movs	r3, #1
 80094a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094aa:	e326      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094ac:	2304      	movs	r3, #4
 80094ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094b2:	e322      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094b4:	2308      	movs	r3, #8
 80094b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ba:	e31e      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094bc:	2310      	movs	r3, #16
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094c2:	e31a      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094c4:	2320      	movs	r3, #32
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ca:	e316      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094cc:	2340      	movs	r3, #64	; 0x40
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e312      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094d4:	2380      	movs	r3, #128	; 0x80
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e30e      	b.n	8009afa <UART_SetConfig+0x7ae>
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4a69      	ldr	r2, [pc, #420]	; (8009688 <UART_SetConfig+0x33c>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d130      	bne.n	8009548 <UART_SetConfig+0x1fc>
 80094e6:	4b67      	ldr	r3, [pc, #412]	; (8009684 <UART_SetConfig+0x338>)
 80094e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094ea:	f003 0307 	and.w	r3, r3, #7
 80094ee:	2b05      	cmp	r3, #5
 80094f0:	d826      	bhi.n	8009540 <UART_SetConfig+0x1f4>
 80094f2:	a201      	add	r2, pc, #4	; (adr r2, 80094f8 <UART_SetConfig+0x1ac>)
 80094f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009519 	.word	0x08009519
 8009500:	08009521 	.word	0x08009521
 8009504:	08009529 	.word	0x08009529
 8009508:	08009531 	.word	0x08009531
 800950c:	08009539 	.word	0x08009539
 8009510:	2300      	movs	r3, #0
 8009512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009516:	e2f0      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009518:	2304      	movs	r3, #4
 800951a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800951e:	e2ec      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009520:	2308      	movs	r3, #8
 8009522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009526:	e2e8      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009528:	2310      	movs	r3, #16
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800952e:	e2e4      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009530:	2320      	movs	r3, #32
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009536:	e2e0      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e2dc      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009540:	2380      	movs	r3, #128	; 0x80
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009546:	e2d8      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a4f      	ldr	r2, [pc, #316]	; (800968c <UART_SetConfig+0x340>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d130      	bne.n	80095b4 <UART_SetConfig+0x268>
 8009552:	4b4c      	ldr	r3, [pc, #304]	; (8009684 <UART_SetConfig+0x338>)
 8009554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009556:	f003 0307 	and.w	r3, r3, #7
 800955a:	2b05      	cmp	r3, #5
 800955c:	d826      	bhi.n	80095ac <UART_SetConfig+0x260>
 800955e:	a201      	add	r2, pc, #4	; (adr r2, 8009564 <UART_SetConfig+0x218>)
 8009560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009564:	0800957d 	.word	0x0800957d
 8009568:	08009585 	.word	0x08009585
 800956c:	0800958d 	.word	0x0800958d
 8009570:	08009595 	.word	0x08009595
 8009574:	0800959d 	.word	0x0800959d
 8009578:	080095a5 	.word	0x080095a5
 800957c:	2300      	movs	r3, #0
 800957e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009582:	e2ba      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009584:	2304      	movs	r3, #4
 8009586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800958a:	e2b6      	b.n	8009afa <UART_SetConfig+0x7ae>
 800958c:	2308      	movs	r3, #8
 800958e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009592:	e2b2      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009594:	2310      	movs	r3, #16
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800959a:	e2ae      	b.n	8009afa <UART_SetConfig+0x7ae>
 800959c:	2320      	movs	r3, #32
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095a2:	e2aa      	b.n	8009afa <UART_SetConfig+0x7ae>
 80095a4:	2340      	movs	r3, #64	; 0x40
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e2a6      	b.n	8009afa <UART_SetConfig+0x7ae>
 80095ac:	2380      	movs	r3, #128	; 0x80
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b2:	e2a2      	b.n	8009afa <UART_SetConfig+0x7ae>
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a35      	ldr	r2, [pc, #212]	; (8009690 <UART_SetConfig+0x344>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d130      	bne.n	8009620 <UART_SetConfig+0x2d4>
 80095be:	4b31      	ldr	r3, [pc, #196]	; (8009684 <UART_SetConfig+0x338>)
 80095c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095c2:	f003 0307 	and.w	r3, r3, #7
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	d826      	bhi.n	8009618 <UART_SetConfig+0x2cc>
 80095ca:	a201      	add	r2, pc, #4	; (adr r2, 80095d0 <UART_SetConfig+0x284>)
 80095cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d0:	080095e9 	.word	0x080095e9
 80095d4:	080095f1 	.word	0x080095f1
 80095d8:	080095f9 	.word	0x080095f9
 80095dc:	08009601 	.word	0x08009601
 80095e0:	08009609 	.word	0x08009609
 80095e4:	08009611 	.word	0x08009611
 80095e8:	2300      	movs	r3, #0
 80095ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ee:	e284      	b.n	8009afa <UART_SetConfig+0x7ae>
 80095f0:	2304      	movs	r3, #4
 80095f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095f6:	e280      	b.n	8009afa <UART_SetConfig+0x7ae>
 80095f8:	2308      	movs	r3, #8
 80095fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095fe:	e27c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009600:	2310      	movs	r3, #16
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e278      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009608:	2320      	movs	r3, #32
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e274      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009610:	2340      	movs	r3, #64	; 0x40
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e270      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009618:	2380      	movs	r3, #128	; 0x80
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e26c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1b      	ldr	r2, [pc, #108]	; (8009694 <UART_SetConfig+0x348>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d142      	bne.n	80096b0 <UART_SetConfig+0x364>
 800962a:	4b16      	ldr	r3, [pc, #88]	; (8009684 <UART_SetConfig+0x338>)
 800962c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800962e:	f003 0307 	and.w	r3, r3, #7
 8009632:	2b05      	cmp	r3, #5
 8009634:	d838      	bhi.n	80096a8 <UART_SetConfig+0x35c>
 8009636:	a201      	add	r2, pc, #4	; (adr r2, 800963c <UART_SetConfig+0x2f0>)
 8009638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963c:	08009655 	.word	0x08009655
 8009640:	0800965d 	.word	0x0800965d
 8009644:	08009665 	.word	0x08009665
 8009648:	0800966d 	.word	0x0800966d
 800964c:	08009699 	.word	0x08009699
 8009650:	080096a1 	.word	0x080096a1
 8009654:	2300      	movs	r3, #0
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e24e      	b.n	8009afa <UART_SetConfig+0x7ae>
 800965c:	2304      	movs	r3, #4
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e24a      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009664:	2308      	movs	r3, #8
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e246      	b.n	8009afa <UART_SetConfig+0x7ae>
 800966c:	2310      	movs	r3, #16
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e242      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009674:	cfff69f3 	.word	0xcfff69f3
 8009678:	58000c00 	.word	0x58000c00
 800967c:	11fff4ff 	.word	0x11fff4ff
 8009680:	40011000 	.word	0x40011000
 8009684:	58024400 	.word	0x58024400
 8009688:	40004400 	.word	0x40004400
 800968c:	40004800 	.word	0x40004800
 8009690:	40004c00 	.word	0x40004c00
 8009694:	40005000 	.word	0x40005000
 8009698:	2320      	movs	r3, #32
 800969a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969e:	e22c      	b.n	8009afa <UART_SetConfig+0x7ae>
 80096a0:	2340      	movs	r3, #64	; 0x40
 80096a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a6:	e228      	b.n	8009afa <UART_SetConfig+0x7ae>
 80096a8:	2380      	movs	r3, #128	; 0x80
 80096aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ae:	e224      	b.n	8009afa <UART_SetConfig+0x7ae>
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4ab1      	ldr	r2, [pc, #708]	; (800997c <UART_SetConfig+0x630>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d176      	bne.n	80097a8 <UART_SetConfig+0x45c>
 80096ba:	4bb1      	ldr	r3, [pc, #708]	; (8009980 <UART_SetConfig+0x634>)
 80096bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80096c2:	2b28      	cmp	r3, #40	; 0x28
 80096c4:	d86c      	bhi.n	80097a0 <UART_SetConfig+0x454>
 80096c6:	a201      	add	r2, pc, #4	; (adr r2, 80096cc <UART_SetConfig+0x380>)
 80096c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096cc:	08009771 	.word	0x08009771
 80096d0:	080097a1 	.word	0x080097a1
 80096d4:	080097a1 	.word	0x080097a1
 80096d8:	080097a1 	.word	0x080097a1
 80096dc:	080097a1 	.word	0x080097a1
 80096e0:	080097a1 	.word	0x080097a1
 80096e4:	080097a1 	.word	0x080097a1
 80096e8:	080097a1 	.word	0x080097a1
 80096ec:	08009779 	.word	0x08009779
 80096f0:	080097a1 	.word	0x080097a1
 80096f4:	080097a1 	.word	0x080097a1
 80096f8:	080097a1 	.word	0x080097a1
 80096fc:	080097a1 	.word	0x080097a1
 8009700:	080097a1 	.word	0x080097a1
 8009704:	080097a1 	.word	0x080097a1
 8009708:	080097a1 	.word	0x080097a1
 800970c:	08009781 	.word	0x08009781
 8009710:	080097a1 	.word	0x080097a1
 8009714:	080097a1 	.word	0x080097a1
 8009718:	080097a1 	.word	0x080097a1
 800971c:	080097a1 	.word	0x080097a1
 8009720:	080097a1 	.word	0x080097a1
 8009724:	080097a1 	.word	0x080097a1
 8009728:	080097a1 	.word	0x080097a1
 800972c:	08009789 	.word	0x08009789
 8009730:	080097a1 	.word	0x080097a1
 8009734:	080097a1 	.word	0x080097a1
 8009738:	080097a1 	.word	0x080097a1
 800973c:	080097a1 	.word	0x080097a1
 8009740:	080097a1 	.word	0x080097a1
 8009744:	080097a1 	.word	0x080097a1
 8009748:	080097a1 	.word	0x080097a1
 800974c:	08009791 	.word	0x08009791
 8009750:	080097a1 	.word	0x080097a1
 8009754:	080097a1 	.word	0x080097a1
 8009758:	080097a1 	.word	0x080097a1
 800975c:	080097a1 	.word	0x080097a1
 8009760:	080097a1 	.word	0x080097a1
 8009764:	080097a1 	.word	0x080097a1
 8009768:	080097a1 	.word	0x080097a1
 800976c:	08009799 	.word	0x08009799
 8009770:	2301      	movs	r3, #1
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009776:	e1c0      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009778:	2304      	movs	r3, #4
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977e:	e1bc      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009780:	2308      	movs	r3, #8
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1b8      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009788:	2310      	movs	r3, #16
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800978e:	e1b4      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009790:	2320      	movs	r3, #32
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009796:	e1b0      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009798:	2340      	movs	r3, #64	; 0x40
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e1ac      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097a0:	2380      	movs	r3, #128	; 0x80
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e1a8      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a75      	ldr	r2, [pc, #468]	; (8009984 <UART_SetConfig+0x638>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d130      	bne.n	8009814 <UART_SetConfig+0x4c8>
 80097b2:	4b73      	ldr	r3, [pc, #460]	; (8009980 <UART_SetConfig+0x634>)
 80097b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097b6:	f003 0307 	and.w	r3, r3, #7
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	d826      	bhi.n	800980c <UART_SetConfig+0x4c0>
 80097be:	a201      	add	r2, pc, #4	; (adr r2, 80097c4 <UART_SetConfig+0x478>)
 80097c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097c4:	080097dd 	.word	0x080097dd
 80097c8:	080097e5 	.word	0x080097e5
 80097cc:	080097ed 	.word	0x080097ed
 80097d0:	080097f5 	.word	0x080097f5
 80097d4:	080097fd 	.word	0x080097fd
 80097d8:	08009805 	.word	0x08009805
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e18a      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097e4:	2304      	movs	r3, #4
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e186      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097ec:	2308      	movs	r3, #8
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e182      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097f4:	2310      	movs	r3, #16
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e17e      	b.n	8009afa <UART_SetConfig+0x7ae>
 80097fc:	2320      	movs	r3, #32
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e17a      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009804:	2340      	movs	r3, #64	; 0x40
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e176      	b.n	8009afa <UART_SetConfig+0x7ae>
 800980c:	2380      	movs	r3, #128	; 0x80
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e172      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a5b      	ldr	r2, [pc, #364]	; (8009988 <UART_SetConfig+0x63c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d130      	bne.n	8009880 <UART_SetConfig+0x534>
 800981e:	4b58      	ldr	r3, [pc, #352]	; (8009980 <UART_SetConfig+0x634>)
 8009820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009822:	f003 0307 	and.w	r3, r3, #7
 8009826:	2b05      	cmp	r3, #5
 8009828:	d826      	bhi.n	8009878 <UART_SetConfig+0x52c>
 800982a:	a201      	add	r2, pc, #4	; (adr r2, 8009830 <UART_SetConfig+0x4e4>)
 800982c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009830:	08009849 	.word	0x08009849
 8009834:	08009851 	.word	0x08009851
 8009838:	08009859 	.word	0x08009859
 800983c:	08009861 	.word	0x08009861
 8009840:	08009869 	.word	0x08009869
 8009844:	08009871 	.word	0x08009871
 8009848:	2300      	movs	r3, #0
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e154      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009850:	2304      	movs	r3, #4
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e150      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009858:	2308      	movs	r3, #8
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e14c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009860:	2310      	movs	r3, #16
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009866:	e148      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009868:	2320      	movs	r3, #32
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800986e:	e144      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009870:	2340      	movs	r3, #64	; 0x40
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e140      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009878:	2380      	movs	r3, #128	; 0x80
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987e:	e13c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a41      	ldr	r2, [pc, #260]	; (800998c <UART_SetConfig+0x640>)
 8009886:	4293      	cmp	r3, r2
 8009888:	f040 8082 	bne.w	8009990 <UART_SetConfig+0x644>
 800988c:	4b3c      	ldr	r3, [pc, #240]	; (8009980 <UART_SetConfig+0x634>)
 800988e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009890:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009894:	2b28      	cmp	r3, #40	; 0x28
 8009896:	d86d      	bhi.n	8009974 <UART_SetConfig+0x628>
 8009898:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <UART_SetConfig+0x554>)
 800989a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989e:	bf00      	nop
 80098a0:	08009945 	.word	0x08009945
 80098a4:	08009975 	.word	0x08009975
 80098a8:	08009975 	.word	0x08009975
 80098ac:	08009975 	.word	0x08009975
 80098b0:	08009975 	.word	0x08009975
 80098b4:	08009975 	.word	0x08009975
 80098b8:	08009975 	.word	0x08009975
 80098bc:	08009975 	.word	0x08009975
 80098c0:	0800994d 	.word	0x0800994d
 80098c4:	08009975 	.word	0x08009975
 80098c8:	08009975 	.word	0x08009975
 80098cc:	08009975 	.word	0x08009975
 80098d0:	08009975 	.word	0x08009975
 80098d4:	08009975 	.word	0x08009975
 80098d8:	08009975 	.word	0x08009975
 80098dc:	08009975 	.word	0x08009975
 80098e0:	08009955 	.word	0x08009955
 80098e4:	08009975 	.word	0x08009975
 80098e8:	08009975 	.word	0x08009975
 80098ec:	08009975 	.word	0x08009975
 80098f0:	08009975 	.word	0x08009975
 80098f4:	08009975 	.word	0x08009975
 80098f8:	08009975 	.word	0x08009975
 80098fc:	08009975 	.word	0x08009975
 8009900:	0800995d 	.word	0x0800995d
 8009904:	08009975 	.word	0x08009975
 8009908:	08009975 	.word	0x08009975
 800990c:	08009975 	.word	0x08009975
 8009910:	08009975 	.word	0x08009975
 8009914:	08009975 	.word	0x08009975
 8009918:	08009975 	.word	0x08009975
 800991c:	08009975 	.word	0x08009975
 8009920:	08009965 	.word	0x08009965
 8009924:	08009975 	.word	0x08009975
 8009928:	08009975 	.word	0x08009975
 800992c:	08009975 	.word	0x08009975
 8009930:	08009975 	.word	0x08009975
 8009934:	08009975 	.word	0x08009975
 8009938:	08009975 	.word	0x08009975
 800993c:	08009975 	.word	0x08009975
 8009940:	0800996d 	.word	0x0800996d
 8009944:	2301      	movs	r3, #1
 8009946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994a:	e0d6      	b.n	8009afa <UART_SetConfig+0x7ae>
 800994c:	2304      	movs	r3, #4
 800994e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009952:	e0d2      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009954:	2308      	movs	r3, #8
 8009956:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995a:	e0ce      	b.n	8009afa <UART_SetConfig+0x7ae>
 800995c:	2310      	movs	r3, #16
 800995e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009962:	e0ca      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009964:	2320      	movs	r3, #32
 8009966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996a:	e0c6      	b.n	8009afa <UART_SetConfig+0x7ae>
 800996c:	2340      	movs	r3, #64	; 0x40
 800996e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009972:	e0c2      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009974:	2380      	movs	r3, #128	; 0x80
 8009976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800997a:	e0be      	b.n	8009afa <UART_SetConfig+0x7ae>
 800997c:	40011400 	.word	0x40011400
 8009980:	58024400 	.word	0x58024400
 8009984:	40007800 	.word	0x40007800
 8009988:	40007c00 	.word	0x40007c00
 800998c:	40011800 	.word	0x40011800
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4aad      	ldr	r2, [pc, #692]	; (8009c4c <UART_SetConfig+0x900>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d176      	bne.n	8009a88 <UART_SetConfig+0x73c>
 800999a:	4bad      	ldr	r3, [pc, #692]	; (8009c50 <UART_SetConfig+0x904>)
 800999c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800999e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a2:	2b28      	cmp	r3, #40	; 0x28
 80099a4:	d86c      	bhi.n	8009a80 <UART_SetConfig+0x734>
 80099a6:	a201      	add	r2, pc, #4	; (adr r2, 80099ac <UART_SetConfig+0x660>)
 80099a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ac:	08009a51 	.word	0x08009a51
 80099b0:	08009a81 	.word	0x08009a81
 80099b4:	08009a81 	.word	0x08009a81
 80099b8:	08009a81 	.word	0x08009a81
 80099bc:	08009a81 	.word	0x08009a81
 80099c0:	08009a81 	.word	0x08009a81
 80099c4:	08009a81 	.word	0x08009a81
 80099c8:	08009a81 	.word	0x08009a81
 80099cc:	08009a59 	.word	0x08009a59
 80099d0:	08009a81 	.word	0x08009a81
 80099d4:	08009a81 	.word	0x08009a81
 80099d8:	08009a81 	.word	0x08009a81
 80099dc:	08009a81 	.word	0x08009a81
 80099e0:	08009a81 	.word	0x08009a81
 80099e4:	08009a81 	.word	0x08009a81
 80099e8:	08009a81 	.word	0x08009a81
 80099ec:	08009a61 	.word	0x08009a61
 80099f0:	08009a81 	.word	0x08009a81
 80099f4:	08009a81 	.word	0x08009a81
 80099f8:	08009a81 	.word	0x08009a81
 80099fc:	08009a81 	.word	0x08009a81
 8009a00:	08009a81 	.word	0x08009a81
 8009a04:	08009a81 	.word	0x08009a81
 8009a08:	08009a81 	.word	0x08009a81
 8009a0c:	08009a69 	.word	0x08009a69
 8009a10:	08009a81 	.word	0x08009a81
 8009a14:	08009a81 	.word	0x08009a81
 8009a18:	08009a81 	.word	0x08009a81
 8009a1c:	08009a81 	.word	0x08009a81
 8009a20:	08009a81 	.word	0x08009a81
 8009a24:	08009a81 	.word	0x08009a81
 8009a28:	08009a81 	.word	0x08009a81
 8009a2c:	08009a71 	.word	0x08009a71
 8009a30:	08009a81 	.word	0x08009a81
 8009a34:	08009a81 	.word	0x08009a81
 8009a38:	08009a81 	.word	0x08009a81
 8009a3c:	08009a81 	.word	0x08009a81
 8009a40:	08009a81 	.word	0x08009a81
 8009a44:	08009a81 	.word	0x08009a81
 8009a48:	08009a81 	.word	0x08009a81
 8009a4c:	08009a79 	.word	0x08009a79
 8009a50:	2301      	movs	r3, #1
 8009a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a56:	e050      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a58:	2304      	movs	r3, #4
 8009a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a5e:	e04c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a60:	2308      	movs	r3, #8
 8009a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a66:	e048      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a68:	2310      	movs	r3, #16
 8009a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a6e:	e044      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a70:	2320      	movs	r3, #32
 8009a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a76:	e040      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a78:	2340      	movs	r3, #64	; 0x40
 8009a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a7e:	e03c      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a80:	2380      	movs	r3, #128	; 0x80
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a86:	e038      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a71      	ldr	r2, [pc, #452]	; (8009c54 <UART_SetConfig+0x908>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d130      	bne.n	8009af4 <UART_SetConfig+0x7a8>
 8009a92:	4b6f      	ldr	r3, [pc, #444]	; (8009c50 <UART_SetConfig+0x904>)
 8009a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a96:	f003 0307 	and.w	r3, r3, #7
 8009a9a:	2b05      	cmp	r3, #5
 8009a9c:	d826      	bhi.n	8009aec <UART_SetConfig+0x7a0>
 8009a9e:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <UART_SetConfig+0x758>)
 8009aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa4:	08009abd 	.word	0x08009abd
 8009aa8:	08009ac5 	.word	0x08009ac5
 8009aac:	08009acd 	.word	0x08009acd
 8009ab0:	08009ad5 	.word	0x08009ad5
 8009ab4:	08009add 	.word	0x08009add
 8009ab8:	08009ae5 	.word	0x08009ae5
 8009abc:	2302      	movs	r3, #2
 8009abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac2:	e01a      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009ac4:	2304      	movs	r3, #4
 8009ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aca:	e016      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009acc:	2308      	movs	r3, #8
 8009ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad2:	e012      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009ad4:	2310      	movs	r3, #16
 8009ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ada:	e00e      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009adc:	2320      	movs	r3, #32
 8009ade:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ae2:	e00a      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009ae4:	2340      	movs	r3, #64	; 0x40
 8009ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aea:	e006      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009aec:	2380      	movs	r3, #128	; 0x80
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e002      	b.n	8009afa <UART_SetConfig+0x7ae>
 8009af4:	2380      	movs	r3, #128	; 0x80
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a55      	ldr	r2, [pc, #340]	; (8009c54 <UART_SetConfig+0x908>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	f040 80f8 	bne.w	8009cf6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b0a:	2b20      	cmp	r3, #32
 8009b0c:	dc46      	bgt.n	8009b9c <UART_SetConfig+0x850>
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	db75      	blt.n	8009bfe <UART_SetConfig+0x8b2>
 8009b12:	3b02      	subs	r3, #2
 8009b14:	2b1e      	cmp	r3, #30
 8009b16:	d872      	bhi.n	8009bfe <UART_SetConfig+0x8b2>
 8009b18:	a201      	add	r2, pc, #4	; (adr r2, 8009b20 <UART_SetConfig+0x7d4>)
 8009b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b1e:	bf00      	nop
 8009b20:	08009ba3 	.word	0x08009ba3
 8009b24:	08009bff 	.word	0x08009bff
 8009b28:	08009bab 	.word	0x08009bab
 8009b2c:	08009bff 	.word	0x08009bff
 8009b30:	08009bff 	.word	0x08009bff
 8009b34:	08009bff 	.word	0x08009bff
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009bff 	.word	0x08009bff
 8009b40:	08009bff 	.word	0x08009bff
 8009b44:	08009bff 	.word	0x08009bff
 8009b48:	08009bff 	.word	0x08009bff
 8009b4c:	08009bff 	.word	0x08009bff
 8009b50:	08009bff 	.word	0x08009bff
 8009b54:	08009bff 	.word	0x08009bff
 8009b58:	08009bcb 	.word	0x08009bcb
 8009b5c:	08009bff 	.word	0x08009bff
 8009b60:	08009bff 	.word	0x08009bff
 8009b64:	08009bff 	.word	0x08009bff
 8009b68:	08009bff 	.word	0x08009bff
 8009b6c:	08009bff 	.word	0x08009bff
 8009b70:	08009bff 	.word	0x08009bff
 8009b74:	08009bff 	.word	0x08009bff
 8009b78:	08009bff 	.word	0x08009bff
 8009b7c:	08009bff 	.word	0x08009bff
 8009b80:	08009bff 	.word	0x08009bff
 8009b84:	08009bff 	.word	0x08009bff
 8009b88:	08009bff 	.word	0x08009bff
 8009b8c:	08009bff 	.word	0x08009bff
 8009b90:	08009bff 	.word	0x08009bff
 8009b94:	08009bff 	.word	0x08009bff
 8009b98:	08009bf1 	.word	0x08009bf1
 8009b9c:	2b40      	cmp	r3, #64	; 0x40
 8009b9e:	d02a      	beq.n	8009bf6 <UART_SetConfig+0x8aa>
 8009ba0:	e02d      	b.n	8009bfe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009ba2:	f7fd fbcb 	bl	800733c <HAL_RCCEx_GetD3PCLK1Freq>
 8009ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ba8:	e02f      	b.n	8009c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fd fbda 	bl	8007368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb8:	e027      	b.n	8009c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bba:	f107 0318 	add.w	r3, r7, #24
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fd fd26 	bl	8007610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bc8:	e01f      	b.n	8009c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bca:	4b21      	ldr	r3, [pc, #132]	; (8009c50 <UART_SetConfig+0x904>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d009      	beq.n	8009bea <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bd6:	4b1e      	ldr	r3, [pc, #120]	; (8009c50 <UART_SetConfig+0x904>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	08db      	lsrs	r3, r3, #3
 8009bdc:	f003 0303 	and.w	r3, r3, #3
 8009be0:	4a1d      	ldr	r2, [pc, #116]	; (8009c58 <UART_SetConfig+0x90c>)
 8009be2:	fa22 f303 	lsr.w	r3, r2, r3
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009be8:	e00f      	b.n	8009c0a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009bea:	4b1b      	ldr	r3, [pc, #108]	; (8009c58 <UART_SetConfig+0x90c>)
 8009bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bee:	e00c      	b.n	8009c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bf0:	4b1a      	ldr	r3, [pc, #104]	; (8009c5c <UART_SetConfig+0x910>)
 8009bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf4:	e009      	b.n	8009c0a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bfc:	e005      	b.n	8009c0a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	f000 81ee 	beq.w	8009fee <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c16:	4a12      	ldr	r2, [pc, #72]	; (8009c60 <UART_SetConfig+0x914>)
 8009c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c24:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	685a      	ldr	r2, [r3, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	005b      	lsls	r3, r3, #1
 8009c2e:	4413      	add	r3, r2
 8009c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d305      	bcc.n	8009c42 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d910      	bls.n	8009c64 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009c42:	2301      	movs	r3, #1
 8009c44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c48:	e1d1      	b.n	8009fee <UART_SetConfig+0xca2>
 8009c4a:	bf00      	nop
 8009c4c:	40011c00 	.word	0x40011c00
 8009c50:	58024400 	.word	0x58024400
 8009c54:	58000c00 	.word	0x58000c00
 8009c58:	03d09000 	.word	0x03d09000
 8009c5c:	003d0900 	.word	0x003d0900
 8009c60:	0800b980 	.word	0x0800b980
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c66:	2200      	movs	r2, #0
 8009c68:	60bb      	str	r3, [r7, #8]
 8009c6a:	60fa      	str	r2, [r7, #12]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	4ac0      	ldr	r2, [pc, #768]	; (8009f74 <UART_SetConfig+0xc28>)
 8009c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2200      	movs	r2, #0
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	607a      	str	r2, [r7, #4]
 8009c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c86:	f7f6 fb93 	bl	80003b0 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	020b      	lsls	r3, r1, #8
 8009c9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ca0:	0202      	lsls	r2, r0, #8
 8009ca2:	6979      	ldr	r1, [r7, #20]
 8009ca4:	6849      	ldr	r1, [r1, #4]
 8009ca6:	0849      	lsrs	r1, r1, #1
 8009ca8:	2000      	movs	r0, #0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4605      	mov	r5, r0
 8009cae:	eb12 0804 	adds.w	r8, r2, r4
 8009cb2:	eb43 0905 	adc.w	r9, r3, r5
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	469a      	mov	sl, r3
 8009cbe:	4693      	mov	fp, r2
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	465b      	mov	r3, fp
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	f7f6 fb72 	bl	80003b0 <__aeabi_uldivmod>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cda:	d308      	bcc.n	8009cee <UART_SetConfig+0x9a2>
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce2:	d204      	bcs.n	8009cee <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cea:	60da      	str	r2, [r3, #12]
 8009cec:	e17f      	b.n	8009fee <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009cf4:	e17b      	b.n	8009fee <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfe:	f040 80bd 	bne.w	8009e7c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009d02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	dc48      	bgt.n	8009d9c <UART_SetConfig+0xa50>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	db7b      	blt.n	8009e06 <UART_SetConfig+0xaba>
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d879      	bhi.n	8009e06 <UART_SetConfig+0xaba>
 8009d12:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x9cc>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009da3 	.word	0x08009da3
 8009d1c:	08009dab 	.word	0x08009dab
 8009d20:	08009e07 	.word	0x08009e07
 8009d24:	08009e07 	.word	0x08009e07
 8009d28:	08009db3 	.word	0x08009db3
 8009d2c:	08009e07 	.word	0x08009e07
 8009d30:	08009e07 	.word	0x08009e07
 8009d34:	08009e07 	.word	0x08009e07
 8009d38:	08009dc3 	.word	0x08009dc3
 8009d3c:	08009e07 	.word	0x08009e07
 8009d40:	08009e07 	.word	0x08009e07
 8009d44:	08009e07 	.word	0x08009e07
 8009d48:	08009e07 	.word	0x08009e07
 8009d4c:	08009e07 	.word	0x08009e07
 8009d50:	08009e07 	.word	0x08009e07
 8009d54:	08009e07 	.word	0x08009e07
 8009d58:	08009dd3 	.word	0x08009dd3
 8009d5c:	08009e07 	.word	0x08009e07
 8009d60:	08009e07 	.word	0x08009e07
 8009d64:	08009e07 	.word	0x08009e07
 8009d68:	08009e07 	.word	0x08009e07
 8009d6c:	08009e07 	.word	0x08009e07
 8009d70:	08009e07 	.word	0x08009e07
 8009d74:	08009e07 	.word	0x08009e07
 8009d78:	08009e07 	.word	0x08009e07
 8009d7c:	08009e07 	.word	0x08009e07
 8009d80:	08009e07 	.word	0x08009e07
 8009d84:	08009e07 	.word	0x08009e07
 8009d88:	08009e07 	.word	0x08009e07
 8009d8c:	08009e07 	.word	0x08009e07
 8009d90:	08009e07 	.word	0x08009e07
 8009d94:	08009e07 	.word	0x08009e07
 8009d98:	08009df9 	.word	0x08009df9
 8009d9c:	2b40      	cmp	r3, #64	; 0x40
 8009d9e:	d02e      	beq.n	8009dfe <UART_SetConfig+0xab2>
 8009da0:	e031      	b.n	8009e06 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009da2:	f7fc f8ff 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8009da6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009da8:	e033      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009daa:	f7fc f911 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8009dae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009db0:	e02f      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fd fad6 	bl	8007368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dc0:	e027      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dc2:	f107 0318 	add.w	r3, r7, #24
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7fd fc22 	bl	8007610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dcc:	69fb      	ldr	r3, [r7, #28]
 8009dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd0:	e01f      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009dd2:	4b69      	ldr	r3, [pc, #420]	; (8009f78 <UART_SetConfig+0xc2c>)
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f003 0320 	and.w	r3, r3, #32
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d009      	beq.n	8009df2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dde:	4b66      	ldr	r3, [pc, #408]	; (8009f78 <UART_SetConfig+0xc2c>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	08db      	lsrs	r3, r3, #3
 8009de4:	f003 0303 	and.w	r3, r3, #3
 8009de8:	4a64      	ldr	r2, [pc, #400]	; (8009f7c <UART_SetConfig+0xc30>)
 8009dea:	fa22 f303 	lsr.w	r3, r2, r3
 8009dee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009df0:	e00f      	b.n	8009e12 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009df2:	4b62      	ldr	r3, [pc, #392]	; (8009f7c <UART_SetConfig+0xc30>)
 8009df4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df6:	e00c      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009df8:	4b61      	ldr	r3, [pc, #388]	; (8009f80 <UART_SetConfig+0xc34>)
 8009dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfc:	e009      	b.n	8009e12 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e04:	e005      	b.n	8009e12 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009e06:	2300      	movs	r3, #0
 8009e08:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	f000 80ea 	beq.w	8009fee <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	4a55      	ldr	r2, [pc, #340]	; (8009f74 <UART_SetConfig+0xc28>)
 8009e20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e24:	461a      	mov	r2, r3
 8009e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e28:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2c:	005a      	lsls	r2, r3, #1
 8009e2e:	697b      	ldr	r3, [r7, #20]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	085b      	lsrs	r3, r3, #1
 8009e34:	441a      	add	r2, r3
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e42:	2b0f      	cmp	r3, #15
 8009e44:	d916      	bls.n	8009e74 <UART_SetConfig+0xb28>
 8009e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e4c:	d212      	bcs.n	8009e74 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f023 030f 	bic.w	r3, r3, #15
 8009e56:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e5a:	085b      	lsrs	r3, r3, #1
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	f003 0307 	and.w	r3, r3, #7
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e66:	4313      	orrs	r3, r2
 8009e68:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009e70:	60da      	str	r2, [r3, #12]
 8009e72:	e0bc      	b.n	8009fee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e7a:	e0b8      	b.n	8009fee <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e7c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e80:	2b20      	cmp	r3, #32
 8009e82:	dc4b      	bgt.n	8009f1c <UART_SetConfig+0xbd0>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	f2c0 8087 	blt.w	8009f98 <UART_SetConfig+0xc4c>
 8009e8a:	2b20      	cmp	r3, #32
 8009e8c:	f200 8084 	bhi.w	8009f98 <UART_SetConfig+0xc4c>
 8009e90:	a201      	add	r2, pc, #4	; (adr r2, 8009e98 <UART_SetConfig+0xb4c>)
 8009e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e96:	bf00      	nop
 8009e98:	08009f23 	.word	0x08009f23
 8009e9c:	08009f2b 	.word	0x08009f2b
 8009ea0:	08009f99 	.word	0x08009f99
 8009ea4:	08009f99 	.word	0x08009f99
 8009ea8:	08009f33 	.word	0x08009f33
 8009eac:	08009f99 	.word	0x08009f99
 8009eb0:	08009f99 	.word	0x08009f99
 8009eb4:	08009f99 	.word	0x08009f99
 8009eb8:	08009f43 	.word	0x08009f43
 8009ebc:	08009f99 	.word	0x08009f99
 8009ec0:	08009f99 	.word	0x08009f99
 8009ec4:	08009f99 	.word	0x08009f99
 8009ec8:	08009f99 	.word	0x08009f99
 8009ecc:	08009f99 	.word	0x08009f99
 8009ed0:	08009f99 	.word	0x08009f99
 8009ed4:	08009f99 	.word	0x08009f99
 8009ed8:	08009f53 	.word	0x08009f53
 8009edc:	08009f99 	.word	0x08009f99
 8009ee0:	08009f99 	.word	0x08009f99
 8009ee4:	08009f99 	.word	0x08009f99
 8009ee8:	08009f99 	.word	0x08009f99
 8009eec:	08009f99 	.word	0x08009f99
 8009ef0:	08009f99 	.word	0x08009f99
 8009ef4:	08009f99 	.word	0x08009f99
 8009ef8:	08009f99 	.word	0x08009f99
 8009efc:	08009f99 	.word	0x08009f99
 8009f00:	08009f99 	.word	0x08009f99
 8009f04:	08009f99 	.word	0x08009f99
 8009f08:	08009f99 	.word	0x08009f99
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009f99 	.word	0x08009f99
 8009f14:	08009f99 	.word	0x08009f99
 8009f18:	08009f8b 	.word	0x08009f8b
 8009f1c:	2b40      	cmp	r3, #64	; 0x40
 8009f1e:	d037      	beq.n	8009f90 <UART_SetConfig+0xc44>
 8009f20:	e03a      	b.n	8009f98 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f22:	f7fc f83f 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8009f26:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f28:	e03c      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f2a:	f7fc f851 	bl	8005fd0 <HAL_RCC_GetPCLK2Freq>
 8009f2e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f30:	e038      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f7fd fa16 	bl	8007368 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f40:	e030      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f42:	f107 0318 	add.w	r3, r7, #24
 8009f46:	4618      	mov	r0, r3
 8009f48:	f7fd fb62 	bl	8007610 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f50:	e028      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <UART_SetConfig+0xc2c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f003 0320 	and.w	r3, r3, #32
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d012      	beq.n	8009f84 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f5e:	4b06      	ldr	r3, [pc, #24]	; (8009f78 <UART_SetConfig+0xc2c>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	08db      	lsrs	r3, r3, #3
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	4a04      	ldr	r2, [pc, #16]	; (8009f7c <UART_SetConfig+0xc30>)
 8009f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f70:	e018      	b.n	8009fa4 <UART_SetConfig+0xc58>
 8009f72:	bf00      	nop
 8009f74:	0800b980 	.word	0x0800b980
 8009f78:	58024400 	.word	0x58024400
 8009f7c:	03d09000 	.word	0x03d09000
 8009f80:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8009f84:	4b24      	ldr	r3, [pc, #144]	; (800a018 <UART_SetConfig+0xccc>)
 8009f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f88:	e00c      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f8a:	4b24      	ldr	r3, [pc, #144]	; (800a01c <UART_SetConfig+0xcd0>)
 8009f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f8e:	e009      	b.n	8009fa4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f96:	e005      	b.n	8009fa4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8009fa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d021      	beq.n	8009fee <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fae:	4a1c      	ldr	r2, [pc, #112]	; (800a020 <UART_SetConfig+0xcd4>)
 8009fb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fb8:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	441a      	add	r2, r3
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fcc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd0:	2b0f      	cmp	r3, #15
 8009fd2:	d909      	bls.n	8009fe8 <UART_SetConfig+0xc9c>
 8009fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fda:	d205      	bcs.n	8009fe8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fde:	b29a      	uxth	r2, r3
 8009fe0:	697b      	ldr	r3, [r7, #20]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60da      	str	r2, [r3, #12]
 8009fe6:	e002      	b.n	8009fee <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	2200      	movs	r2, #0
 800a002:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2200      	movs	r2, #0
 800a008:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a00a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3748      	adds	r7, #72	; 0x48
 800a012:	46bd      	mov	sp, r7
 800a014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a018:	03d09000 	.word	0x03d09000
 800a01c:	003d0900 	.word	0x003d0900
 800a020:	0800b980 	.word	0x0800b980

0800a024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a030:	f003 0301 	and.w	r3, r3, #1
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a052:	f003 0302 	and.w	r3, r3, #2
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	f003 0304 	and.w	r3, r3, #4
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a096:	f003 0308 	and.w	r3, r3, #8
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00a      	beq.n	800a0b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	685b      	ldr	r3, [r3, #4]
 800a0a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0310 	and.w	r3, r3, #16
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	f003 0320 	and.w	r3, r3, #32
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a100:	2b00      	cmp	r3, #0
 800a102:	d01a      	beq.n	800a13a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a11e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a122:	d10a      	bne.n	800a13a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	430a      	orrs	r2, r1
 800a138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a13e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a142:	2b00      	cmp	r3, #0
 800a144:	d00a      	beq.n	800a15c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	430a      	orrs	r2, r1
 800a15a:	605a      	str	r2, [r3, #4]
  }
}
 800a15c:	bf00      	nop
 800a15e:	370c      	adds	r7, #12
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b098      	sub	sp, #96	; 0x60
 800a16c:	af02      	add	r7, sp, #8
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a178:	f7f7 fa52 	bl	8001620 <HAL_GetTick>
 800a17c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f003 0308 	and.w	r3, r3, #8
 800a188:	2b08      	cmp	r3, #8
 800a18a:	d12f      	bne.n	800a1ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a18c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a190:	9300      	str	r3, [sp, #0]
 800a192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a194:	2200      	movs	r2, #0
 800a196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f88e 	bl	800a2bc <UART_WaitOnFlagUntilTimeout>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d022      	beq.n	800a1ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ae:	e853 3f00 	ldrex	r3, [r3]
 800a1b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1ba:	653b      	str	r3, [r7, #80]	; 0x50
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	461a      	mov	r2, r3
 800a1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1cc:	e841 2300 	strex	r3, r2, [r1]
 800a1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1e6      	bne.n	800a1a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	e063      	b.n	800a2b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0304 	and.w	r3, r3, #4
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d149      	bne.n	800a28e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a202:	2200      	movs	r2, #0
 800a204:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 f857 	bl	800a2bc <UART_WaitOnFlagUntilTimeout>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d03c      	beq.n	800a28e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21c:	e853 3f00 	ldrex	r3, [r3]
 800a220:	623b      	str	r3, [r7, #32]
   return(result);
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	461a      	mov	r2, r3
 800a230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a232:	633b      	str	r3, [r7, #48]	; 0x30
 800a234:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a23a:	e841 2300 	strex	r3, r2, [r1]
 800a23e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1e6      	bne.n	800a214 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3308      	adds	r3, #8
 800a24c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	e853 3f00 	ldrex	r3, [r3]
 800a254:	60fb      	str	r3, [r7, #12]
   return(result);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f023 0301 	bic.w	r3, r3, #1
 800a25c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	3308      	adds	r3, #8
 800a264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a266:	61fa      	str	r2, [r7, #28]
 800a268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a26a:	69b9      	ldr	r1, [r7, #24]
 800a26c:	69fa      	ldr	r2, [r7, #28]
 800a26e:	e841 2300 	strex	r3, r2, [r1]
 800a272:	617b      	str	r3, [r7, #20]
   return(result);
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d1e5      	bne.n	800a246 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e012      	b.n	800a2b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2220      	movs	r2, #32
 800a292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2220      	movs	r2, #32
 800a29a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3758      	adds	r7, #88	; 0x58
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	603b      	str	r3, [r7, #0]
 800a2c8:	4613      	mov	r3, r2
 800a2ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2cc:	e049      	b.n	800a362 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d4:	d045      	beq.n	800a362 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2d6:	f7f7 f9a3 	bl	8001620 <HAL_GetTick>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	1ad3      	subs	r3, r2, r3
 800a2e0:	69ba      	ldr	r2, [r7, #24]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d302      	bcc.n	800a2ec <UART_WaitOnFlagUntilTimeout+0x30>
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d101      	bne.n	800a2f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a2ec:	2303      	movs	r3, #3
 800a2ee:	e048      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 0304 	and.w	r3, r3, #4
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d031      	beq.n	800a362 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	f003 0308 	and.w	r3, r3, #8
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d110      	bne.n	800a32e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	2208      	movs	r2, #8
 800a312:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f921 	bl	800a55c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2208      	movs	r2, #8
 800a31e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e029      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	69db      	ldr	r3, [r3, #28]
 800a334:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a338:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a33c:	d111      	bne.n	800a362 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a346:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f000 f907 	bl	800a55c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2220      	movs	r2, #32
 800a352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e00f      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	69da      	ldr	r2, [r3, #28]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	4013      	ands	r3, r2
 800a36c:	68ba      	ldr	r2, [r7, #8]
 800a36e:	429a      	cmp	r2, r3
 800a370:	bf0c      	ite	eq
 800a372:	2301      	moveq	r3, #1
 800a374:	2300      	movne	r3, #0
 800a376:	b2db      	uxtb	r3, r3
 800a378:	461a      	mov	r2, r3
 800a37a:	79fb      	ldrb	r3, [r7, #7]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d0a6      	beq.n	800a2ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b096      	sub	sp, #88	; 0x58
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2222      	movs	r2, #34	; 0x22
 800a3b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d02d      	beq.n	800a41e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3c8:	4a40      	ldr	r2, [pc, #256]	; (800a4cc <UART_Start_Receive_DMA+0x140>)
 800a3ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3d2:	4a3f      	ldr	r2, [pc, #252]	; (800a4d0 <UART_Start_Receive_DMA+0x144>)
 800a3d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3dc:	4a3d      	ldr	r2, [pc, #244]	; (800a4d4 <UART_Start_Receive_DMA+0x148>)
 800a3de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	3324      	adds	r3, #36	; 0x24
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3fc:	461a      	mov	r2, r3
 800a3fe:	88fb      	ldrh	r3, [r7, #6]
 800a400:	f7f7 fd96 	bl	8001f30 <HAL_DMA_Start_IT>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d009      	beq.n	800a41e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2210      	movs	r2, #16
 800a40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2220      	movs	r2, #32
 800a416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a41a:	2301      	movs	r3, #1
 800a41c:	e051      	b.n	800a4c2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d018      	beq.n	800a458 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a42c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a42e:	e853 3f00 	ldrex	r3, [r3]
 800a432:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a43a:	657b      	str	r3, [r7, #84]	; 0x54
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	461a      	mov	r2, r3
 800a442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a444:	64bb      	str	r3, [r7, #72]	; 0x48
 800a446:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a448:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a44a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a44c:	e841 2300 	strex	r3, r2, [r1]
 800a450:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1e6      	bne.n	800a426 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3308      	adds	r3, #8
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46a:	f043 0301 	orr.w	r3, r3, #1
 800a46e:	653b      	str	r3, [r7, #80]	; 0x50
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	3308      	adds	r3, #8
 800a476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a478:	637a      	str	r2, [r7, #52]	; 0x34
 800a47a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a47e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e5      	bne.n	800a458 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	613b      	str	r3, [r7, #16]
   return(result);
 800a49c:	693b      	ldr	r3, [r7, #16]
 800a49e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ac:	623a      	str	r2, [r7, #32]
 800a4ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	69f9      	ldr	r1, [r7, #28]
 800a4b2:	6a3a      	ldr	r2, [r7, #32]
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e5      	bne.n	800a48c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3758      	adds	r7, #88	; 0x58
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	bf00      	nop
 800a4cc:	0800a629 	.word	0x0800a629
 800a4d0:	0800a751 	.word	0x0800a751
 800a4d4:	0800a78f 	.word	0x0800a78f

0800a4d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b08f      	sub	sp, #60	; 0x3c
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	e853 3f00 	ldrex	r3, [r3]
 800a4ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4ee:	69fb      	ldr	r3, [r7, #28]
 800a4f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a500:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a502:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a504:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a506:	e841 2300 	strex	r3, r2, [r1]
 800a50a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d1e6      	bne.n	800a4e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	3308      	adds	r3, #8
 800a518:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	e853 3f00 	ldrex	r3, [r3]
 800a520:	60bb      	str	r3, [r7, #8]
   return(result);
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a528:	633b      	str	r3, [r7, #48]	; 0x30
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a532:	61ba      	str	r2, [r7, #24]
 800a534:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a536:	6979      	ldr	r1, [r7, #20]
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	e841 2300 	strex	r3, r2, [r1]
 800a53e:	613b      	str	r3, [r7, #16]
   return(result);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d1e5      	bne.n	800a512 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2220      	movs	r2, #32
 800a54a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a54e:	bf00      	nop
 800a550:	373c      	adds	r7, #60	; 0x3c
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
	...

0800a55c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b095      	sub	sp, #84	; 0x54
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56c:	e853 3f00 	ldrex	r3, [r3]
 800a570:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a578:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	643b      	str	r3, [r7, #64]	; 0x40
 800a584:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a58a:	e841 2300 	strex	r3, r2, [r1]
 800a58e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1e6      	bne.n	800a564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	3308      	adds	r3, #8
 800a59c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59e:	6a3b      	ldr	r3, [r7, #32]
 800a5a0:	e853 3f00 	ldrex	r3, [r3]
 800a5a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a6:	69fa      	ldr	r2, [r7, #28]
 800a5a8:	4b1e      	ldr	r3, [pc, #120]	; (800a624 <UART_EndRxTransfer+0xc8>)
 800a5aa:	4013      	ands	r3, r2
 800a5ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5be:	e841 2300 	strex	r3, r2, [r1]
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d1e5      	bne.n	800a596 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d118      	bne.n	800a604 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	e853 3f00 	ldrex	r3, [r3]
 800a5de:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f023 0310 	bic.w	r3, r3, #16
 800a5e6:	647b      	str	r3, [r7, #68]	; 0x44
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5f0:	61bb      	str	r3, [r7, #24]
 800a5f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5f4:	6979      	ldr	r1, [r7, #20]
 800a5f6:	69ba      	ldr	r2, [r7, #24]
 800a5f8:	e841 2300 	strex	r3, r2, [r1]
 800a5fc:	613b      	str	r3, [r7, #16]
   return(result);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1e6      	bne.n	800a5d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2220      	movs	r2, #32
 800a608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a618:	bf00      	nop
 800a61a:	3754      	adds	r7, #84	; 0x54
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	effffffe 	.word	0xeffffffe

0800a628 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b09c      	sub	sp, #112	; 0x70
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a634:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63e:	d071      	beq.n	800a724 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a642:	2200      	movs	r2, #0
 800a644:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a648:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a650:	e853 3f00 	ldrex	r3, [r3]
 800a654:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a65c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a65e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a666:	65bb      	str	r3, [r7, #88]	; 0x58
 800a668:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a66c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a66e:	e841 2300 	strex	r3, r2, [r1]
 800a672:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a676:	2b00      	cmp	r3, #0
 800a678:	d1e6      	bne.n	800a648 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	3308      	adds	r3, #8
 800a680:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a684:	e853 3f00 	ldrex	r3, [r3]
 800a688:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a68a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68c:	f023 0301 	bic.w	r3, r3, #1
 800a690:	667b      	str	r3, [r7, #100]	; 0x64
 800a692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3308      	adds	r3, #8
 800a698:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a69a:	647a      	str	r2, [r7, #68]	; 0x44
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a69e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6a2:	e841 2300 	strex	r3, r2, [r1]
 800a6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1e5      	bne.n	800a67a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	3308      	adds	r3, #8
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b8:	e853 3f00 	ldrex	r3, [r3]
 800a6bc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6be:	6a3b      	ldr	r3, [r7, #32]
 800a6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c4:	663b      	str	r3, [r7, #96]	; 0x60
 800a6c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3308      	adds	r3, #8
 800a6cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6ce:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d6:	e841 2300 	strex	r3, r2, [r1]
 800a6da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d1e5      	bne.n	800a6ae <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6e4:	2220      	movs	r2, #32
 800a6e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d118      	bne.n	800a724 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	e853 3f00 	ldrex	r3, [r3]
 800a6fe:	60fb      	str	r3, [r7, #12]
   return(result);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f023 0310 	bic.w	r3, r3, #16
 800a706:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a710:	61fb      	str	r3, [r7, #28]
 800a712:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a714:	69b9      	ldr	r1, [r7, #24]
 800a716:	69fa      	ldr	r2, [r7, #28]
 800a718:	e841 2300 	strex	r3, r2, [r1]
 800a71c:	617b      	str	r3, [r7, #20]
   return(result);
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1e6      	bne.n	800a6f2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a724:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a726:	2200      	movs	r2, #0
 800a728:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d107      	bne.n	800a742 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a734:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a738:	4619      	mov	r1, r3
 800a73a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a73c:	f7fe fdfa 	bl	8009334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a740:	e002      	b.n	800a748 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a742:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a744:	f7f6 faf4 	bl	8000d30 <HAL_UART_RxCpltCallback>
}
 800a748:	bf00      	nop
 800a74a:	3770      	adds	r7, #112	; 0x70
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}

0800a750 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2201      	movs	r2, #1
 800a762:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d109      	bne.n	800a780 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	4619      	mov	r1, r3
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f7fe fddb 	bl	8009334 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a77e:	e002      	b.n	800a786 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7fe fdc3 	bl	800930c <HAL_UART_RxHalfCpltCallback>
}
 800a786:	bf00      	nop
 800a788:	3710      	adds	r7, #16
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a7aa:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7b6:	2b80      	cmp	r3, #128	; 0x80
 800a7b8:	d109      	bne.n	800a7ce <UART_DMAError+0x40>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b21      	cmp	r3, #33	; 0x21
 800a7be:	d106      	bne.n	800a7ce <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a7c8:	6978      	ldr	r0, [r7, #20]
 800a7ca:	f7ff fe85 	bl	800a4d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7d8:	2b40      	cmp	r3, #64	; 0x40
 800a7da:	d109      	bne.n	800a7f0 <UART_DMAError+0x62>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b22      	cmp	r3, #34	; 0x22
 800a7e0:	d106      	bne.n	800a7f0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a7ea:	6978      	ldr	r0, [r7, #20]
 800a7ec:	f7ff feb6 	bl	800a55c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7f6:	f043 0210 	orr.w	r2, r3, #16
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a800:	6978      	ldr	r0, [r7, #20]
 800a802:	f7fe fd8d 	bl	8009320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a806:	bf00      	nop
 800a808:	3718      	adds	r7, #24
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bd80      	pop	{r7, pc}

0800a80e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a80e:	b580      	push	{r7, lr}
 800a810:	b084      	sub	sp, #16
 800a812:	af00      	add	r7, sp, #0
 800a814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a81a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	2200      	movs	r2, #0
 800a820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2200      	movs	r2, #0
 800a828:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a82c:	68f8      	ldr	r0, [r7, #12]
 800a82e:	f7fe fd77 	bl	8009320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a832:	bf00      	nop
 800a834:	3710      	adds	r7, #16
 800a836:	46bd      	mov	sp, r7
 800a838:	bd80      	pop	{r7, pc}

0800a83a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b088      	sub	sp, #32
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	e853 3f00 	ldrex	r3, [r3]
 800a84e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a856:	61fb      	str	r3, [r7, #28]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	61bb      	str	r3, [r7, #24]
 800a862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a864:	6979      	ldr	r1, [r7, #20]
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	e841 2300 	strex	r3, r2, [r1]
 800a86c:	613b      	str	r3, [r7, #16]
   return(result);
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1e6      	bne.n	800a842 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2220      	movs	r2, #32
 800a878:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2200      	movs	r2, #0
 800a880:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f7fe fd38 	bl	80092f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a888:	bf00      	nop
 800a88a:	3720      	adds	r7, #32
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a890:	b480      	push	{r7}
 800a892:	b083      	sub	sp, #12
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a898:	bf00      	nop
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b083      	sub	sp, #12
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a8da:	2b01      	cmp	r3, #1
 800a8dc:	d101      	bne.n	800a8e2 <HAL_UARTEx_DisableFifoMode+0x16>
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e027      	b.n	800a932 <HAL_UARTEx_DisableFifoMode+0x66>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2224      	movs	r2, #36	; 0x24
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f022 0201 	bic.w	r2, r2, #1
 800a908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	68fa      	ldr	r2, [r7, #12]
 800a91e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2220      	movs	r2, #32
 800a924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
 800a946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d101      	bne.n	800a956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a952:	2302      	movs	r3, #2
 800a954:	e02d      	b.n	800a9b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2201      	movs	r2, #1
 800a95a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2224      	movs	r2, #36	; 0x24
 800a962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0201 	bic.w	r2, r2, #1
 800a97c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	683a      	ldr	r2, [r7, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f850 	bl	800aa38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2220      	movs	r2, #32
 800a9a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ba:	b580      	push	{r7, lr}
 800a9bc:	b084      	sub	sp, #16
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	6078      	str	r0, [r7, #4]
 800a9c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a9ca:	2b01      	cmp	r3, #1
 800a9cc:	d101      	bne.n	800a9d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9ce:	2302      	movs	r3, #2
 800a9d0:	e02d      	b.n	800aa2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2201      	movs	r2, #1
 800a9d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2224      	movs	r2, #36	; 0x24
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f022 0201 	bic.w	r2, r2, #1
 800a9f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f812 	bl	800aa38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa2c:	2300      	movs	r3, #0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
	...

0800aa38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d108      	bne.n	800aa5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa58:	e031      	b.n	800aabe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa5a:	2310      	movs	r3, #16
 800aa5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa5e:	2310      	movs	r3, #16
 800aa60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	0e5b      	lsrs	r3, r3, #25
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	f003 0307 	and.w	r3, r3, #7
 800aa70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	0f5b      	lsrs	r3, r3, #29
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 0307 	and.w	r3, r3, #7
 800aa80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa82:	7bbb      	ldrb	r3, [r7, #14]
 800aa84:	7b3a      	ldrb	r2, [r7, #12]
 800aa86:	4911      	ldr	r1, [pc, #68]	; (800aacc <UARTEx_SetNbDataToProcess+0x94>)
 800aa88:	5c8a      	ldrb	r2, [r1, r2]
 800aa8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa8e:	7b3a      	ldrb	r2, [r7, #12]
 800aa90:	490f      	ldr	r1, [pc, #60]	; (800aad0 <UARTEx_SetNbDataToProcess+0x98>)
 800aa92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa94:	fb93 f3f2 	sdiv	r3, r3, r2
 800aa98:	b29a      	uxth	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	7b7a      	ldrb	r2, [r7, #13]
 800aaa4:	4909      	ldr	r1, [pc, #36]	; (800aacc <UARTEx_SetNbDataToProcess+0x94>)
 800aaa6:	5c8a      	ldrb	r2, [r1, r2]
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aaac:	7b7a      	ldrb	r2, [r7, #13]
 800aaae:	4908      	ldr	r1, [pc, #32]	; (800aad0 <UARTEx_SetNbDataToProcess+0x98>)
 800aab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aab2:	fb93 f3f2 	sdiv	r3, r3, r2
 800aab6:	b29a      	uxth	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
 800aaca:	bf00      	nop
 800aacc:	0800b998 	.word	0x0800b998
 800aad0:	0800b9a0 	.word	0x0800b9a0

0800aad4 <std>:
 800aad4:	2300      	movs	r3, #0
 800aad6:	b510      	push	{r4, lr}
 800aad8:	4604      	mov	r4, r0
 800aada:	e9c0 3300 	strd	r3, r3, [r0]
 800aade:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aae2:	6083      	str	r3, [r0, #8]
 800aae4:	8181      	strh	r1, [r0, #12]
 800aae6:	6643      	str	r3, [r0, #100]	; 0x64
 800aae8:	81c2      	strh	r2, [r0, #14]
 800aaea:	6183      	str	r3, [r0, #24]
 800aaec:	4619      	mov	r1, r3
 800aaee:	2208      	movs	r2, #8
 800aaf0:	305c      	adds	r0, #92	; 0x5c
 800aaf2:	f000 f906 	bl	800ad02 <memset>
 800aaf6:	4b0d      	ldr	r3, [pc, #52]	; (800ab2c <std+0x58>)
 800aaf8:	6263      	str	r3, [r4, #36]	; 0x24
 800aafa:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <std+0x5c>)
 800aafc:	62a3      	str	r3, [r4, #40]	; 0x28
 800aafe:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <std+0x60>)
 800ab00:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab02:	4b0d      	ldr	r3, [pc, #52]	; (800ab38 <std+0x64>)
 800ab04:	6323      	str	r3, [r4, #48]	; 0x30
 800ab06:	4b0d      	ldr	r3, [pc, #52]	; (800ab3c <std+0x68>)
 800ab08:	6224      	str	r4, [r4, #32]
 800ab0a:	429c      	cmp	r4, r3
 800ab0c:	d006      	beq.n	800ab1c <std+0x48>
 800ab0e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ab12:	4294      	cmp	r4, r2
 800ab14:	d002      	beq.n	800ab1c <std+0x48>
 800ab16:	33d0      	adds	r3, #208	; 0xd0
 800ab18:	429c      	cmp	r4, r3
 800ab1a:	d105      	bne.n	800ab28 <std+0x54>
 800ab1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ab20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab24:	f000 b966 	b.w	800adf4 <__retarget_lock_init_recursive>
 800ab28:	bd10      	pop	{r4, pc}
 800ab2a:	bf00      	nop
 800ab2c:	0800ac7d 	.word	0x0800ac7d
 800ab30:	0800ac9f 	.word	0x0800ac9f
 800ab34:	0800acd7 	.word	0x0800acd7
 800ab38:	0800acfb 	.word	0x0800acfb
 800ab3c:	2400045c 	.word	0x2400045c

0800ab40 <stdio_exit_handler>:
 800ab40:	4a02      	ldr	r2, [pc, #8]	; (800ab4c <stdio_exit_handler+0xc>)
 800ab42:	4903      	ldr	r1, [pc, #12]	; (800ab50 <stdio_exit_handler+0x10>)
 800ab44:	4803      	ldr	r0, [pc, #12]	; (800ab54 <stdio_exit_handler+0x14>)
 800ab46:	f000 b869 	b.w	800ac1c <_fwalk_sglue>
 800ab4a:	bf00      	nop
 800ab4c:	24000010 	.word	0x24000010
 800ab50:	0800b6a1 	.word	0x0800b6a1
 800ab54:	2400001c 	.word	0x2400001c

0800ab58 <cleanup_stdio>:
 800ab58:	6841      	ldr	r1, [r0, #4]
 800ab5a:	4b0c      	ldr	r3, [pc, #48]	; (800ab8c <cleanup_stdio+0x34>)
 800ab5c:	4299      	cmp	r1, r3
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	4604      	mov	r4, r0
 800ab62:	d001      	beq.n	800ab68 <cleanup_stdio+0x10>
 800ab64:	f000 fd9c 	bl	800b6a0 <_fflush_r>
 800ab68:	68a1      	ldr	r1, [r4, #8]
 800ab6a:	4b09      	ldr	r3, [pc, #36]	; (800ab90 <cleanup_stdio+0x38>)
 800ab6c:	4299      	cmp	r1, r3
 800ab6e:	d002      	beq.n	800ab76 <cleanup_stdio+0x1e>
 800ab70:	4620      	mov	r0, r4
 800ab72:	f000 fd95 	bl	800b6a0 <_fflush_r>
 800ab76:	68e1      	ldr	r1, [r4, #12]
 800ab78:	4b06      	ldr	r3, [pc, #24]	; (800ab94 <cleanup_stdio+0x3c>)
 800ab7a:	4299      	cmp	r1, r3
 800ab7c:	d004      	beq.n	800ab88 <cleanup_stdio+0x30>
 800ab7e:	4620      	mov	r0, r4
 800ab80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab84:	f000 bd8c 	b.w	800b6a0 <_fflush_r>
 800ab88:	bd10      	pop	{r4, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2400045c 	.word	0x2400045c
 800ab90:	240004c4 	.word	0x240004c4
 800ab94:	2400052c 	.word	0x2400052c

0800ab98 <global_stdio_init.part.0>:
 800ab98:	b510      	push	{r4, lr}
 800ab9a:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <global_stdio_init.part.0+0x30>)
 800ab9c:	4c0b      	ldr	r4, [pc, #44]	; (800abcc <global_stdio_init.part.0+0x34>)
 800ab9e:	4a0c      	ldr	r2, [pc, #48]	; (800abd0 <global_stdio_init.part.0+0x38>)
 800aba0:	601a      	str	r2, [r3, #0]
 800aba2:	4620      	mov	r0, r4
 800aba4:	2200      	movs	r2, #0
 800aba6:	2104      	movs	r1, #4
 800aba8:	f7ff ff94 	bl	800aad4 <std>
 800abac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800abb0:	2201      	movs	r2, #1
 800abb2:	2109      	movs	r1, #9
 800abb4:	f7ff ff8e 	bl	800aad4 <std>
 800abb8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800abbc:	2202      	movs	r2, #2
 800abbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abc2:	2112      	movs	r1, #18
 800abc4:	f7ff bf86 	b.w	800aad4 <std>
 800abc8:	24000594 	.word	0x24000594
 800abcc:	2400045c 	.word	0x2400045c
 800abd0:	0800ab41 	.word	0x0800ab41

0800abd4 <__sfp_lock_acquire>:
 800abd4:	4801      	ldr	r0, [pc, #4]	; (800abdc <__sfp_lock_acquire+0x8>)
 800abd6:	f000 b90e 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800abda:	bf00      	nop
 800abdc:	2400059d 	.word	0x2400059d

0800abe0 <__sfp_lock_release>:
 800abe0:	4801      	ldr	r0, [pc, #4]	; (800abe8 <__sfp_lock_release+0x8>)
 800abe2:	f000 b909 	b.w	800adf8 <__retarget_lock_release_recursive>
 800abe6:	bf00      	nop
 800abe8:	2400059d 	.word	0x2400059d

0800abec <__sinit>:
 800abec:	b510      	push	{r4, lr}
 800abee:	4604      	mov	r4, r0
 800abf0:	f7ff fff0 	bl	800abd4 <__sfp_lock_acquire>
 800abf4:	6a23      	ldr	r3, [r4, #32]
 800abf6:	b11b      	cbz	r3, 800ac00 <__sinit+0x14>
 800abf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abfc:	f7ff bff0 	b.w	800abe0 <__sfp_lock_release>
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <__sinit+0x28>)
 800ac02:	6223      	str	r3, [r4, #32]
 800ac04:	4b04      	ldr	r3, [pc, #16]	; (800ac18 <__sinit+0x2c>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d1f5      	bne.n	800abf8 <__sinit+0xc>
 800ac0c:	f7ff ffc4 	bl	800ab98 <global_stdio_init.part.0>
 800ac10:	e7f2      	b.n	800abf8 <__sinit+0xc>
 800ac12:	bf00      	nop
 800ac14:	0800ab59 	.word	0x0800ab59
 800ac18:	24000594 	.word	0x24000594

0800ac1c <_fwalk_sglue>:
 800ac1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac20:	4607      	mov	r7, r0
 800ac22:	4688      	mov	r8, r1
 800ac24:	4614      	mov	r4, r2
 800ac26:	2600      	movs	r6, #0
 800ac28:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac2c:	f1b9 0901 	subs.w	r9, r9, #1
 800ac30:	d505      	bpl.n	800ac3e <_fwalk_sglue+0x22>
 800ac32:	6824      	ldr	r4, [r4, #0]
 800ac34:	2c00      	cmp	r4, #0
 800ac36:	d1f7      	bne.n	800ac28 <_fwalk_sglue+0xc>
 800ac38:	4630      	mov	r0, r6
 800ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac3e:	89ab      	ldrh	r3, [r5, #12]
 800ac40:	2b01      	cmp	r3, #1
 800ac42:	d907      	bls.n	800ac54 <_fwalk_sglue+0x38>
 800ac44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	d003      	beq.n	800ac54 <_fwalk_sglue+0x38>
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4638      	mov	r0, r7
 800ac50:	47c0      	blx	r8
 800ac52:	4306      	orrs	r6, r0
 800ac54:	3568      	adds	r5, #104	; 0x68
 800ac56:	e7e9      	b.n	800ac2c <_fwalk_sglue+0x10>

0800ac58 <iprintf>:
 800ac58:	b40f      	push	{r0, r1, r2, r3}
 800ac5a:	b507      	push	{r0, r1, r2, lr}
 800ac5c:	4906      	ldr	r1, [pc, #24]	; (800ac78 <iprintf+0x20>)
 800ac5e:	ab04      	add	r3, sp, #16
 800ac60:	6808      	ldr	r0, [r1, #0]
 800ac62:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac66:	6881      	ldr	r1, [r0, #8]
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	f000 f9e9 	bl	800b040 <_vfiprintf_r>
 800ac6e:	b003      	add	sp, #12
 800ac70:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac74:	b004      	add	sp, #16
 800ac76:	4770      	bx	lr
 800ac78:	24000068 	.word	0x24000068

0800ac7c <__sread>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	460c      	mov	r4, r1
 800ac80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac84:	f000 f868 	bl	800ad58 <_read_r>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	bfab      	itete	ge
 800ac8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac8e:	89a3      	ldrhlt	r3, [r4, #12]
 800ac90:	181b      	addge	r3, r3, r0
 800ac92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac96:	bfac      	ite	ge
 800ac98:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac9a:	81a3      	strhlt	r3, [r4, #12]
 800ac9c:	bd10      	pop	{r4, pc}

0800ac9e <__swrite>:
 800ac9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca2:	461f      	mov	r7, r3
 800aca4:	898b      	ldrh	r3, [r1, #12]
 800aca6:	05db      	lsls	r3, r3, #23
 800aca8:	4605      	mov	r5, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	4616      	mov	r6, r2
 800acae:	d505      	bpl.n	800acbc <__swrite+0x1e>
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	2302      	movs	r3, #2
 800acb6:	2200      	movs	r2, #0
 800acb8:	f000 f83c 	bl	800ad34 <_lseek_r>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	4632      	mov	r2, r6
 800acca:	463b      	mov	r3, r7
 800accc:	4628      	mov	r0, r5
 800acce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	f000 b853 	b.w	800ad7c <_write_r>

0800acd6 <__sseek>:
 800acd6:	b510      	push	{r4, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acde:	f000 f829 	bl	800ad34 <_lseek_r>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	bf15      	itete	ne
 800ace8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acf2:	81a3      	strheq	r3, [r4, #12]
 800acf4:	bf18      	it	ne
 800acf6:	81a3      	strhne	r3, [r4, #12]
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <__sclose>:
 800acfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfe:	f000 b809 	b.w	800ad14 <_close_r>

0800ad02 <memset>:
 800ad02:	4402      	add	r2, r0
 800ad04:	4603      	mov	r3, r0
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d100      	bne.n	800ad0c <memset+0xa>
 800ad0a:	4770      	bx	lr
 800ad0c:	f803 1b01 	strb.w	r1, [r3], #1
 800ad10:	e7f9      	b.n	800ad06 <memset+0x4>
	...

0800ad14 <_close_r>:
 800ad14:	b538      	push	{r3, r4, r5, lr}
 800ad16:	4d06      	ldr	r5, [pc, #24]	; (800ad30 <_close_r+0x1c>)
 800ad18:	2300      	movs	r3, #0
 800ad1a:	4604      	mov	r4, r0
 800ad1c:	4608      	mov	r0, r1
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	f7f6 faeb 	bl	80012fa <_close>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_close_r+0x1a>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_close_r+0x1a>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	24000598 	.word	0x24000598

0800ad34 <_lseek_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d07      	ldr	r5, [pc, #28]	; (800ad54 <_lseek_r+0x20>)
 800ad38:	4604      	mov	r4, r0
 800ad3a:	4608      	mov	r0, r1
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	2200      	movs	r2, #0
 800ad40:	602a      	str	r2, [r5, #0]
 800ad42:	461a      	mov	r2, r3
 800ad44:	f7f6 fb00 	bl	8001348 <_lseek>
 800ad48:	1c43      	adds	r3, r0, #1
 800ad4a:	d102      	bne.n	800ad52 <_lseek_r+0x1e>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	b103      	cbz	r3, 800ad52 <_lseek_r+0x1e>
 800ad50:	6023      	str	r3, [r4, #0]
 800ad52:	bd38      	pop	{r3, r4, r5, pc}
 800ad54:	24000598 	.word	0x24000598

0800ad58 <_read_r>:
 800ad58:	b538      	push	{r3, r4, r5, lr}
 800ad5a:	4d07      	ldr	r5, [pc, #28]	; (800ad78 <_read_r+0x20>)
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	4608      	mov	r0, r1
 800ad60:	4611      	mov	r1, r2
 800ad62:	2200      	movs	r2, #0
 800ad64:	602a      	str	r2, [r5, #0]
 800ad66:	461a      	mov	r2, r3
 800ad68:	f7f6 fa8e 	bl	8001288 <_read>
 800ad6c:	1c43      	adds	r3, r0, #1
 800ad6e:	d102      	bne.n	800ad76 <_read_r+0x1e>
 800ad70:	682b      	ldr	r3, [r5, #0]
 800ad72:	b103      	cbz	r3, 800ad76 <_read_r+0x1e>
 800ad74:	6023      	str	r3, [r4, #0]
 800ad76:	bd38      	pop	{r3, r4, r5, pc}
 800ad78:	24000598 	.word	0x24000598

0800ad7c <_write_r>:
 800ad7c:	b538      	push	{r3, r4, r5, lr}
 800ad7e:	4d07      	ldr	r5, [pc, #28]	; (800ad9c <_write_r+0x20>)
 800ad80:	4604      	mov	r4, r0
 800ad82:	4608      	mov	r0, r1
 800ad84:	4611      	mov	r1, r2
 800ad86:	2200      	movs	r2, #0
 800ad88:	602a      	str	r2, [r5, #0]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f7f6 fa99 	bl	80012c2 <_write>
 800ad90:	1c43      	adds	r3, r0, #1
 800ad92:	d102      	bne.n	800ad9a <_write_r+0x1e>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	b103      	cbz	r3, 800ad9a <_write_r+0x1e>
 800ad98:	6023      	str	r3, [r4, #0]
 800ad9a:	bd38      	pop	{r3, r4, r5, pc}
 800ad9c:	24000598 	.word	0x24000598

0800ada0 <__errno>:
 800ada0:	4b01      	ldr	r3, [pc, #4]	; (800ada8 <__errno+0x8>)
 800ada2:	6818      	ldr	r0, [r3, #0]
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	24000068 	.word	0x24000068

0800adac <__libc_init_array>:
 800adac:	b570      	push	{r4, r5, r6, lr}
 800adae:	4d0d      	ldr	r5, [pc, #52]	; (800ade4 <__libc_init_array+0x38>)
 800adb0:	4c0d      	ldr	r4, [pc, #52]	; (800ade8 <__libc_init_array+0x3c>)
 800adb2:	1b64      	subs	r4, r4, r5
 800adb4:	10a4      	asrs	r4, r4, #2
 800adb6:	2600      	movs	r6, #0
 800adb8:	42a6      	cmp	r6, r4
 800adba:	d109      	bne.n	800add0 <__libc_init_array+0x24>
 800adbc:	4d0b      	ldr	r5, [pc, #44]	; (800adec <__libc_init_array+0x40>)
 800adbe:	4c0c      	ldr	r4, [pc, #48]	; (800adf0 <__libc_init_array+0x44>)
 800adc0:	f000 fdc0 	bl	800b944 <_init>
 800adc4:	1b64      	subs	r4, r4, r5
 800adc6:	10a4      	asrs	r4, r4, #2
 800adc8:	2600      	movs	r6, #0
 800adca:	42a6      	cmp	r6, r4
 800adcc:	d105      	bne.n	800adda <__libc_init_array+0x2e>
 800adce:	bd70      	pop	{r4, r5, r6, pc}
 800add0:	f855 3b04 	ldr.w	r3, [r5], #4
 800add4:	4798      	blx	r3
 800add6:	3601      	adds	r6, #1
 800add8:	e7ee      	b.n	800adb8 <__libc_init_array+0xc>
 800adda:	f855 3b04 	ldr.w	r3, [r5], #4
 800adde:	4798      	blx	r3
 800ade0:	3601      	adds	r6, #1
 800ade2:	e7f2      	b.n	800adca <__libc_init_array+0x1e>
 800ade4:	0800b9e4 	.word	0x0800b9e4
 800ade8:	0800b9e4 	.word	0x0800b9e4
 800adec:	0800b9e4 	.word	0x0800b9e4
 800adf0:	0800b9e8 	.word	0x0800b9e8

0800adf4 <__retarget_lock_init_recursive>:
 800adf4:	4770      	bx	lr

0800adf6 <__retarget_lock_acquire_recursive>:
 800adf6:	4770      	bx	lr

0800adf8 <__retarget_lock_release_recursive>:
 800adf8:	4770      	bx	lr
	...

0800adfc <_free_r>:
 800adfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800adfe:	2900      	cmp	r1, #0
 800ae00:	d044      	beq.n	800ae8c <_free_r+0x90>
 800ae02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae06:	9001      	str	r0, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ae0e:	bfb8      	it	lt
 800ae10:	18e4      	addlt	r4, r4, r3
 800ae12:	f000 f8df 	bl	800afd4 <__malloc_lock>
 800ae16:	4a1e      	ldr	r2, [pc, #120]	; (800ae90 <_free_r+0x94>)
 800ae18:	9801      	ldr	r0, [sp, #4]
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	b933      	cbnz	r3, 800ae2c <_free_r+0x30>
 800ae1e:	6063      	str	r3, [r4, #4]
 800ae20:	6014      	str	r4, [r2, #0]
 800ae22:	b003      	add	sp, #12
 800ae24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ae28:	f000 b8da 	b.w	800afe0 <__malloc_unlock>
 800ae2c:	42a3      	cmp	r3, r4
 800ae2e:	d908      	bls.n	800ae42 <_free_r+0x46>
 800ae30:	6825      	ldr	r5, [r4, #0]
 800ae32:	1961      	adds	r1, r4, r5
 800ae34:	428b      	cmp	r3, r1
 800ae36:	bf01      	itttt	eq
 800ae38:	6819      	ldreq	r1, [r3, #0]
 800ae3a:	685b      	ldreq	r3, [r3, #4]
 800ae3c:	1949      	addeq	r1, r1, r5
 800ae3e:	6021      	streq	r1, [r4, #0]
 800ae40:	e7ed      	b.n	800ae1e <_free_r+0x22>
 800ae42:	461a      	mov	r2, r3
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	b10b      	cbz	r3, 800ae4c <_free_r+0x50>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d9fa      	bls.n	800ae42 <_free_r+0x46>
 800ae4c:	6811      	ldr	r1, [r2, #0]
 800ae4e:	1855      	adds	r5, r2, r1
 800ae50:	42a5      	cmp	r5, r4
 800ae52:	d10b      	bne.n	800ae6c <_free_r+0x70>
 800ae54:	6824      	ldr	r4, [r4, #0]
 800ae56:	4421      	add	r1, r4
 800ae58:	1854      	adds	r4, r2, r1
 800ae5a:	42a3      	cmp	r3, r4
 800ae5c:	6011      	str	r1, [r2, #0]
 800ae5e:	d1e0      	bne.n	800ae22 <_free_r+0x26>
 800ae60:	681c      	ldr	r4, [r3, #0]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	6053      	str	r3, [r2, #4]
 800ae66:	440c      	add	r4, r1
 800ae68:	6014      	str	r4, [r2, #0]
 800ae6a:	e7da      	b.n	800ae22 <_free_r+0x26>
 800ae6c:	d902      	bls.n	800ae74 <_free_r+0x78>
 800ae6e:	230c      	movs	r3, #12
 800ae70:	6003      	str	r3, [r0, #0]
 800ae72:	e7d6      	b.n	800ae22 <_free_r+0x26>
 800ae74:	6825      	ldr	r5, [r4, #0]
 800ae76:	1961      	adds	r1, r4, r5
 800ae78:	428b      	cmp	r3, r1
 800ae7a:	bf04      	itt	eq
 800ae7c:	6819      	ldreq	r1, [r3, #0]
 800ae7e:	685b      	ldreq	r3, [r3, #4]
 800ae80:	6063      	str	r3, [r4, #4]
 800ae82:	bf04      	itt	eq
 800ae84:	1949      	addeq	r1, r1, r5
 800ae86:	6021      	streq	r1, [r4, #0]
 800ae88:	6054      	str	r4, [r2, #4]
 800ae8a:	e7ca      	b.n	800ae22 <_free_r+0x26>
 800ae8c:	b003      	add	sp, #12
 800ae8e:	bd30      	pop	{r4, r5, pc}
 800ae90:	240005a0 	.word	0x240005a0

0800ae94 <sbrk_aligned>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	4e0e      	ldr	r6, [pc, #56]	; (800aed0 <sbrk_aligned+0x3c>)
 800ae98:	460c      	mov	r4, r1
 800ae9a:	6831      	ldr	r1, [r6, #0]
 800ae9c:	4605      	mov	r5, r0
 800ae9e:	b911      	cbnz	r1, 800aea6 <sbrk_aligned+0x12>
 800aea0:	f000 fcbc 	bl	800b81c <_sbrk_r>
 800aea4:	6030      	str	r0, [r6, #0]
 800aea6:	4621      	mov	r1, r4
 800aea8:	4628      	mov	r0, r5
 800aeaa:	f000 fcb7 	bl	800b81c <_sbrk_r>
 800aeae:	1c43      	adds	r3, r0, #1
 800aeb0:	d00a      	beq.n	800aec8 <sbrk_aligned+0x34>
 800aeb2:	1cc4      	adds	r4, r0, #3
 800aeb4:	f024 0403 	bic.w	r4, r4, #3
 800aeb8:	42a0      	cmp	r0, r4
 800aeba:	d007      	beq.n	800aecc <sbrk_aligned+0x38>
 800aebc:	1a21      	subs	r1, r4, r0
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 fcac 	bl	800b81c <_sbrk_r>
 800aec4:	3001      	adds	r0, #1
 800aec6:	d101      	bne.n	800aecc <sbrk_aligned+0x38>
 800aec8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800aecc:	4620      	mov	r0, r4
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	240005a4 	.word	0x240005a4

0800aed4 <_malloc_r>:
 800aed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed8:	1ccd      	adds	r5, r1, #3
 800aeda:	f025 0503 	bic.w	r5, r5, #3
 800aede:	3508      	adds	r5, #8
 800aee0:	2d0c      	cmp	r5, #12
 800aee2:	bf38      	it	cc
 800aee4:	250c      	movcc	r5, #12
 800aee6:	2d00      	cmp	r5, #0
 800aee8:	4607      	mov	r7, r0
 800aeea:	db01      	blt.n	800aef0 <_malloc_r+0x1c>
 800aeec:	42a9      	cmp	r1, r5
 800aeee:	d905      	bls.n	800aefc <_malloc_r+0x28>
 800aef0:	230c      	movs	r3, #12
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	2600      	movs	r6, #0
 800aef6:	4630      	mov	r0, r6
 800aef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aefc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800afd0 <_malloc_r+0xfc>
 800af00:	f000 f868 	bl	800afd4 <__malloc_lock>
 800af04:	f8d8 3000 	ldr.w	r3, [r8]
 800af08:	461c      	mov	r4, r3
 800af0a:	bb5c      	cbnz	r4, 800af64 <_malloc_r+0x90>
 800af0c:	4629      	mov	r1, r5
 800af0e:	4638      	mov	r0, r7
 800af10:	f7ff ffc0 	bl	800ae94 <sbrk_aligned>
 800af14:	1c43      	adds	r3, r0, #1
 800af16:	4604      	mov	r4, r0
 800af18:	d155      	bne.n	800afc6 <_malloc_r+0xf2>
 800af1a:	f8d8 4000 	ldr.w	r4, [r8]
 800af1e:	4626      	mov	r6, r4
 800af20:	2e00      	cmp	r6, #0
 800af22:	d145      	bne.n	800afb0 <_malloc_r+0xdc>
 800af24:	2c00      	cmp	r4, #0
 800af26:	d048      	beq.n	800afba <_malloc_r+0xe6>
 800af28:	6823      	ldr	r3, [r4, #0]
 800af2a:	4631      	mov	r1, r6
 800af2c:	4638      	mov	r0, r7
 800af2e:	eb04 0903 	add.w	r9, r4, r3
 800af32:	f000 fc73 	bl	800b81c <_sbrk_r>
 800af36:	4581      	cmp	r9, r0
 800af38:	d13f      	bne.n	800afba <_malloc_r+0xe6>
 800af3a:	6821      	ldr	r1, [r4, #0]
 800af3c:	1a6d      	subs	r5, r5, r1
 800af3e:	4629      	mov	r1, r5
 800af40:	4638      	mov	r0, r7
 800af42:	f7ff ffa7 	bl	800ae94 <sbrk_aligned>
 800af46:	3001      	adds	r0, #1
 800af48:	d037      	beq.n	800afba <_malloc_r+0xe6>
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	442b      	add	r3, r5
 800af4e:	6023      	str	r3, [r4, #0]
 800af50:	f8d8 3000 	ldr.w	r3, [r8]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d038      	beq.n	800afca <_malloc_r+0xf6>
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	42a2      	cmp	r2, r4
 800af5c:	d12b      	bne.n	800afb6 <_malloc_r+0xe2>
 800af5e:	2200      	movs	r2, #0
 800af60:	605a      	str	r2, [r3, #4]
 800af62:	e00f      	b.n	800af84 <_malloc_r+0xb0>
 800af64:	6822      	ldr	r2, [r4, #0]
 800af66:	1b52      	subs	r2, r2, r5
 800af68:	d41f      	bmi.n	800afaa <_malloc_r+0xd6>
 800af6a:	2a0b      	cmp	r2, #11
 800af6c:	d917      	bls.n	800af9e <_malloc_r+0xca>
 800af6e:	1961      	adds	r1, r4, r5
 800af70:	42a3      	cmp	r3, r4
 800af72:	6025      	str	r5, [r4, #0]
 800af74:	bf18      	it	ne
 800af76:	6059      	strne	r1, [r3, #4]
 800af78:	6863      	ldr	r3, [r4, #4]
 800af7a:	bf08      	it	eq
 800af7c:	f8c8 1000 	streq.w	r1, [r8]
 800af80:	5162      	str	r2, [r4, r5]
 800af82:	604b      	str	r3, [r1, #4]
 800af84:	4638      	mov	r0, r7
 800af86:	f104 060b 	add.w	r6, r4, #11
 800af8a:	f000 f829 	bl	800afe0 <__malloc_unlock>
 800af8e:	f026 0607 	bic.w	r6, r6, #7
 800af92:	1d23      	adds	r3, r4, #4
 800af94:	1af2      	subs	r2, r6, r3
 800af96:	d0ae      	beq.n	800aef6 <_malloc_r+0x22>
 800af98:	1b9b      	subs	r3, r3, r6
 800af9a:	50a3      	str	r3, [r4, r2]
 800af9c:	e7ab      	b.n	800aef6 <_malloc_r+0x22>
 800af9e:	42a3      	cmp	r3, r4
 800afa0:	6862      	ldr	r2, [r4, #4]
 800afa2:	d1dd      	bne.n	800af60 <_malloc_r+0x8c>
 800afa4:	f8c8 2000 	str.w	r2, [r8]
 800afa8:	e7ec      	b.n	800af84 <_malloc_r+0xb0>
 800afaa:	4623      	mov	r3, r4
 800afac:	6864      	ldr	r4, [r4, #4]
 800afae:	e7ac      	b.n	800af0a <_malloc_r+0x36>
 800afb0:	4634      	mov	r4, r6
 800afb2:	6876      	ldr	r6, [r6, #4]
 800afb4:	e7b4      	b.n	800af20 <_malloc_r+0x4c>
 800afb6:	4613      	mov	r3, r2
 800afb8:	e7cc      	b.n	800af54 <_malloc_r+0x80>
 800afba:	230c      	movs	r3, #12
 800afbc:	603b      	str	r3, [r7, #0]
 800afbe:	4638      	mov	r0, r7
 800afc0:	f000 f80e 	bl	800afe0 <__malloc_unlock>
 800afc4:	e797      	b.n	800aef6 <_malloc_r+0x22>
 800afc6:	6025      	str	r5, [r4, #0]
 800afc8:	e7dc      	b.n	800af84 <_malloc_r+0xb0>
 800afca:	605b      	str	r3, [r3, #4]
 800afcc:	deff      	udf	#255	; 0xff
 800afce:	bf00      	nop
 800afd0:	240005a0 	.word	0x240005a0

0800afd4 <__malloc_lock>:
 800afd4:	4801      	ldr	r0, [pc, #4]	; (800afdc <__malloc_lock+0x8>)
 800afd6:	f7ff bf0e 	b.w	800adf6 <__retarget_lock_acquire_recursive>
 800afda:	bf00      	nop
 800afdc:	2400059c 	.word	0x2400059c

0800afe0 <__malloc_unlock>:
 800afe0:	4801      	ldr	r0, [pc, #4]	; (800afe8 <__malloc_unlock+0x8>)
 800afe2:	f7ff bf09 	b.w	800adf8 <__retarget_lock_release_recursive>
 800afe6:	bf00      	nop
 800afe8:	2400059c 	.word	0x2400059c

0800afec <__sfputc_r>:
 800afec:	6893      	ldr	r3, [r2, #8]
 800afee:	3b01      	subs	r3, #1
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	b410      	push	{r4}
 800aff4:	6093      	str	r3, [r2, #8]
 800aff6:	da08      	bge.n	800b00a <__sfputc_r+0x1e>
 800aff8:	6994      	ldr	r4, [r2, #24]
 800affa:	42a3      	cmp	r3, r4
 800affc:	db01      	blt.n	800b002 <__sfputc_r+0x16>
 800affe:	290a      	cmp	r1, #10
 800b000:	d103      	bne.n	800b00a <__sfputc_r+0x1e>
 800b002:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b006:	f000 bb73 	b.w	800b6f0 <__swbuf_r>
 800b00a:	6813      	ldr	r3, [r2, #0]
 800b00c:	1c58      	adds	r0, r3, #1
 800b00e:	6010      	str	r0, [r2, #0]
 800b010:	7019      	strb	r1, [r3, #0]
 800b012:	4608      	mov	r0, r1
 800b014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b018:	4770      	bx	lr

0800b01a <__sfputs_r>:
 800b01a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01c:	4606      	mov	r6, r0
 800b01e:	460f      	mov	r7, r1
 800b020:	4614      	mov	r4, r2
 800b022:	18d5      	adds	r5, r2, r3
 800b024:	42ac      	cmp	r4, r5
 800b026:	d101      	bne.n	800b02c <__sfputs_r+0x12>
 800b028:	2000      	movs	r0, #0
 800b02a:	e007      	b.n	800b03c <__sfputs_r+0x22>
 800b02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b030:	463a      	mov	r2, r7
 800b032:	4630      	mov	r0, r6
 800b034:	f7ff ffda 	bl	800afec <__sfputc_r>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	d1f3      	bne.n	800b024 <__sfputs_r+0xa>
 800b03c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b040 <_vfiprintf_r>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	460d      	mov	r5, r1
 800b046:	b09d      	sub	sp, #116	; 0x74
 800b048:	4614      	mov	r4, r2
 800b04a:	4698      	mov	r8, r3
 800b04c:	4606      	mov	r6, r0
 800b04e:	b118      	cbz	r0, 800b058 <_vfiprintf_r+0x18>
 800b050:	6a03      	ldr	r3, [r0, #32]
 800b052:	b90b      	cbnz	r3, 800b058 <_vfiprintf_r+0x18>
 800b054:	f7ff fdca 	bl	800abec <__sinit>
 800b058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b05a:	07d9      	lsls	r1, r3, #31
 800b05c:	d405      	bmi.n	800b06a <_vfiprintf_r+0x2a>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	059a      	lsls	r2, r3, #22
 800b062:	d402      	bmi.n	800b06a <_vfiprintf_r+0x2a>
 800b064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b066:	f7ff fec6 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800b06a:	89ab      	ldrh	r3, [r5, #12]
 800b06c:	071b      	lsls	r3, r3, #28
 800b06e:	d501      	bpl.n	800b074 <_vfiprintf_r+0x34>
 800b070:	692b      	ldr	r3, [r5, #16]
 800b072:	b99b      	cbnz	r3, 800b09c <_vfiprintf_r+0x5c>
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f000 fb78 	bl	800b76c <__swsetup_r>
 800b07c:	b170      	cbz	r0, 800b09c <_vfiprintf_r+0x5c>
 800b07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b080:	07dc      	lsls	r4, r3, #31
 800b082:	d504      	bpl.n	800b08e <_vfiprintf_r+0x4e>
 800b084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b088:	b01d      	add	sp, #116	; 0x74
 800b08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08e:	89ab      	ldrh	r3, [r5, #12]
 800b090:	0598      	lsls	r0, r3, #22
 800b092:	d4f7      	bmi.n	800b084 <_vfiprintf_r+0x44>
 800b094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b096:	f7ff feaf 	bl	800adf8 <__retarget_lock_release_recursive>
 800b09a:	e7f3      	b.n	800b084 <_vfiprintf_r+0x44>
 800b09c:	2300      	movs	r3, #0
 800b09e:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a0:	2320      	movs	r3, #32
 800b0a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0aa:	2330      	movs	r3, #48	; 0x30
 800b0ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b260 <_vfiprintf_r+0x220>
 800b0b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0b4:	f04f 0901 	mov.w	r9, #1
 800b0b8:	4623      	mov	r3, r4
 800b0ba:	469a      	mov	sl, r3
 800b0bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0c0:	b10a      	cbz	r2, 800b0c6 <_vfiprintf_r+0x86>
 800b0c2:	2a25      	cmp	r2, #37	; 0x25
 800b0c4:	d1f9      	bne.n	800b0ba <_vfiprintf_r+0x7a>
 800b0c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b0ca:	d00b      	beq.n	800b0e4 <_vfiprintf_r+0xa4>
 800b0cc:	465b      	mov	r3, fp
 800b0ce:	4622      	mov	r2, r4
 800b0d0:	4629      	mov	r1, r5
 800b0d2:	4630      	mov	r0, r6
 800b0d4:	f7ff ffa1 	bl	800b01a <__sfputs_r>
 800b0d8:	3001      	adds	r0, #1
 800b0da:	f000 80a9 	beq.w	800b230 <_vfiprintf_r+0x1f0>
 800b0de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0e0:	445a      	add	r2, fp
 800b0e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b0e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	f000 80a1 	beq.w	800b230 <_vfiprintf_r+0x1f0>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0f8:	f10a 0a01 	add.w	sl, sl, #1
 800b0fc:	9304      	str	r3, [sp, #16]
 800b0fe:	9307      	str	r3, [sp, #28]
 800b100:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b104:	931a      	str	r3, [sp, #104]	; 0x68
 800b106:	4654      	mov	r4, sl
 800b108:	2205      	movs	r2, #5
 800b10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b10e:	4854      	ldr	r0, [pc, #336]	; (800b260 <_vfiprintf_r+0x220>)
 800b110:	f7f5 f8fe 	bl	8000310 <memchr>
 800b114:	9a04      	ldr	r2, [sp, #16]
 800b116:	b9d8      	cbnz	r0, 800b150 <_vfiprintf_r+0x110>
 800b118:	06d1      	lsls	r1, r2, #27
 800b11a:	bf44      	itt	mi
 800b11c:	2320      	movmi	r3, #32
 800b11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b122:	0713      	lsls	r3, r2, #28
 800b124:	bf44      	itt	mi
 800b126:	232b      	movmi	r3, #43	; 0x2b
 800b128:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b12c:	f89a 3000 	ldrb.w	r3, [sl]
 800b130:	2b2a      	cmp	r3, #42	; 0x2a
 800b132:	d015      	beq.n	800b160 <_vfiprintf_r+0x120>
 800b134:	9a07      	ldr	r2, [sp, #28]
 800b136:	4654      	mov	r4, sl
 800b138:	2000      	movs	r0, #0
 800b13a:	f04f 0c0a 	mov.w	ip, #10
 800b13e:	4621      	mov	r1, r4
 800b140:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b144:	3b30      	subs	r3, #48	; 0x30
 800b146:	2b09      	cmp	r3, #9
 800b148:	d94d      	bls.n	800b1e6 <_vfiprintf_r+0x1a6>
 800b14a:	b1b0      	cbz	r0, 800b17a <_vfiprintf_r+0x13a>
 800b14c:	9207      	str	r2, [sp, #28]
 800b14e:	e014      	b.n	800b17a <_vfiprintf_r+0x13a>
 800b150:	eba0 0308 	sub.w	r3, r0, r8
 800b154:	fa09 f303 	lsl.w	r3, r9, r3
 800b158:	4313      	orrs	r3, r2
 800b15a:	9304      	str	r3, [sp, #16]
 800b15c:	46a2      	mov	sl, r4
 800b15e:	e7d2      	b.n	800b106 <_vfiprintf_r+0xc6>
 800b160:	9b03      	ldr	r3, [sp, #12]
 800b162:	1d19      	adds	r1, r3, #4
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	9103      	str	r1, [sp, #12]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bfbb      	ittet	lt
 800b16c:	425b      	neglt	r3, r3
 800b16e:	f042 0202 	orrlt.w	r2, r2, #2
 800b172:	9307      	strge	r3, [sp, #28]
 800b174:	9307      	strlt	r3, [sp, #28]
 800b176:	bfb8      	it	lt
 800b178:	9204      	strlt	r2, [sp, #16]
 800b17a:	7823      	ldrb	r3, [r4, #0]
 800b17c:	2b2e      	cmp	r3, #46	; 0x2e
 800b17e:	d10c      	bne.n	800b19a <_vfiprintf_r+0x15a>
 800b180:	7863      	ldrb	r3, [r4, #1]
 800b182:	2b2a      	cmp	r3, #42	; 0x2a
 800b184:	d134      	bne.n	800b1f0 <_vfiprintf_r+0x1b0>
 800b186:	9b03      	ldr	r3, [sp, #12]
 800b188:	1d1a      	adds	r2, r3, #4
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	9203      	str	r2, [sp, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	bfb8      	it	lt
 800b192:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b196:	3402      	adds	r4, #2
 800b198:	9305      	str	r3, [sp, #20]
 800b19a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b270 <_vfiprintf_r+0x230>
 800b19e:	7821      	ldrb	r1, [r4, #0]
 800b1a0:	2203      	movs	r2, #3
 800b1a2:	4650      	mov	r0, sl
 800b1a4:	f7f5 f8b4 	bl	8000310 <memchr>
 800b1a8:	b138      	cbz	r0, 800b1ba <_vfiprintf_r+0x17a>
 800b1aa:	9b04      	ldr	r3, [sp, #16]
 800b1ac:	eba0 000a 	sub.w	r0, r0, sl
 800b1b0:	2240      	movs	r2, #64	; 0x40
 800b1b2:	4082      	lsls	r2, r0
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	9304      	str	r3, [sp, #16]
 800b1ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1be:	4829      	ldr	r0, [pc, #164]	; (800b264 <_vfiprintf_r+0x224>)
 800b1c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1c4:	2206      	movs	r2, #6
 800b1c6:	f7f5 f8a3 	bl	8000310 <memchr>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d03f      	beq.n	800b24e <_vfiprintf_r+0x20e>
 800b1ce:	4b26      	ldr	r3, [pc, #152]	; (800b268 <_vfiprintf_r+0x228>)
 800b1d0:	bb1b      	cbnz	r3, 800b21a <_vfiprintf_r+0x1da>
 800b1d2:	9b03      	ldr	r3, [sp, #12]
 800b1d4:	3307      	adds	r3, #7
 800b1d6:	f023 0307 	bic.w	r3, r3, #7
 800b1da:	3308      	adds	r3, #8
 800b1dc:	9303      	str	r3, [sp, #12]
 800b1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1e0:	443b      	add	r3, r7
 800b1e2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e4:	e768      	b.n	800b0b8 <_vfiprintf_r+0x78>
 800b1e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1ea:	460c      	mov	r4, r1
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	e7a6      	b.n	800b13e <_vfiprintf_r+0xfe>
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	3401      	adds	r4, #1
 800b1f4:	9305      	str	r3, [sp, #20]
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	f04f 0c0a 	mov.w	ip, #10
 800b1fc:	4620      	mov	r0, r4
 800b1fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b202:	3a30      	subs	r2, #48	; 0x30
 800b204:	2a09      	cmp	r2, #9
 800b206:	d903      	bls.n	800b210 <_vfiprintf_r+0x1d0>
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0c6      	beq.n	800b19a <_vfiprintf_r+0x15a>
 800b20c:	9105      	str	r1, [sp, #20]
 800b20e:	e7c4      	b.n	800b19a <_vfiprintf_r+0x15a>
 800b210:	fb0c 2101 	mla	r1, ip, r1, r2
 800b214:	4604      	mov	r4, r0
 800b216:	2301      	movs	r3, #1
 800b218:	e7f0      	b.n	800b1fc <_vfiprintf_r+0x1bc>
 800b21a:	ab03      	add	r3, sp, #12
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	462a      	mov	r2, r5
 800b220:	4b12      	ldr	r3, [pc, #72]	; (800b26c <_vfiprintf_r+0x22c>)
 800b222:	a904      	add	r1, sp, #16
 800b224:	4630      	mov	r0, r6
 800b226:	f3af 8000 	nop.w
 800b22a:	4607      	mov	r7, r0
 800b22c:	1c78      	adds	r0, r7, #1
 800b22e:	d1d6      	bne.n	800b1de <_vfiprintf_r+0x19e>
 800b230:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b232:	07d9      	lsls	r1, r3, #31
 800b234:	d405      	bmi.n	800b242 <_vfiprintf_r+0x202>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	059a      	lsls	r2, r3, #22
 800b23a:	d402      	bmi.n	800b242 <_vfiprintf_r+0x202>
 800b23c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b23e:	f7ff fddb 	bl	800adf8 <__retarget_lock_release_recursive>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	065b      	lsls	r3, r3, #25
 800b246:	f53f af1d 	bmi.w	800b084 <_vfiprintf_r+0x44>
 800b24a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b24c:	e71c      	b.n	800b088 <_vfiprintf_r+0x48>
 800b24e:	ab03      	add	r3, sp, #12
 800b250:	9300      	str	r3, [sp, #0]
 800b252:	462a      	mov	r2, r5
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <_vfiprintf_r+0x22c>)
 800b256:	a904      	add	r1, sp, #16
 800b258:	4630      	mov	r0, r6
 800b25a:	f000 f879 	bl	800b350 <_printf_i>
 800b25e:	e7e4      	b.n	800b22a <_vfiprintf_r+0x1ea>
 800b260:	0800b9a8 	.word	0x0800b9a8
 800b264:	0800b9b2 	.word	0x0800b9b2
 800b268:	00000000 	.word	0x00000000
 800b26c:	0800b01b 	.word	0x0800b01b
 800b270:	0800b9ae 	.word	0x0800b9ae

0800b274 <_printf_common>:
 800b274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b278:	4616      	mov	r6, r2
 800b27a:	4699      	mov	r9, r3
 800b27c:	688a      	ldr	r2, [r1, #8]
 800b27e:	690b      	ldr	r3, [r1, #16]
 800b280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b284:	4293      	cmp	r3, r2
 800b286:	bfb8      	it	lt
 800b288:	4613      	movlt	r3, r2
 800b28a:	6033      	str	r3, [r6, #0]
 800b28c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b290:	4607      	mov	r7, r0
 800b292:	460c      	mov	r4, r1
 800b294:	b10a      	cbz	r2, 800b29a <_printf_common+0x26>
 800b296:	3301      	adds	r3, #1
 800b298:	6033      	str	r3, [r6, #0]
 800b29a:	6823      	ldr	r3, [r4, #0]
 800b29c:	0699      	lsls	r1, r3, #26
 800b29e:	bf42      	ittt	mi
 800b2a0:	6833      	ldrmi	r3, [r6, #0]
 800b2a2:	3302      	addmi	r3, #2
 800b2a4:	6033      	strmi	r3, [r6, #0]
 800b2a6:	6825      	ldr	r5, [r4, #0]
 800b2a8:	f015 0506 	ands.w	r5, r5, #6
 800b2ac:	d106      	bne.n	800b2bc <_printf_common+0x48>
 800b2ae:	f104 0a19 	add.w	sl, r4, #25
 800b2b2:	68e3      	ldr	r3, [r4, #12]
 800b2b4:	6832      	ldr	r2, [r6, #0]
 800b2b6:	1a9b      	subs	r3, r3, r2
 800b2b8:	42ab      	cmp	r3, r5
 800b2ba:	dc26      	bgt.n	800b30a <_printf_common+0x96>
 800b2bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2c0:	1e13      	subs	r3, r2, #0
 800b2c2:	6822      	ldr	r2, [r4, #0]
 800b2c4:	bf18      	it	ne
 800b2c6:	2301      	movne	r3, #1
 800b2c8:	0692      	lsls	r2, r2, #26
 800b2ca:	d42b      	bmi.n	800b324 <_printf_common+0xb0>
 800b2cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	47c0      	blx	r8
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d01e      	beq.n	800b318 <_printf_common+0xa4>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	6922      	ldr	r2, [r4, #16]
 800b2de:	f003 0306 	and.w	r3, r3, #6
 800b2e2:	2b04      	cmp	r3, #4
 800b2e4:	bf02      	ittt	eq
 800b2e6:	68e5      	ldreq	r5, [r4, #12]
 800b2e8:	6833      	ldreq	r3, [r6, #0]
 800b2ea:	1aed      	subeq	r5, r5, r3
 800b2ec:	68a3      	ldr	r3, [r4, #8]
 800b2ee:	bf0c      	ite	eq
 800b2f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2f4:	2500      	movne	r5, #0
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	bfc4      	itt	gt
 800b2fa:	1a9b      	subgt	r3, r3, r2
 800b2fc:	18ed      	addgt	r5, r5, r3
 800b2fe:	2600      	movs	r6, #0
 800b300:	341a      	adds	r4, #26
 800b302:	42b5      	cmp	r5, r6
 800b304:	d11a      	bne.n	800b33c <_printf_common+0xc8>
 800b306:	2000      	movs	r0, #0
 800b308:	e008      	b.n	800b31c <_printf_common+0xa8>
 800b30a:	2301      	movs	r3, #1
 800b30c:	4652      	mov	r2, sl
 800b30e:	4649      	mov	r1, r9
 800b310:	4638      	mov	r0, r7
 800b312:	47c0      	blx	r8
 800b314:	3001      	adds	r0, #1
 800b316:	d103      	bne.n	800b320 <_printf_common+0xac>
 800b318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b31c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b320:	3501      	adds	r5, #1
 800b322:	e7c6      	b.n	800b2b2 <_printf_common+0x3e>
 800b324:	18e1      	adds	r1, r4, r3
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	2030      	movs	r0, #48	; 0x30
 800b32a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b32e:	4422      	add	r2, r4
 800b330:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b334:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b338:	3302      	adds	r3, #2
 800b33a:	e7c7      	b.n	800b2cc <_printf_common+0x58>
 800b33c:	2301      	movs	r3, #1
 800b33e:	4622      	mov	r2, r4
 800b340:	4649      	mov	r1, r9
 800b342:	4638      	mov	r0, r7
 800b344:	47c0      	blx	r8
 800b346:	3001      	adds	r0, #1
 800b348:	d0e6      	beq.n	800b318 <_printf_common+0xa4>
 800b34a:	3601      	adds	r6, #1
 800b34c:	e7d9      	b.n	800b302 <_printf_common+0x8e>
	...

0800b350 <_printf_i>:
 800b350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b354:	7e0f      	ldrb	r7, [r1, #24]
 800b356:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b358:	2f78      	cmp	r7, #120	; 0x78
 800b35a:	4691      	mov	r9, r2
 800b35c:	4680      	mov	r8, r0
 800b35e:	460c      	mov	r4, r1
 800b360:	469a      	mov	sl, r3
 800b362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b366:	d807      	bhi.n	800b378 <_printf_i+0x28>
 800b368:	2f62      	cmp	r7, #98	; 0x62
 800b36a:	d80a      	bhi.n	800b382 <_printf_i+0x32>
 800b36c:	2f00      	cmp	r7, #0
 800b36e:	f000 80d4 	beq.w	800b51a <_printf_i+0x1ca>
 800b372:	2f58      	cmp	r7, #88	; 0x58
 800b374:	f000 80c0 	beq.w	800b4f8 <_printf_i+0x1a8>
 800b378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b37c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b380:	e03a      	b.n	800b3f8 <_printf_i+0xa8>
 800b382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b386:	2b15      	cmp	r3, #21
 800b388:	d8f6      	bhi.n	800b378 <_printf_i+0x28>
 800b38a:	a101      	add	r1, pc, #4	; (adr r1, 800b390 <_printf_i+0x40>)
 800b38c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b390:	0800b3e9 	.word	0x0800b3e9
 800b394:	0800b3fd 	.word	0x0800b3fd
 800b398:	0800b379 	.word	0x0800b379
 800b39c:	0800b379 	.word	0x0800b379
 800b3a0:	0800b379 	.word	0x0800b379
 800b3a4:	0800b379 	.word	0x0800b379
 800b3a8:	0800b3fd 	.word	0x0800b3fd
 800b3ac:	0800b379 	.word	0x0800b379
 800b3b0:	0800b379 	.word	0x0800b379
 800b3b4:	0800b379 	.word	0x0800b379
 800b3b8:	0800b379 	.word	0x0800b379
 800b3bc:	0800b501 	.word	0x0800b501
 800b3c0:	0800b429 	.word	0x0800b429
 800b3c4:	0800b4bb 	.word	0x0800b4bb
 800b3c8:	0800b379 	.word	0x0800b379
 800b3cc:	0800b379 	.word	0x0800b379
 800b3d0:	0800b523 	.word	0x0800b523
 800b3d4:	0800b379 	.word	0x0800b379
 800b3d8:	0800b429 	.word	0x0800b429
 800b3dc:	0800b379 	.word	0x0800b379
 800b3e0:	0800b379 	.word	0x0800b379
 800b3e4:	0800b4c3 	.word	0x0800b4c3
 800b3e8:	682b      	ldr	r3, [r5, #0]
 800b3ea:	1d1a      	adds	r2, r3, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	602a      	str	r2, [r5, #0]
 800b3f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e09f      	b.n	800b53c <_printf_i+0x1ec>
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	682b      	ldr	r3, [r5, #0]
 800b400:	0607      	lsls	r7, r0, #24
 800b402:	f103 0104 	add.w	r1, r3, #4
 800b406:	6029      	str	r1, [r5, #0]
 800b408:	d501      	bpl.n	800b40e <_printf_i+0xbe>
 800b40a:	681e      	ldr	r6, [r3, #0]
 800b40c:	e003      	b.n	800b416 <_printf_i+0xc6>
 800b40e:	0646      	lsls	r6, r0, #25
 800b410:	d5fb      	bpl.n	800b40a <_printf_i+0xba>
 800b412:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b416:	2e00      	cmp	r6, #0
 800b418:	da03      	bge.n	800b422 <_printf_i+0xd2>
 800b41a:	232d      	movs	r3, #45	; 0x2d
 800b41c:	4276      	negs	r6, r6
 800b41e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b422:	485a      	ldr	r0, [pc, #360]	; (800b58c <_printf_i+0x23c>)
 800b424:	230a      	movs	r3, #10
 800b426:	e012      	b.n	800b44e <_printf_i+0xfe>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	6820      	ldr	r0, [r4, #0]
 800b42c:	1d19      	adds	r1, r3, #4
 800b42e:	6029      	str	r1, [r5, #0]
 800b430:	0605      	lsls	r5, r0, #24
 800b432:	d501      	bpl.n	800b438 <_printf_i+0xe8>
 800b434:	681e      	ldr	r6, [r3, #0]
 800b436:	e002      	b.n	800b43e <_printf_i+0xee>
 800b438:	0641      	lsls	r1, r0, #25
 800b43a:	d5fb      	bpl.n	800b434 <_printf_i+0xe4>
 800b43c:	881e      	ldrh	r6, [r3, #0]
 800b43e:	4853      	ldr	r0, [pc, #332]	; (800b58c <_printf_i+0x23c>)
 800b440:	2f6f      	cmp	r7, #111	; 0x6f
 800b442:	bf0c      	ite	eq
 800b444:	2308      	moveq	r3, #8
 800b446:	230a      	movne	r3, #10
 800b448:	2100      	movs	r1, #0
 800b44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b44e:	6865      	ldr	r5, [r4, #4]
 800b450:	60a5      	str	r5, [r4, #8]
 800b452:	2d00      	cmp	r5, #0
 800b454:	bfa2      	ittt	ge
 800b456:	6821      	ldrge	r1, [r4, #0]
 800b458:	f021 0104 	bicge.w	r1, r1, #4
 800b45c:	6021      	strge	r1, [r4, #0]
 800b45e:	b90e      	cbnz	r6, 800b464 <_printf_i+0x114>
 800b460:	2d00      	cmp	r5, #0
 800b462:	d04b      	beq.n	800b4fc <_printf_i+0x1ac>
 800b464:	4615      	mov	r5, r2
 800b466:	fbb6 f1f3 	udiv	r1, r6, r3
 800b46a:	fb03 6711 	mls	r7, r3, r1, r6
 800b46e:	5dc7      	ldrb	r7, [r0, r7]
 800b470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b474:	4637      	mov	r7, r6
 800b476:	42bb      	cmp	r3, r7
 800b478:	460e      	mov	r6, r1
 800b47a:	d9f4      	bls.n	800b466 <_printf_i+0x116>
 800b47c:	2b08      	cmp	r3, #8
 800b47e:	d10b      	bne.n	800b498 <_printf_i+0x148>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	07de      	lsls	r6, r3, #31
 800b484:	d508      	bpl.n	800b498 <_printf_i+0x148>
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	4299      	cmp	r1, r3
 800b48c:	bfde      	ittt	le
 800b48e:	2330      	movle	r3, #48	; 0x30
 800b490:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b494:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b498:	1b52      	subs	r2, r2, r5
 800b49a:	6122      	str	r2, [r4, #16]
 800b49c:	f8cd a000 	str.w	sl, [sp]
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	aa03      	add	r2, sp, #12
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	f7ff fee4 	bl	800b274 <_printf_common>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d14a      	bne.n	800b546 <_printf_i+0x1f6>
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4b4:	b004      	add	sp, #16
 800b4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ba:	6823      	ldr	r3, [r4, #0]
 800b4bc:	f043 0320 	orr.w	r3, r3, #32
 800b4c0:	6023      	str	r3, [r4, #0]
 800b4c2:	4833      	ldr	r0, [pc, #204]	; (800b590 <_printf_i+0x240>)
 800b4c4:	2778      	movs	r7, #120	; 0x78
 800b4c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b4ca:	6823      	ldr	r3, [r4, #0]
 800b4cc:	6829      	ldr	r1, [r5, #0]
 800b4ce:	061f      	lsls	r7, r3, #24
 800b4d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4d4:	d402      	bmi.n	800b4dc <_printf_i+0x18c>
 800b4d6:	065f      	lsls	r7, r3, #25
 800b4d8:	bf48      	it	mi
 800b4da:	b2b6      	uxthmi	r6, r6
 800b4dc:	07df      	lsls	r7, r3, #31
 800b4de:	bf48      	it	mi
 800b4e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b4e4:	6029      	str	r1, [r5, #0]
 800b4e6:	bf48      	it	mi
 800b4e8:	6023      	strmi	r3, [r4, #0]
 800b4ea:	b91e      	cbnz	r6, 800b4f4 <_printf_i+0x1a4>
 800b4ec:	6823      	ldr	r3, [r4, #0]
 800b4ee:	f023 0320 	bic.w	r3, r3, #32
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	2310      	movs	r3, #16
 800b4f6:	e7a7      	b.n	800b448 <_printf_i+0xf8>
 800b4f8:	4824      	ldr	r0, [pc, #144]	; (800b58c <_printf_i+0x23c>)
 800b4fa:	e7e4      	b.n	800b4c6 <_printf_i+0x176>
 800b4fc:	4615      	mov	r5, r2
 800b4fe:	e7bd      	b.n	800b47c <_printf_i+0x12c>
 800b500:	682b      	ldr	r3, [r5, #0]
 800b502:	6826      	ldr	r6, [r4, #0]
 800b504:	6961      	ldr	r1, [r4, #20]
 800b506:	1d18      	adds	r0, r3, #4
 800b508:	6028      	str	r0, [r5, #0]
 800b50a:	0635      	lsls	r5, r6, #24
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	d501      	bpl.n	800b514 <_printf_i+0x1c4>
 800b510:	6019      	str	r1, [r3, #0]
 800b512:	e002      	b.n	800b51a <_printf_i+0x1ca>
 800b514:	0670      	lsls	r0, r6, #25
 800b516:	d5fb      	bpl.n	800b510 <_printf_i+0x1c0>
 800b518:	8019      	strh	r1, [r3, #0]
 800b51a:	2300      	movs	r3, #0
 800b51c:	6123      	str	r3, [r4, #16]
 800b51e:	4615      	mov	r5, r2
 800b520:	e7bc      	b.n	800b49c <_printf_i+0x14c>
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	1d1a      	adds	r2, r3, #4
 800b526:	602a      	str	r2, [r5, #0]
 800b528:	681d      	ldr	r5, [r3, #0]
 800b52a:	6862      	ldr	r2, [r4, #4]
 800b52c:	2100      	movs	r1, #0
 800b52e:	4628      	mov	r0, r5
 800b530:	f7f4 feee 	bl	8000310 <memchr>
 800b534:	b108      	cbz	r0, 800b53a <_printf_i+0x1ea>
 800b536:	1b40      	subs	r0, r0, r5
 800b538:	6060      	str	r0, [r4, #4]
 800b53a:	6863      	ldr	r3, [r4, #4]
 800b53c:	6123      	str	r3, [r4, #16]
 800b53e:	2300      	movs	r3, #0
 800b540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b544:	e7aa      	b.n	800b49c <_printf_i+0x14c>
 800b546:	6923      	ldr	r3, [r4, #16]
 800b548:	462a      	mov	r2, r5
 800b54a:	4649      	mov	r1, r9
 800b54c:	4640      	mov	r0, r8
 800b54e:	47d0      	blx	sl
 800b550:	3001      	adds	r0, #1
 800b552:	d0ad      	beq.n	800b4b0 <_printf_i+0x160>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	079b      	lsls	r3, r3, #30
 800b558:	d413      	bmi.n	800b582 <_printf_i+0x232>
 800b55a:	68e0      	ldr	r0, [r4, #12]
 800b55c:	9b03      	ldr	r3, [sp, #12]
 800b55e:	4298      	cmp	r0, r3
 800b560:	bfb8      	it	lt
 800b562:	4618      	movlt	r0, r3
 800b564:	e7a6      	b.n	800b4b4 <_printf_i+0x164>
 800b566:	2301      	movs	r3, #1
 800b568:	4632      	mov	r2, r6
 800b56a:	4649      	mov	r1, r9
 800b56c:	4640      	mov	r0, r8
 800b56e:	47d0      	blx	sl
 800b570:	3001      	adds	r0, #1
 800b572:	d09d      	beq.n	800b4b0 <_printf_i+0x160>
 800b574:	3501      	adds	r5, #1
 800b576:	68e3      	ldr	r3, [r4, #12]
 800b578:	9903      	ldr	r1, [sp, #12]
 800b57a:	1a5b      	subs	r3, r3, r1
 800b57c:	42ab      	cmp	r3, r5
 800b57e:	dcf2      	bgt.n	800b566 <_printf_i+0x216>
 800b580:	e7eb      	b.n	800b55a <_printf_i+0x20a>
 800b582:	2500      	movs	r5, #0
 800b584:	f104 0619 	add.w	r6, r4, #25
 800b588:	e7f5      	b.n	800b576 <_printf_i+0x226>
 800b58a:	bf00      	nop
 800b58c:	0800b9b9 	.word	0x0800b9b9
 800b590:	0800b9ca 	.word	0x0800b9ca

0800b594 <__sflush_r>:
 800b594:	898a      	ldrh	r2, [r1, #12]
 800b596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b59a:	4605      	mov	r5, r0
 800b59c:	0710      	lsls	r0, r2, #28
 800b59e:	460c      	mov	r4, r1
 800b5a0:	d458      	bmi.n	800b654 <__sflush_r+0xc0>
 800b5a2:	684b      	ldr	r3, [r1, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dc05      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	dc02      	bgt.n	800b5b4 <__sflush_r+0x20>
 800b5ae:	2000      	movs	r0, #0
 800b5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	d0f9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b5c0:	682f      	ldr	r7, [r5, #0]
 800b5c2:	6a21      	ldr	r1, [r4, #32]
 800b5c4:	602b      	str	r3, [r5, #0]
 800b5c6:	d032      	beq.n	800b62e <__sflush_r+0x9a>
 800b5c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b5ca:	89a3      	ldrh	r3, [r4, #12]
 800b5cc:	075a      	lsls	r2, r3, #29
 800b5ce:	d505      	bpl.n	800b5dc <__sflush_r+0x48>
 800b5d0:	6863      	ldr	r3, [r4, #4]
 800b5d2:	1ac0      	subs	r0, r0, r3
 800b5d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b5d6:	b10b      	cbz	r3, 800b5dc <__sflush_r+0x48>
 800b5d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5da:	1ac0      	subs	r0, r0, r3
 800b5dc:	2300      	movs	r3, #0
 800b5de:	4602      	mov	r2, r0
 800b5e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b5e2:	6a21      	ldr	r1, [r4, #32]
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	47b0      	blx	r6
 800b5e8:	1c43      	adds	r3, r0, #1
 800b5ea:	89a3      	ldrh	r3, [r4, #12]
 800b5ec:	d106      	bne.n	800b5fc <__sflush_r+0x68>
 800b5ee:	6829      	ldr	r1, [r5, #0]
 800b5f0:	291d      	cmp	r1, #29
 800b5f2:	d82b      	bhi.n	800b64c <__sflush_r+0xb8>
 800b5f4:	4a29      	ldr	r2, [pc, #164]	; (800b69c <__sflush_r+0x108>)
 800b5f6:	410a      	asrs	r2, r1
 800b5f8:	07d6      	lsls	r6, r2, #31
 800b5fa:	d427      	bmi.n	800b64c <__sflush_r+0xb8>
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	6062      	str	r2, [r4, #4]
 800b600:	04d9      	lsls	r1, r3, #19
 800b602:	6922      	ldr	r2, [r4, #16]
 800b604:	6022      	str	r2, [r4, #0]
 800b606:	d504      	bpl.n	800b612 <__sflush_r+0x7e>
 800b608:	1c42      	adds	r2, r0, #1
 800b60a:	d101      	bne.n	800b610 <__sflush_r+0x7c>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b903      	cbnz	r3, 800b612 <__sflush_r+0x7e>
 800b610:	6560      	str	r0, [r4, #84]	; 0x54
 800b612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b614:	602f      	str	r7, [r5, #0]
 800b616:	2900      	cmp	r1, #0
 800b618:	d0c9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b61a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b61e:	4299      	cmp	r1, r3
 800b620:	d002      	beq.n	800b628 <__sflush_r+0x94>
 800b622:	4628      	mov	r0, r5
 800b624:	f7ff fbea 	bl	800adfc <_free_r>
 800b628:	2000      	movs	r0, #0
 800b62a:	6360      	str	r0, [r4, #52]	; 0x34
 800b62c:	e7c0      	b.n	800b5b0 <__sflush_r+0x1c>
 800b62e:	2301      	movs	r3, #1
 800b630:	4628      	mov	r0, r5
 800b632:	47b0      	blx	r6
 800b634:	1c41      	adds	r1, r0, #1
 800b636:	d1c8      	bne.n	800b5ca <__sflush_r+0x36>
 800b638:	682b      	ldr	r3, [r5, #0]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d0c5      	beq.n	800b5ca <__sflush_r+0x36>
 800b63e:	2b1d      	cmp	r3, #29
 800b640:	d001      	beq.n	800b646 <__sflush_r+0xb2>
 800b642:	2b16      	cmp	r3, #22
 800b644:	d101      	bne.n	800b64a <__sflush_r+0xb6>
 800b646:	602f      	str	r7, [r5, #0]
 800b648:	e7b1      	b.n	800b5ae <__sflush_r+0x1a>
 800b64a:	89a3      	ldrh	r3, [r4, #12]
 800b64c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b650:	81a3      	strh	r3, [r4, #12]
 800b652:	e7ad      	b.n	800b5b0 <__sflush_r+0x1c>
 800b654:	690f      	ldr	r7, [r1, #16]
 800b656:	2f00      	cmp	r7, #0
 800b658:	d0a9      	beq.n	800b5ae <__sflush_r+0x1a>
 800b65a:	0793      	lsls	r3, r2, #30
 800b65c:	680e      	ldr	r6, [r1, #0]
 800b65e:	bf08      	it	eq
 800b660:	694b      	ldreq	r3, [r1, #20]
 800b662:	600f      	str	r7, [r1, #0]
 800b664:	bf18      	it	ne
 800b666:	2300      	movne	r3, #0
 800b668:	eba6 0807 	sub.w	r8, r6, r7
 800b66c:	608b      	str	r3, [r1, #8]
 800b66e:	f1b8 0f00 	cmp.w	r8, #0
 800b672:	dd9c      	ble.n	800b5ae <__sflush_r+0x1a>
 800b674:	6a21      	ldr	r1, [r4, #32]
 800b676:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b678:	4643      	mov	r3, r8
 800b67a:	463a      	mov	r2, r7
 800b67c:	4628      	mov	r0, r5
 800b67e:	47b0      	blx	r6
 800b680:	2800      	cmp	r0, #0
 800b682:	dc06      	bgt.n	800b692 <__sflush_r+0xfe>
 800b684:	89a3      	ldrh	r3, [r4, #12]
 800b686:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b68a:	81a3      	strh	r3, [r4, #12]
 800b68c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b690:	e78e      	b.n	800b5b0 <__sflush_r+0x1c>
 800b692:	4407      	add	r7, r0
 800b694:	eba8 0800 	sub.w	r8, r8, r0
 800b698:	e7e9      	b.n	800b66e <__sflush_r+0xda>
 800b69a:	bf00      	nop
 800b69c:	dfbffffe 	.word	0xdfbffffe

0800b6a0 <_fflush_r>:
 800b6a0:	b538      	push	{r3, r4, r5, lr}
 800b6a2:	690b      	ldr	r3, [r1, #16]
 800b6a4:	4605      	mov	r5, r0
 800b6a6:	460c      	mov	r4, r1
 800b6a8:	b913      	cbnz	r3, 800b6b0 <_fflush_r+0x10>
 800b6aa:	2500      	movs	r5, #0
 800b6ac:	4628      	mov	r0, r5
 800b6ae:	bd38      	pop	{r3, r4, r5, pc}
 800b6b0:	b118      	cbz	r0, 800b6ba <_fflush_r+0x1a>
 800b6b2:	6a03      	ldr	r3, [r0, #32]
 800b6b4:	b90b      	cbnz	r3, 800b6ba <_fflush_r+0x1a>
 800b6b6:	f7ff fa99 	bl	800abec <__sinit>
 800b6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d0f3      	beq.n	800b6aa <_fflush_r+0xa>
 800b6c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b6c4:	07d0      	lsls	r0, r2, #31
 800b6c6:	d404      	bmi.n	800b6d2 <_fflush_r+0x32>
 800b6c8:	0599      	lsls	r1, r3, #22
 800b6ca:	d402      	bmi.n	800b6d2 <_fflush_r+0x32>
 800b6cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ce:	f7ff fb92 	bl	800adf6 <__retarget_lock_acquire_recursive>
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	4621      	mov	r1, r4
 800b6d6:	f7ff ff5d 	bl	800b594 <__sflush_r>
 800b6da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b6dc:	07da      	lsls	r2, r3, #31
 800b6de:	4605      	mov	r5, r0
 800b6e0:	d4e4      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6e2:	89a3      	ldrh	r3, [r4, #12]
 800b6e4:	059b      	lsls	r3, r3, #22
 800b6e6:	d4e1      	bmi.n	800b6ac <_fflush_r+0xc>
 800b6e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b6ea:	f7ff fb85 	bl	800adf8 <__retarget_lock_release_recursive>
 800b6ee:	e7dd      	b.n	800b6ac <_fflush_r+0xc>

0800b6f0 <__swbuf_r>:
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	460e      	mov	r6, r1
 800b6f4:	4614      	mov	r4, r2
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	b118      	cbz	r0, 800b702 <__swbuf_r+0x12>
 800b6fa:	6a03      	ldr	r3, [r0, #32]
 800b6fc:	b90b      	cbnz	r3, 800b702 <__swbuf_r+0x12>
 800b6fe:	f7ff fa75 	bl	800abec <__sinit>
 800b702:	69a3      	ldr	r3, [r4, #24]
 800b704:	60a3      	str	r3, [r4, #8]
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	071a      	lsls	r2, r3, #28
 800b70a:	d525      	bpl.n	800b758 <__swbuf_r+0x68>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	b31b      	cbz	r3, 800b758 <__swbuf_r+0x68>
 800b710:	6823      	ldr	r3, [r4, #0]
 800b712:	6922      	ldr	r2, [r4, #16]
 800b714:	1a98      	subs	r0, r3, r2
 800b716:	6963      	ldr	r3, [r4, #20]
 800b718:	b2f6      	uxtb	r6, r6
 800b71a:	4283      	cmp	r3, r0
 800b71c:	4637      	mov	r7, r6
 800b71e:	dc04      	bgt.n	800b72a <__swbuf_r+0x3a>
 800b720:	4621      	mov	r1, r4
 800b722:	4628      	mov	r0, r5
 800b724:	f7ff ffbc 	bl	800b6a0 <_fflush_r>
 800b728:	b9e0      	cbnz	r0, 800b764 <__swbuf_r+0x74>
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	3b01      	subs	r3, #1
 800b72e:	60a3      	str	r3, [r4, #8]
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	6022      	str	r2, [r4, #0]
 800b736:	701e      	strb	r6, [r3, #0]
 800b738:	6962      	ldr	r2, [r4, #20]
 800b73a:	1c43      	adds	r3, r0, #1
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d004      	beq.n	800b74a <__swbuf_r+0x5a>
 800b740:	89a3      	ldrh	r3, [r4, #12]
 800b742:	07db      	lsls	r3, r3, #31
 800b744:	d506      	bpl.n	800b754 <__swbuf_r+0x64>
 800b746:	2e0a      	cmp	r6, #10
 800b748:	d104      	bne.n	800b754 <__swbuf_r+0x64>
 800b74a:	4621      	mov	r1, r4
 800b74c:	4628      	mov	r0, r5
 800b74e:	f7ff ffa7 	bl	800b6a0 <_fflush_r>
 800b752:	b938      	cbnz	r0, 800b764 <__swbuf_r+0x74>
 800b754:	4638      	mov	r0, r7
 800b756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b758:	4621      	mov	r1, r4
 800b75a:	4628      	mov	r0, r5
 800b75c:	f000 f806 	bl	800b76c <__swsetup_r>
 800b760:	2800      	cmp	r0, #0
 800b762:	d0d5      	beq.n	800b710 <__swbuf_r+0x20>
 800b764:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b768:	e7f4      	b.n	800b754 <__swbuf_r+0x64>
	...

0800b76c <__swsetup_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	4b2a      	ldr	r3, [pc, #168]	; (800b818 <__swsetup_r+0xac>)
 800b770:	4605      	mov	r5, r0
 800b772:	6818      	ldr	r0, [r3, #0]
 800b774:	460c      	mov	r4, r1
 800b776:	b118      	cbz	r0, 800b780 <__swsetup_r+0x14>
 800b778:	6a03      	ldr	r3, [r0, #32]
 800b77a:	b90b      	cbnz	r3, 800b780 <__swsetup_r+0x14>
 800b77c:	f7ff fa36 	bl	800abec <__sinit>
 800b780:	89a3      	ldrh	r3, [r4, #12]
 800b782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b786:	0718      	lsls	r0, r3, #28
 800b788:	d422      	bmi.n	800b7d0 <__swsetup_r+0x64>
 800b78a:	06d9      	lsls	r1, r3, #27
 800b78c:	d407      	bmi.n	800b79e <__swsetup_r+0x32>
 800b78e:	2309      	movs	r3, #9
 800b790:	602b      	str	r3, [r5, #0]
 800b792:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b79c:	e034      	b.n	800b808 <__swsetup_r+0x9c>
 800b79e:	0758      	lsls	r0, r3, #29
 800b7a0:	d512      	bpl.n	800b7c8 <__swsetup_r+0x5c>
 800b7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7a4:	b141      	cbz	r1, 800b7b8 <__swsetup_r+0x4c>
 800b7a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7aa:	4299      	cmp	r1, r3
 800b7ac:	d002      	beq.n	800b7b4 <__swsetup_r+0x48>
 800b7ae:	4628      	mov	r0, r5
 800b7b0:	f7ff fb24 	bl	800adfc <_free_r>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	6363      	str	r3, [r4, #52]	; 0x34
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	6063      	str	r3, [r4, #4]
 800b7c4:	6923      	ldr	r3, [r4, #16]
 800b7c6:	6023      	str	r3, [r4, #0]
 800b7c8:	89a3      	ldrh	r3, [r4, #12]
 800b7ca:	f043 0308 	orr.w	r3, r3, #8
 800b7ce:	81a3      	strh	r3, [r4, #12]
 800b7d0:	6923      	ldr	r3, [r4, #16]
 800b7d2:	b94b      	cbnz	r3, 800b7e8 <__swsetup_r+0x7c>
 800b7d4:	89a3      	ldrh	r3, [r4, #12]
 800b7d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b7da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7de:	d003      	beq.n	800b7e8 <__swsetup_r+0x7c>
 800b7e0:	4621      	mov	r1, r4
 800b7e2:	4628      	mov	r0, r5
 800b7e4:	f000 f850 	bl	800b888 <__smakebuf_r>
 800b7e8:	89a0      	ldrh	r0, [r4, #12]
 800b7ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ee:	f010 0301 	ands.w	r3, r0, #1
 800b7f2:	d00a      	beq.n	800b80a <__swsetup_r+0x9e>
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60a3      	str	r3, [r4, #8]
 800b7f8:	6963      	ldr	r3, [r4, #20]
 800b7fa:	425b      	negs	r3, r3
 800b7fc:	61a3      	str	r3, [r4, #24]
 800b7fe:	6923      	ldr	r3, [r4, #16]
 800b800:	b943      	cbnz	r3, 800b814 <__swsetup_r+0xa8>
 800b802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b806:	d1c4      	bne.n	800b792 <__swsetup_r+0x26>
 800b808:	bd38      	pop	{r3, r4, r5, pc}
 800b80a:	0781      	lsls	r1, r0, #30
 800b80c:	bf58      	it	pl
 800b80e:	6963      	ldrpl	r3, [r4, #20]
 800b810:	60a3      	str	r3, [r4, #8]
 800b812:	e7f4      	b.n	800b7fe <__swsetup_r+0x92>
 800b814:	2000      	movs	r0, #0
 800b816:	e7f7      	b.n	800b808 <__swsetup_r+0x9c>
 800b818:	24000068 	.word	0x24000068

0800b81c <_sbrk_r>:
 800b81c:	b538      	push	{r3, r4, r5, lr}
 800b81e:	4d06      	ldr	r5, [pc, #24]	; (800b838 <_sbrk_r+0x1c>)
 800b820:	2300      	movs	r3, #0
 800b822:	4604      	mov	r4, r0
 800b824:	4608      	mov	r0, r1
 800b826:	602b      	str	r3, [r5, #0]
 800b828:	f7f5 fd9c 	bl	8001364 <_sbrk>
 800b82c:	1c43      	adds	r3, r0, #1
 800b82e:	d102      	bne.n	800b836 <_sbrk_r+0x1a>
 800b830:	682b      	ldr	r3, [r5, #0]
 800b832:	b103      	cbz	r3, 800b836 <_sbrk_r+0x1a>
 800b834:	6023      	str	r3, [r4, #0]
 800b836:	bd38      	pop	{r3, r4, r5, pc}
 800b838:	24000598 	.word	0x24000598

0800b83c <__swhatbuf_r>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	460c      	mov	r4, r1
 800b840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b844:	2900      	cmp	r1, #0
 800b846:	b096      	sub	sp, #88	; 0x58
 800b848:	4615      	mov	r5, r2
 800b84a:	461e      	mov	r6, r3
 800b84c:	da0d      	bge.n	800b86a <__swhatbuf_r+0x2e>
 800b84e:	89a3      	ldrh	r3, [r4, #12]
 800b850:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b854:	f04f 0100 	mov.w	r1, #0
 800b858:	bf0c      	ite	eq
 800b85a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b85e:	2340      	movne	r3, #64	; 0x40
 800b860:	2000      	movs	r0, #0
 800b862:	6031      	str	r1, [r6, #0]
 800b864:	602b      	str	r3, [r5, #0]
 800b866:	b016      	add	sp, #88	; 0x58
 800b868:	bd70      	pop	{r4, r5, r6, pc}
 800b86a:	466a      	mov	r2, sp
 800b86c:	f000 f848 	bl	800b900 <_fstat_r>
 800b870:	2800      	cmp	r0, #0
 800b872:	dbec      	blt.n	800b84e <__swhatbuf_r+0x12>
 800b874:	9901      	ldr	r1, [sp, #4]
 800b876:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b87a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b87e:	4259      	negs	r1, r3
 800b880:	4159      	adcs	r1, r3
 800b882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b886:	e7eb      	b.n	800b860 <__swhatbuf_r+0x24>

0800b888 <__smakebuf_r>:
 800b888:	898b      	ldrh	r3, [r1, #12]
 800b88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b88c:	079d      	lsls	r5, r3, #30
 800b88e:	4606      	mov	r6, r0
 800b890:	460c      	mov	r4, r1
 800b892:	d507      	bpl.n	800b8a4 <__smakebuf_r+0x1c>
 800b894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	6123      	str	r3, [r4, #16]
 800b89c:	2301      	movs	r3, #1
 800b89e:	6163      	str	r3, [r4, #20]
 800b8a0:	b002      	add	sp, #8
 800b8a2:	bd70      	pop	{r4, r5, r6, pc}
 800b8a4:	ab01      	add	r3, sp, #4
 800b8a6:	466a      	mov	r2, sp
 800b8a8:	f7ff ffc8 	bl	800b83c <__swhatbuf_r>
 800b8ac:	9900      	ldr	r1, [sp, #0]
 800b8ae:	4605      	mov	r5, r0
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	f7ff fb0f 	bl	800aed4 <_malloc_r>
 800b8b6:	b948      	cbnz	r0, 800b8cc <__smakebuf_r+0x44>
 800b8b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8bc:	059a      	lsls	r2, r3, #22
 800b8be:	d4ef      	bmi.n	800b8a0 <__smakebuf_r+0x18>
 800b8c0:	f023 0303 	bic.w	r3, r3, #3
 800b8c4:	f043 0302 	orr.w	r3, r3, #2
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	e7e3      	b.n	800b894 <__smakebuf_r+0xc>
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	6020      	str	r0, [r4, #0]
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	6163      	str	r3, [r4, #20]
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	6120      	str	r0, [r4, #16]
 800b8de:	b15b      	cbz	r3, 800b8f8 <__smakebuf_r+0x70>
 800b8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f000 f81d 	bl	800b924 <_isatty_r>
 800b8ea:	b128      	cbz	r0, 800b8f8 <__smakebuf_r+0x70>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f023 0303 	bic.w	r3, r3, #3
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	431d      	orrs	r5, r3
 800b8fc:	81a5      	strh	r5, [r4, #12]
 800b8fe:	e7cf      	b.n	800b8a0 <__smakebuf_r+0x18>

0800b900 <_fstat_r>:
 800b900:	b538      	push	{r3, r4, r5, lr}
 800b902:	4d07      	ldr	r5, [pc, #28]	; (800b920 <_fstat_r+0x20>)
 800b904:	2300      	movs	r3, #0
 800b906:	4604      	mov	r4, r0
 800b908:	4608      	mov	r0, r1
 800b90a:	4611      	mov	r1, r2
 800b90c:	602b      	str	r3, [r5, #0]
 800b90e:	f7f5 fd00 	bl	8001312 <_fstat>
 800b912:	1c43      	adds	r3, r0, #1
 800b914:	d102      	bne.n	800b91c <_fstat_r+0x1c>
 800b916:	682b      	ldr	r3, [r5, #0]
 800b918:	b103      	cbz	r3, 800b91c <_fstat_r+0x1c>
 800b91a:	6023      	str	r3, [r4, #0]
 800b91c:	bd38      	pop	{r3, r4, r5, pc}
 800b91e:	bf00      	nop
 800b920:	24000598 	.word	0x24000598

0800b924 <_isatty_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4d06      	ldr	r5, [pc, #24]	; (800b940 <_isatty_r+0x1c>)
 800b928:	2300      	movs	r3, #0
 800b92a:	4604      	mov	r4, r0
 800b92c:	4608      	mov	r0, r1
 800b92e:	602b      	str	r3, [r5, #0]
 800b930:	f7f5 fcff 	bl	8001332 <_isatty>
 800b934:	1c43      	adds	r3, r0, #1
 800b936:	d102      	bne.n	800b93e <_isatty_r+0x1a>
 800b938:	682b      	ldr	r3, [r5, #0]
 800b93a:	b103      	cbz	r3, 800b93e <_isatty_r+0x1a>
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
 800b940:	24000598 	.word	0x24000598

0800b944 <_init>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr

0800b950 <_fini>:
 800b950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b952:	bf00      	nop
 800b954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b956:	bc08      	pop	{r3}
 800b958:	469e      	mov	lr, r3
 800b95a:	4770      	bx	lr
