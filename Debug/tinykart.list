
tinykart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b7e8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800bab8  0800bab8  0001bab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bb30  0800bb30  0001bb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bb38  0800bb38  0001bb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bb3c  0800bb3c  0001bb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  0800bb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  0800bbac  0002006c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  0800bc0c  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2400012c  0800bc6c  0002012c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240005a8  0800bc6c  000205a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a585  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002acf  00000000  00000000  0003a722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  0003d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f15  00000000  00000000  0003e538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034988  00000000  00000000  0003f44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a9f  00000000  00000000  00073dd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001541fa  00000000  00000000  0008c874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a10  00000000  00000000  001e0a70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001e6480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400012c 	.word	0x2400012c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800baa0 	.word	0x0800baa0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000130 	.word	0x24000130
 800030c:	0800baa0 	.word	0x0800baa0

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <_write>:
uint8_t rx_indx;
uint8_t rx_data[11];
uint8_t rx_buffer[47];
uint8_t transfer_cplt;

int _write(int file, char *ptr, int len) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c0:	68b9      	ldr	r1, [r7, #8]
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <_write+0x28>)
 80006c4:	f008 fa32 	bl	8008b2c <HAL_UART_Transmit>
		return len;
 80006c8:	687b      	ldr	r3, [r7, #4]
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3710      	adds	r7, #16
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2400027c 	.word	0x2400027c

080006d8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006dc:	f000 ff16 	bl	800150c <HAL_Init>

	/* USER CODE BEGIN Init */
	HAL_TIM_PWM_Start(&htim1, 1);
 80006e0:	2101      	movs	r1, #1
 80006e2:	4810      	ldr	r0, [pc, #64]	; (8000724 <main+0x4c>)
 80006e4:	f007 fac4 	bl	8007c70 <HAL_TIM_PWM_Start>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e8:	f000 f824 	bl	8000734 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ec:	f000 fa3c 	bl	8000b68 <MX_GPIO_Init>
	MX_DMA_Init();
 80006f0:	f000 fa1a 	bl	8000b28 <MX_DMA_Init>
	MX_USART3_UART_Init();
 80006f4:	f000 f9c4 	bl	8000a80 <MX_USART3_UART_Init>
	MX_USB_OTG_HS_USB_Init();
 80006f8:	f000 fa0e 	bl	8000b18 <MX_USB_OTG_HS_USB_Init>
	MX_TIM1_Init();
 80006fc:	f000 f8d8 	bl	80008b0 <MX_TIM1_Init>
	MX_USART2_UART_Init();
 8000700:	f000 f972 	bl	80009e8 <MX_USART2_UART_Init>
	MX_ETH_Init();
 8000704:	f000 f888 	bl	8000818 <MX_ETH_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		HAL_UART_Receive_DMA(&huart2, rx_buffer, 47);
 8000708:	222f      	movs	r2, #47	; 0x2f
 800070a:	4907      	ldr	r1, [pc, #28]	; (8000728 <main+0x50>)
 800070c:	4807      	ldr	r0, [pc, #28]	; (800072c <main+0x54>)
 800070e:	f008 fa9b 	bl	8008c48 <HAL_UART_Receive_DMA>

		printf("hi");
 8000712:	4807      	ldr	r0, [pc, #28]	; (8000730 <main+0x58>)
 8000714:	f00a fb4e 	bl	800adb4 <iprintf>
		HAL_Delay(500);
 8000718:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800071c:	f000 ff88 	bl	8001630 <HAL_Delay>
		HAL_UART_Receive_DMA(&huart2, rx_buffer, 47);
 8000720:	e7f2      	b.n	8000708 <main+0x30>
 8000722:	bf00      	nop
 8000724:	24000230 	.word	0x24000230
 8000728:	2400041c 	.word	0x2400041c
 800072c:	2400027c 	.word	0x2400027c
 8000730:	0800bab8 	.word	0x0800bab8

08000734 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b09c      	sub	sp, #112	; 0x70
 8000738:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800073a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073e:	224c      	movs	r2, #76	; 0x4c
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f00a fb8b 	bl	800ae5e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2220      	movs	r2, #32
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f00a fb85 	bl	800ae5e <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000754:	2002      	movs	r0, #2
 8000756:	f004 fcd1 	bl	80050fc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800075a:	2300      	movs	r3, #0
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <SystemClock_Config+0xe0>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000766:	4a2b      	ldr	r2, [pc, #172]	; (8000814 <SystemClock_Config+0xe0>)
 8000768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <SystemClock_Config+0xe0>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 800077a:	bf00      	nop
 800077c:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SystemClock_Config+0xe0>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000784:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000788:	d1f8      	bne.n	800077c <SystemClock_Config+0x48>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800078a:	2321      	movs	r3, #33	; 0x21
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800078e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079c:	2302      	movs	r3, #2
 800079e:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 27;
 80007a4:	231b      	movs	r3, #27
 80007a6:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ac:	2304      	movs	r3, #4
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007b4:	230c      	movs	r3, #12
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fcd3 	bl	8005170 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xa0>
		Error_Handler();
 80007d0:	f000 fad0 	bl	8000d74 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007d4:	233f      	movs	r3, #63	; 0x3f
 80007d6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2303      	movs	r3, #3
 80007da:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e4:	2340      	movs	r3, #64	; 0x40
 80007e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80007e8:	2350      	movs	r3, #80	; 0x50
 80007ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007f0:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f2:	2340      	movs	r3, #64	; 0x40
 80007f4:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 f892 	bl	8005924 <HAL_RCC_ClockConfig>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <SystemClock_Config+0xd6>
		Error_Handler();
 8000806:	f000 fab5 	bl	8000d74 <Error_Handler>
	}
}
 800080a:	bf00      	nop
 800080c:	3770      	adds	r7, #112	; 0x70
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	58024800 	.word	0x58024800

08000818 <MX_ETH_Init>:
/**
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_ETH_Init+0x80>)
 800081e:	4a1f      	ldr	r2, [pc, #124]	; (800089c <MX_ETH_Init+0x84>)
 8000820:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000822:	4b1f      	ldr	r3, [pc, #124]	; (80008a0 <MX_ETH_Init+0x88>)
 8000824:	2200      	movs	r2, #0
 8000826:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000828:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <MX_ETH_Init+0x88>)
 800082a:	2280      	movs	r2, #128	; 0x80
 800082c:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <MX_ETH_Init+0x88>)
 8000830:	22e1      	movs	r2, #225	; 0xe1
 8000832:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000834:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <MX_ETH_Init+0x88>)
 8000836:	2200      	movs	r2, #0
 8000838:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 800083a:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <MX_ETH_Init+0x88>)
 800083c:	2200      	movs	r2, #0
 800083e:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000840:	4b17      	ldr	r3, [pc, #92]	; (80008a0 <MX_ETH_Init+0x88>)
 8000842:	2200      	movs	r2, #0
 8000844:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_ETH_Init+0x80>)
 8000848:	4a15      	ldr	r2, [pc, #84]	; (80008a0 <MX_ETH_Init+0x88>)
 800084a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_ETH_Init+0x80>)
 800084e:	2201      	movs	r2, #1
 8000850:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_ETH_Init+0x80>)
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <MX_ETH_Init+0x8c>)
 8000856:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_ETH_Init+0x80>)
 800085a:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <MX_ETH_Init+0x90>)
 800085c:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_ETH_Init+0x80>)
 8000860:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000864:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000866:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_ETH_Init+0x80>)
 8000868:	f003 fe62 	bl	8004530 <HAL_ETH_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ETH_Init+0x5e>
		Error_Handler();
 8000872:	f000 fa7f 	bl	8000d74 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000876:	2238      	movs	r2, #56	; 0x38
 8000878:	2100      	movs	r1, #0
 800087a:	480c      	ldr	r0, [pc, #48]	; (80008ac <MX_ETH_Init+0x94>)
 800087c:	f00a faef 	bl	800ae5e <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <MX_ETH_Init+0x94>)
 8000882:	2221      	movs	r2, #33	; 0x21
 8000884:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_ETH_Init+0x94>)
 8000888:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800088c:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800088e:	4b07      	ldr	r3, [pc, #28]	; (80008ac <MX_ETH_Init+0x94>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	bd80      	pop	{r7, pc}
 8000898:	24000180 	.word	0x24000180
 800089c:	40028000 	.word	0x40028000
 80008a0:	2400044c 	.word	0x2400044c
 80008a4:	240000cc 	.word	0x240000cc
 80008a8:	2400006c 	.word	0x2400006c
 80008ac:	24000148 	.word	0x24000148

080008b0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b098      	sub	sp, #96	; 0x60
 80008b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80008b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80008c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]
 80008d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2234      	movs	r2, #52	; 0x34
 80008da:	2100      	movs	r1, #0
 80008dc:	4618      	mov	r0, r3
 80008de:	f00a fabe 	bl	800ae5e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80008e2:	4b3f      	ldr	r3, [pc, #252]	; (80009e0 <MX_TIM1_Init+0x130>)
 80008e4:	4a3f      	ldr	r2, [pc, #252]	; (80009e4 <MX_TIM1_Init+0x134>)
 80008e6:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 2 * 1080 - 1;
 80008e8:	4b3d      	ldr	r3, [pc, #244]	; (80009e0 <MX_TIM1_Init+0x130>)
 80008ea:	f640 026f 	movw	r2, #2159	; 0x86f
 80008ee:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b3b      	ldr	r3, [pc, #236]	; (80009e0 <MX_TIM1_Init+0x130>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;
 80008f6:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <MX_TIM1_Init+0x130>)
 80008f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008fc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fe:	4b38      	ldr	r3, [pc, #224]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000904:	4b36      	ldr	r3, [pc, #216]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000906:	2200      	movs	r2, #0
 8000908:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090a:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <MX_TIM1_Init+0x130>)
 800090c:	2200      	movs	r2, #0
 800090e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000910:	4833      	ldr	r0, [pc, #204]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000912:	f007 f955 	bl	8007bc0 <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x70>
		Error_Handler();
 800091c:	f000 fa2a 	bl	8000d74 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	657b      	str	r3, [r7, #84]	; 0x54
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	65bb      	str	r3, [r7, #88]	; 0x58
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800092c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000930:	4619      	mov	r1, r3
 8000932:	482b      	ldr	r0, [pc, #172]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000934:	f007 ff6e 	bl	8008814 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800093e:	f000 fa19 	bl	8000d74 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000942:	2360      	movs	r3, #96	; 0x60
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.Pulse = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800094a:	2300      	movs	r3, #0
 800094c:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800094e:	2300      	movs	r3, #0
 8000950:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 800095e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000962:	2200      	movs	r2, #0
 8000964:	4619      	mov	r1, r3
 8000966:	481e      	ldr	r0, [pc, #120]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000968:	f007 fa9e 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8000972:	f000 f9ff 	bl	8000d74 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000976:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800097a:	2204      	movs	r2, #4
 800097c:	4619      	mov	r1, r3
 800097e:	4818      	ldr	r0, [pc, #96]	; (80009e0 <MX_TIM1_Init+0x130>)
 8000980:	f007 fa92 	bl	8007ea8 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xde>
			!= HAL_OK) {
		Error_Handler();
 800098a:	f000 f9f3 	bl	8000d74 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009a6:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80009b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.Break2Filter = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009ba:	2300      	movs	r3, #0
 80009bc:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4619      	mov	r1, r3
 80009c2:	4807      	ldr	r0, [pc, #28]	; (80009e0 <MX_TIM1_Init+0x130>)
 80009c4:	f007 ffc2 	bl	800894c <HAL_TIMEx_ConfigBreakDeadTime>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM1_Init+0x122>
			!= HAL_OK) {
		Error_Handler();
 80009ce:	f000 f9d1 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80009d2:	4803      	ldr	r0, [pc, #12]	; (80009e0 <MX_TIM1_Init+0x130>)
 80009d4:	f000 fade 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 80009d8:	bf00      	nop
 80009da:	3760      	adds	r7, #96	; 0x60
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000230 	.word	0x24000230
 80009e4:	40010000 	.word	0x40010000

080009e8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART2_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 230400;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80009f8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
	huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a32:	f008 f82b 	bl	8008a8c <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART2_UART_Init+0x58>
		Error_Handler();
 8000a3c:	f000 f99a 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a44:	f00a f829 	bl	800aa9a <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000a4e:	f000 f991 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a56:	f00a f85e 	bl	800ab16 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART2_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000a60:	f000 f988 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK) {
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART2_UART_Init+0x90>)
 8000a66:	f009 ffdf 	bl	800aa28 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART2_UART_Init+0x8c>
		Error_Handler();
 8000a70:	f000 f980 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2400027c 	.word	0x2400027c
 8000a7c:	40004400 	.word	0x40004400

08000a80 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a84:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a86:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <MX_USART3_UART_Init+0x94>)
 8000a88:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a8a:	4b21      	ldr	r3, [pc, #132]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a90:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b1c      	ldr	r3, [pc, #112]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b1a      	ldr	r3, [pc, #104]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac2:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ac8:	4811      	ldr	r0, [pc, #68]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aca:	f007 ffdf 	bl	8008a8c <HAL_UART_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8000ad4:	f000 f94e 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8000ad8:	2100      	movs	r1, #0
 8000ada:	480d      	ldr	r0, [pc, #52]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000adc:	f009 ffdd 	bl	800aa9a <HAL_UARTEx_SetTxFifoThreshold>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8000ae6:	f000 f945 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8000aea:	2100      	movs	r1, #0
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000aee:	f00a f812 	bl	800ab16 <HAL_UARTEx_SetRxFifoThreshold>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8000af8:	f000 f93c 	bl	8000d74 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8000afc:	4804      	ldr	r0, [pc, #16]	; (8000b10 <MX_USART3_UART_Init+0x90>)
 8000afe:	f009 ff93 	bl	800aa28 <HAL_UARTEx_DisableFifoMode>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 8000b08:	f000 f934 	bl	8000d74 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	24000310 	.word	0x24000310
 8000b14:	40004800 	.word	0x40004800

08000b18 <MX_USB_OTG_HS_USB_Init>:
/**
 * @brief USB_OTG_HS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_HS_USB_Init(void) {
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_HS_Init 1 */
	/* USER CODE BEGIN USB_OTG_HS_Init 2 */

	/* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000b2e:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b36:	f043 0301 	orr.w	r3, r3, #1
 8000b3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_DMA_Init+0x3c>)
 8000b40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	200b      	movs	r0, #11
 8000b52:	f000 fe80 	bl	8001856 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b56:	200b      	movs	r0, #11
 8000b58:	f000 fe97 	bl	800188a <HAL_NVIC_EnableIRQ>

}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	58024400 	.word	0x58024400

08000b68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08c      	sub	sp, #48	; 0x30
 8000b6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b71      	ldr	r3, [pc, #452]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4a6f      	ldr	r2, [pc, #444]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4b6d      	ldr	r3, [pc, #436]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4a68      	ldr	r2, [pc, #416]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4b65      	ldr	r3, [pc, #404]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b62      	ldr	r3, [pc, #392]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4a60      	ldr	r2, [pc, #384]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4a59      	ldr	r2, [pc, #356]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4b56      	ldr	r3, [pc, #344]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0302 	and.w	r3, r3, #2
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf6:	4b53      	ldr	r3, [pc, #332]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a51      	ldr	r2, [pc, #324]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b4f      	ldr	r3, [pc, #316]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0310 	and.w	r3, r3, #16
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c14:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a4a      	ldr	r2, [pc, #296]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c1c:	f043 0308 	orr.w	r3, r3, #8
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a42      	ldr	r2, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b40      	ldr	r3, [pc, #256]	; (8000d44 <MX_GPIO_Init+0x1dc>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin | LED_RED_Pin, GPIO_PIN_RESET);
 8000c50:	2200      	movs	r2, #0
 8000c52:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c56:	483c      	ldr	r0, [pc, #240]	; (8000d48 <MX_GPIO_Init+0x1e0>)
 8000c58:	f004 fa36 	bl	80050c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin,
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c62:	483a      	ldr	r0, [pc, #232]	; (8000d4c <MX_GPIO_Init+0x1e4>)
 8000c64:	f004 fa30 	bl	80050c8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4838      	ldr	r0, [pc, #224]	; (8000d50 <MX_GPIO_Init+0x1e8>)
 8000c6e:	f004 fa2b 	bl	80050c8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000c72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c76:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	4833      	ldr	r0, [pc, #204]	; (8000d54 <MX_GPIO_Init+0x1ec>)
 8000c88:	f004 f876 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin | LED_RED_Pin;
 8000c8c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4828      	ldr	r0, [pc, #160]	; (8000d48 <MX_GPIO_Init+0x1e0>)
 8000ca6:	f004 f867 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cae:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4822      	ldr	r0, [pc, #136]	; (8000d4c <MX_GPIO_Init+0x1e4>)
 8000cc4:	f004 f858 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ccc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	481e      	ldr	r0, [pc, #120]	; (8000d58 <MX_GPIO_Init+0x1f0>)
 8000cde:	f004 f84b 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ce2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ce6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4819      	ldr	r0, [pc, #100]	; (8000d5c <MX_GPIO_Init+0x1f4>)
 8000cf8:	f004 f83e 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_FS_ID_Pin */
	GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d0e:	230a      	movs	r3, #10
 8000d10:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4810      	ldr	r0, [pc, #64]	; (8000d5c <MX_GPIO_Init+0x1f4>)
 8000d1a:	f004 f82d 	bl	8004d78 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_YELLOW_Pin */
	GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4806      	ldr	r0, [pc, #24]	; (8000d50 <MX_GPIO_Init+0x1e8>)
 8000d36:	f004 f81f 	bl	8004d78 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	58024400 	.word	0x58024400
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58020c00 	.word	0x58020c00
 8000d50:	58021000 	.word	0x58021000
 8000d54:	58020800 	.word	0x58020800
 8000d58:	58021800 	.word	0x58021800
 8000d5c:	58020000 	.word	0x58020000

08000d60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x30>)
 8000d88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d8c:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_MspInit+0x30>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_MspInit+0x30>)
 8000d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9c:	f003 0302 	and.w	r3, r3, #2
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	58024400 	.word	0x58024400

08000db4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08e      	sub	sp, #56	; 0x38
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a59      	ldr	r2, [pc, #356]	; (8000f38 <HAL_ETH_MspInit+0x184>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	f040 80ab 	bne.w	8000f2e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dd8:	4b58      	ldr	r3, [pc, #352]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dde:	4a57      	ldr	r2, [pc, #348]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000de8:	4b54      	ldr	r3, [pc, #336]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df2:	623b      	str	r3, [r7, #32]
 8000df4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000df6:	4b51      	ldr	r3, [pc, #324]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dfc:	4a4f      	ldr	r2, [pc, #316]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e02:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e14:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	4a48      	ldr	r2, [pc, #288]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e24:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	4b42      	ldr	r3, [pc, #264]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e38:	4a40      	ldr	r2, [pc, #256]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e42:	4b3e      	ldr	r3, [pc, #248]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	617b      	str	r3, [r7, #20]
 8000e4e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e50:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e56:	4a39      	ldr	r2, [pc, #228]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e60:	4b36      	ldr	r3, [pc, #216]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	613b      	str	r3, [r7, #16]
 8000e6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6e:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a31      	ldr	r2, [pc, #196]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e76:	f043 0302 	orr.w	r3, r3, #2
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e8c:	4b2b      	ldr	r3, [pc, #172]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a2a      	ldr	r2, [pc, #168]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea6:	60bb      	str	r3, [r7, #8]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000eaa:	2332      	movs	r3, #50	; 0x32
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eba:	230b      	movs	r3, #11
 8000ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <HAL_ETH_MspInit+0x18c>)
 8000ec6:	f003 ff57 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000eca:	2386      	movs	r3, #134	; 0x86
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eda:	230b      	movs	r3, #11
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4817      	ldr	r0, [pc, #92]	; (8000f44 <HAL_ETH_MspInit+0x190>)
 8000ee6:	f003 ff47 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000efc:	230b      	movs	r3, #11
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4810      	ldr	r0, [pc, #64]	; (8000f48 <HAL_ETH_MspInit+0x194>)
 8000f08:	f003 ff36 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000f0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f1e:	230b      	movs	r3, #11
 8000f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f26:	4619      	mov	r1, r3
 8000f28:	4808      	ldr	r0, [pc, #32]	; (8000f4c <HAL_ETH_MspInit+0x198>)
 8000f2a:	f003 ff25 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40028000 	.word	0x40028000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020800 	.word	0x58020800
 8000f44:	58020000 	.word	0x58020000
 8000f48:	58020400 	.word	0x58020400
 8000f4c:	58021800 	.word	0x58021800

08000f50 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_TIM_PWM_MspInit+0x3c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d10e      	bne.n	8000f80 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f62:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f68:	4a09      	ldr	r2, [pc, #36]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_TIM_PWM_MspInit+0x40>)
 8000f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	58024400 	.word	0x58024400

08000f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b088      	sub	sp, #32
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a13      	ldr	r2, [pc, #76]	; (8001000 <HAL_TIM_MspPostInit+0x6c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11f      	bne.n	8000ff6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <HAL_TIM_MspPostInit+0x70>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbc:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_TIM_MspPostInit+0x70>)
 8000fbe:	f043 0310 	orr.w	r3, r3, #16
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_TIM_MspPostInit+0x70>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fcc:	f003 0310 	and.w	r3, r3, #16
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000fd4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000fd8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_TIM_MspPostInit+0x74>)
 8000ff2:	f003 fec1 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010000 	.word	0x40010000
 8001004:	58024400 	.word	0x58024400
 8001008:	58021000 	.word	0x58021000

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0bc      	sub	sp, #240	; 0xf0
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0320 	add.w	r3, r7, #32
 8001028:	22b8      	movs	r2, #184	; 0xb8
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f009 ff16 	bl	800ae5e <memset>
  if(huart->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a7a      	ldr	r2, [pc, #488]	; (8001220 <HAL_UART_MspInit+0x214>)
 8001038:	4293      	cmp	r3, r2
 800103a:	f040 80a1 	bne.w	8001180 <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103e:	f04f 0202 	mov.w	r2, #2
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f004 fff1 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001060:	f7ff fe88 	bl	8000d74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001064:	4b6f      	ldr	r3, [pc, #444]	; (8001224 <HAL_UART_MspInit+0x218>)
 8001066:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800106a:	4a6e      	ldr	r2, [pc, #440]	; (8001224 <HAL_UART_MspInit+0x218>)
 800106c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001070:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <HAL_UART_MspInit+0x218>)
 8001076:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b68      	ldr	r3, [pc, #416]	; (8001224 <HAL_UART_MspInit+0x218>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001088:	4a66      	ldr	r2, [pc, #408]	; (8001224 <HAL_UART_MspInit+0x218>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <HAL_UART_MspInit+0x218>)
 8001094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a0:	4b60      	ldr	r3, [pc, #384]	; (8001224 <HAL_UART_MspInit+0x218>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <HAL_UART_MspInit+0x218>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010b0:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <HAL_UART_MspInit+0x218>)
 80010b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b6:	f003 0308 	and.w	r3, r3, #8
 80010ba:	617b      	str	r3, [r7, #20]
 80010bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010be:	2308      	movs	r3, #8
 80010c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c4:	2302      	movs	r3, #2
 80010c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010d6:	2307      	movs	r3, #7
 80010d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010e0:	4619      	mov	r1, r3
 80010e2:	4851      	ldr	r0, [pc, #324]	; (8001228 <HAL_UART_MspInit+0x21c>)
 80010e4:	f003 fe48 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010e8:	2320      	movs	r3, #32
 80010ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001100:	2307      	movs	r3, #7
 8001102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001106:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800110a:	4619      	mov	r1, r3
 800110c:	4847      	ldr	r0, [pc, #284]	; (800122c <HAL_UART_MspInit+0x220>)
 800110e:	f003 fe33 	bl	8004d78 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001114:	4a47      	ldr	r2, [pc, #284]	; (8001234 <HAL_UART_MspInit+0x228>)
 8001116:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001118:	4b45      	ldr	r3, [pc, #276]	; (8001230 <HAL_UART_MspInit+0x224>)
 800111a:	222b      	movs	r2, #43	; 0x2b
 800111c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800112a:	4b41      	ldr	r3, [pc, #260]	; (8001230 <HAL_UART_MspInit+0x224>)
 800112c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001130:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <HAL_UART_MspInit+0x224>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001140:	2200      	movs	r2, #0
 8001142:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001146:	2200      	movs	r2, #0
 8001148:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800114a:	4b39      	ldr	r3, [pc, #228]	; (8001230 <HAL_UART_MspInit+0x224>)
 800114c:	2200      	movs	r2, #0
 800114e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001150:	4837      	ldr	r0, [pc, #220]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001152:	f000 fbb5 	bl	80018c0 <HAL_DMA_Init>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 800115c:	f7ff fe0a 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a33      	ldr	r2, [pc, #204]	; (8001230 <HAL_UART_MspInit+0x224>)
 8001164:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001168:	4a31      	ldr	r2, [pc, #196]	; (8001230 <HAL_UART_MspInit+0x224>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800116e:	2200      	movs	r2, #0
 8001170:	2100      	movs	r1, #0
 8001172:	2026      	movs	r0, #38	; 0x26
 8001174:	f000 fb6f 	bl	8001856 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001178:	2026      	movs	r0, #38	; 0x26
 800117a:	f000 fb86 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800117e:	e04b      	b.n	8001218 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART3)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a2c      	ldr	r2, [pc, #176]	; (8001238 <HAL_UART_MspInit+0x22c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d146      	bne.n	8001218 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800118a:	f04f 0202 	mov.w	r2, #2
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f004 ff4b 	bl	800603c <HAL_RCCEx_PeriphCLKConfig>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 80011ac:	f7ff fde2 	bl	8000d74 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011b6:	4a1b      	ldr	r2, [pc, #108]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80011c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011ca:	613b      	str	r3, [r7, #16]
 80011cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d4:	4a13      	ldr	r2, [pc, #76]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_UART_MspInit+0x218>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80011ec:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001206:	2307      	movs	r3, #7
 8001208:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001210:	4619      	mov	r1, r3
 8001212:	4806      	ldr	r0, [pc, #24]	; (800122c <HAL_UART_MspInit+0x220>)
 8001214:	f003 fdb0 	bl	8004d78 <HAL_GPIO_Init>
}
 8001218:	bf00      	nop
 800121a:	37f0      	adds	r7, #240	; 0xf0
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40004400 	.word	0x40004400
 8001224:	58024400 	.word	0x58024400
 8001228:	58020000 	.word	0x58020000
 800122c:	58020c00 	.word	0x58020c00
 8001230:	240003a4 	.word	0x240003a4
 8001234:	40020010 	.word	0x40020010
 8001238:	40004800 	.word	0x40004800

0800123c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <NMI_Handler+0x4>

08001242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001246:	e7fe      	b.n	8001246 <HardFault_Handler+0x4>

08001248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800124c:	e7fe      	b.n	800124c <MemManage_Handler+0x4>

0800124e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <UsageFault_Handler+0x4>

0800125a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001288:	f000 f9b2 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}

08001290 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <DMA1_Stream0_IRQHandler+0x10>)
 8001296:	f001 fe39 	bl	8002f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	240003a4 	.word	0x240003a4

080012a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <USART2_IRQHandler+0x10>)
 80012aa:	f007 fd19 	bl	8008ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2400027c 	.word	0x2400027c

080012b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	e00a      	b.n	80012e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ca:	f3af 8000 	nop.w
 80012ce:	4601      	mov	r1, r0
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1c5a      	adds	r2, r3, #1
 80012d4:	60ba      	str	r2, [r7, #8]
 80012d6:	b2ca      	uxtb	r2, r1
 80012d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	3301      	adds	r3, #1
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dbf0      	blt.n	80012ca <_read+0x12>
  }

  return len;
 80012e8:	687b      	ldr	r3, [r7, #4]
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b083      	sub	sp, #12
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800131a:	605a      	str	r2, [r3, #4]
  return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr

0800132a <_isatty>:

int _isatty(int file)
{
 800132a:	b480      	push	{r7}
 800132c:	b083      	sub	sp, #12
 800132e:	af00      	add	r7, sp, #0
 8001330:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001332:	2301      	movs	r3, #1
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3714      	adds	r7, #20
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
	...

0800135c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001364:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <_sbrk+0x5c>)
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <_sbrk+0x60>)
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001370:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <_sbrk+0x64>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <_sbrk+0x68>)
 800137c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_sbrk+0x64>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	429a      	cmp	r2, r3
 800138a:	d207      	bcs.n	800139c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800138c:	f009 fdb6 	bl	800aefc <__errno>
 8001390:	4603      	mov	r3, r0
 8001392:	220c      	movs	r2, #12
 8001394:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800139a:	e009      	b.n	80013b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <_sbrk+0x64>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <_sbrk+0x64>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <_sbrk+0x64>)
 80013ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ae:	68fb      	ldr	r3, [r7, #12]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	24050000 	.word	0x24050000
 80013bc:	00000400 	.word	0x00000400
 80013c0:	24000454 	.word	0x24000454
 80013c4:	240005a8 	.word	0x240005a8

080013c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <SystemInit+0xd0>)
 80013ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d2:	4a31      	ldr	r2, [pc, #196]	; (8001498 <SystemInit+0xd0>)
 80013d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013dc:	4b2f      	ldr	r3, [pc, #188]	; (800149c <SystemInit+0xd4>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d807      	bhi.n	80013f8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013e8:	4b2c      	ldr	r3, [pc, #176]	; (800149c <SystemInit+0xd4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	4a2a      	ldr	r2, [pc, #168]	; (800149c <SystemInit+0xd4>)
 80013f2:	f043 0307 	orr.w	r3, r3, #7
 80013f6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80013f8:	4b29      	ldr	r3, [pc, #164]	; (80014a0 <SystemInit+0xd8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a28      	ldr	r2, [pc, #160]	; (80014a0 <SystemInit+0xd8>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001404:	4b26      	ldr	r3, [pc, #152]	; (80014a0 <SystemInit+0xd8>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <SystemInit+0xd8>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4924      	ldr	r1, [pc, #144]	; (80014a0 <SystemInit+0xd8>)
 8001410:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <SystemInit+0xdc>)
 8001412:	4013      	ands	r3, r2
 8001414:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001416:	4b21      	ldr	r3, [pc, #132]	; (800149c <SystemInit+0xd4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d007      	beq.n	8001432 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <SystemInit+0xd4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 030f 	bic.w	r3, r3, #15
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <SystemInit+0xd4>)
 800142c:	f043 0307 	orr.w	r3, r3, #7
 8001430:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001432:	4b1b      	ldr	r3, [pc, #108]	; (80014a0 <SystemInit+0xd8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <SystemInit+0xd8>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800143e:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <SystemInit+0xd8>)
 8001440:	2200      	movs	r2, #0
 8001442:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <SystemInit+0xd8>)
 8001446:	4a18      	ldr	r2, [pc, #96]	; (80014a8 <SystemInit+0xe0>)
 8001448:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <SystemInit+0xd8>)
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <SystemInit+0xe4>)
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001450:	4b13      	ldr	r3, [pc, #76]	; (80014a0 <SystemInit+0xd8>)
 8001452:	4a17      	ldr	r2, [pc, #92]	; (80014b0 <SystemInit+0xe8>)
 8001454:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <SystemInit+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <SystemInit+0xd8>)
 800145e:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <SystemInit+0xe8>)
 8001460:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001462:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <SystemInit+0xd8>)
 8001464:	2200      	movs	r2, #0
 8001466:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001468:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <SystemInit+0xd8>)
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <SystemInit+0xe8>)
 800146c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <SystemInit+0xd8>)
 8001470:	2200      	movs	r2, #0
 8001472:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <SystemInit+0xd8>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <SystemInit+0xd8>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001480:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <SystemInit+0xd8>)
 8001482:	2200      	movs	r2, #0
 8001484:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <SystemInit+0xec>)
 8001488:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800148c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	52002000 	.word	0x52002000
 80014a0:	58024400 	.word	0x58024400
 80014a4:	eaf6ed7f 	.word	0xeaf6ed7f
 80014a8:	02020200 	.word	0x02020200
 80014ac:	01ff0000 	.word	0x01ff0000
 80014b0:	01010280 	.word	0x01010280
 80014b4:	52004000 	.word	0x52004000

080014b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80014b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80014bc:	f7ff ff84 	bl	80013c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014c2:	490d      	ldr	r1, [pc, #52]	; (80014f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c8:	e002      	b.n	80014d0 <LoopCopyDataInit>

080014ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ce:	3304      	adds	r3, #4

080014d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d4:	d3f9      	bcc.n	80014ca <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014dc:	e001      	b.n	80014e2 <LoopFillZerobss>

080014de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e0:	3204      	adds	r2, #4

080014e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e4:	d3fb      	bcc.n	80014de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e6:	f009 fd0f 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ea:	f7ff f8f5 	bl	80006d8 <main>
  bx  lr
 80014ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014f0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80014f4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80014f8:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80014fc:	0800bb40 	.word	0x0800bb40
  ldr r2, =_sbss
 8001500:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001504:	240005a8 	.word	0x240005a8

08001508 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001508:	e7fe      	b.n	8001508 <ADC3_IRQHandler>
	...

0800150c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001512:	2003      	movs	r0, #3
 8001514:	f000 f994 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001518:	f004 fbba 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 800151c:	4602      	mov	r2, r0
 800151e:	4b15      	ldr	r3, [pc, #84]	; (8001574 <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f003 030f 	and.w	r3, r3, #15
 8001528:	4913      	ldr	r1, [pc, #76]	; (8001578 <HAL_Init+0x6c>)
 800152a:	5ccb      	ldrb	r3, [r1, r3]
 800152c:	f003 031f 	and.w	r3, r3, #31
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <HAL_Init+0x68>)
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_Init+0x6c>)
 8001540:	5cd3      	ldrb	r3, [r2, r3]
 8001542:	f003 031f 	and.w	r3, r3, #31
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <HAL_Init+0x70>)
 800154e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001550:	4a0b      	ldr	r2, [pc, #44]	; (8001580 <HAL_Init+0x74>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	2000      	movs	r0, #0
 8001558:	f000 f814 	bl	8001584 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	e002      	b.n	800156c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001566:	f7ff fc0b 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400
 8001578:	0800babc 	.word	0x0800babc
 800157c:	24000004 	.word	0x24000004
 8001580:	24000000 	.word	0x24000000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_InitTick+0x60>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e021      	b.n	80015dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001598:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <HAL_InitTick+0x64>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <HAL_InitTick+0x60>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f979 	bl	80018a6 <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015cc:	f000 f943 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x68>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2400000c 	.word	0x2400000c
 80015e8:	24000000 	.word	0x24000000
 80015ec:	24000008 	.word	0x24000008

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	2400000c 	.word	0x2400000c
 8001614:	24000458 	.word	0x24000458

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	24000458 	.word	0x24000458

08001630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001638:	f7ff ffee 	bl	8001618 <HAL_GetTick>
 800163c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001648:	d005      	beq.n	8001656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164a:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <HAL_Delay+0x44>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	461a      	mov	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001656:	bf00      	nop
 8001658:	f7ff ffde 	bl	8001618 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	429a      	cmp	r2, r3
 8001666:	d8f7      	bhi.n	8001658 <HAL_Delay+0x28>
  {
  }
}
 8001668:	bf00      	nop
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	2400000c 	.word	0x2400000c

08001678 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001680:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001688:	4904      	ldr	r1, [pc, #16]	; (800169c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	58000400 	.word	0x58000400

080016a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b085      	sub	sp, #20
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b0:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016bc:	4013      	ands	r3, r2
 80016be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ce:	4a04      	ldr	r2, [pc, #16]	; (80016e0 <__NVIC_SetPriorityGrouping+0x40>)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	60d3      	str	r3, [r2, #12]
}
 80016d4:	bf00      	nop
 80016d6:	3714      	adds	r7, #20
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000ed00 	.word	0xe000ed00
 80016e4:	05fa0000 	.word	0x05fa0000

080016e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016ec:	4b04      	ldr	r3, [pc, #16]	; (8001700 <__NVIC_GetPriorityGrouping+0x18>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	f003 0307 	and.w	r3, r3, #7
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800170e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001712:	2b00      	cmp	r3, #0
 8001714:	db0b      	blt.n	800172e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	f003 021f 	and.w	r2, r3, #31
 800171c:	4907      	ldr	r1, [pc, #28]	; (800173c <__NVIC_EnableIRQ+0x38>)
 800171e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001722:	095b      	lsrs	r3, r3, #5
 8001724:	2001      	movs	r0, #1
 8001726:	fa00 f202 	lsl.w	r2, r0, r2
 800172a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800172e:	bf00      	nop
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001820:	f7ff ff8e 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff29 	bl	80016a0 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff40 	bl	80016e8 <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff33 	bl	8001704 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa4 	bl	80017fc <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff fea6 	bl	8001618 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e312      	b.n	8001efe <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a66      	ldr	r2, [pc, #408]	; (8001a78 <HAL_DMA_Init+0x1b8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d04a      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a65      	ldr	r2, [pc, #404]	; (8001a7c <HAL_DMA_Init+0x1bc>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d045      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a63      	ldr	r2, [pc, #396]	; (8001a80 <HAL_DMA_Init+0x1c0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d040      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a62      	ldr	r2, [pc, #392]	; (8001a84 <HAL_DMA_Init+0x1c4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d03b      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_DMA_Init+0x1c8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d036      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5f      	ldr	r2, [pc, #380]	; (8001a8c <HAL_DMA_Init+0x1cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d031      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5d      	ldr	r2, [pc, #372]	; (8001a90 <HAL_DMA_Init+0x1d0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02c      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5c      	ldr	r2, [pc, #368]	; (8001a94 <HAL_DMA_Init+0x1d4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d027      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a5a      	ldr	r2, [pc, #360]	; (8001a98 <HAL_DMA_Init+0x1d8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d022      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a59      	ldr	r2, [pc, #356]	; (8001a9c <HAL_DMA_Init+0x1dc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d01d      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a57      	ldr	r2, [pc, #348]	; (8001aa0 <HAL_DMA_Init+0x1e0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d018      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_DMA_Init+0x1e4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d013      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a54      	ldr	r2, [pc, #336]	; (8001aa8 <HAL_DMA_Init+0x1e8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00e      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a53      	ldr	r2, [pc, #332]	; (8001aac <HAL_DMA_Init+0x1ec>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d009      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a51      	ldr	r2, [pc, #324]	; (8001ab0 <HAL_DMA_Init+0x1f0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d004      	beq.n	8001978 <HAL_DMA_Init+0xb8>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a50      	ldr	r2, [pc, #320]	; (8001ab4 <HAL_DMA_Init+0x1f4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d101      	bne.n	800197c <HAL_DMA_Init+0xbc>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <HAL_DMA_Init+0xbe>
 800197c:	2300      	movs	r3, #0
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 813c 	beq.w	8001bfc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2202      	movs	r2, #2
 8001988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a37      	ldr	r2, [pc, #220]	; (8001a78 <HAL_DMA_Init+0x1b8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d04a      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a36      	ldr	r2, [pc, #216]	; (8001a7c <HAL_DMA_Init+0x1bc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d045      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a34      	ldr	r2, [pc, #208]	; (8001a80 <HAL_DMA_Init+0x1c0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d040      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a33      	ldr	r2, [pc, #204]	; (8001a84 <HAL_DMA_Init+0x1c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d03b      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a31      	ldr	r2, [pc, #196]	; (8001a88 <HAL_DMA_Init+0x1c8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d036      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a30      	ldr	r2, [pc, #192]	; (8001a8c <HAL_DMA_Init+0x1cc>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d031      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a2e      	ldr	r2, [pc, #184]	; (8001a90 <HAL_DMA_Init+0x1d0>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d02c      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_DMA_Init+0x1d4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d027      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a2b      	ldr	r2, [pc, #172]	; (8001a98 <HAL_DMA_Init+0x1d8>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d022      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a2a      	ldr	r2, [pc, #168]	; (8001a9c <HAL_DMA_Init+0x1dc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d01d      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a28      	ldr	r2, [pc, #160]	; (8001aa0 <HAL_DMA_Init+0x1e0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d018      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a27      	ldr	r2, [pc, #156]	; (8001aa4 <HAL_DMA_Init+0x1e4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d013      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a25      	ldr	r2, [pc, #148]	; (8001aa8 <HAL_DMA_Init+0x1e8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00e      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_DMA_Init+0x1ec>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d009      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_DMA_Init+0x1f0>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d004      	beq.n	8001a34 <HAL_DMA_Init+0x174>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a21      	ldr	r2, [pc, #132]	; (8001ab4 <HAL_DMA_Init+0x1f4>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d108      	bne.n	8001a46 <HAL_DMA_Init+0x186>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	e007      	b.n	8001a56 <HAL_DMA_Init+0x196>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001a56:	e02f      	b.n	8001ab8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a58:	f7ff fdde 	bl	8001618 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d928      	bls.n	8001ab8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e242      	b.n	8001efe <HAL_DMA_Init+0x63e>
 8001a78:	40020010 	.word	0x40020010
 8001a7c:	40020028 	.word	0x40020028
 8001a80:	40020040 	.word	0x40020040
 8001a84:	40020058 	.word	0x40020058
 8001a88:	40020070 	.word	0x40020070
 8001a8c:	40020088 	.word	0x40020088
 8001a90:	400200a0 	.word	0x400200a0
 8001a94:	400200b8 	.word	0x400200b8
 8001a98:	40020410 	.word	0x40020410
 8001a9c:	40020428 	.word	0x40020428
 8001aa0:	40020440 	.word	0x40020440
 8001aa4:	40020458 	.word	0x40020458
 8001aa8:	40020470 	.word	0x40020470
 8001aac:	40020488 	.word	0x40020488
 8001ab0:	400204a0 	.word	0x400204a0
 8001ab4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1c8      	bne.n	8001a58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_DMA_Init+0x420>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ade:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d107      	bne.n	8001b1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	4313      	orrs	r3, r2
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b28      	cmp	r3, #40	; 0x28
 8001b22:	d903      	bls.n	8001b2c <HAL_DMA_Init+0x26c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b2e      	cmp	r3, #46	; 0x2e
 8001b2a:	d91f      	bls.n	8001b6c <HAL_DMA_Init+0x2ac>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b3e      	cmp	r3, #62	; 0x3e
 8001b32:	d903      	bls.n	8001b3c <HAL_DMA_Init+0x27c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b42      	cmp	r3, #66	; 0x42
 8001b3a:	d917      	bls.n	8001b6c <HAL_DMA_Init+0x2ac>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b46      	cmp	r3, #70	; 0x46
 8001b42:	d903      	bls.n	8001b4c <HAL_DMA_Init+0x28c>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b48      	cmp	r3, #72	; 0x48
 8001b4a:	d90f      	bls.n	8001b6c <HAL_DMA_Init+0x2ac>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b4e      	cmp	r3, #78	; 0x4e
 8001b52:	d903      	bls.n	8001b5c <HAL_DMA_Init+0x29c>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b52      	cmp	r3, #82	; 0x52
 8001b5a:	d907      	bls.n	8001b6c <HAL_DMA_Init+0x2ac>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b73      	cmp	r3, #115	; 0x73
 8001b62:	d905      	bls.n	8001b70 <HAL_DMA_Init+0x2b0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b77      	cmp	r3, #119	; 0x77
 8001b6a:	d801      	bhi.n	8001b70 <HAL_DMA_Init+0x2b0>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_DMA_Init+0x2b2>
 8001b70:	2300      	movs	r3, #0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b7c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f023 0307 	bic.w	r3, r3, #7
 8001b94:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d117      	bne.n	8001bd8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bac:	697a      	ldr	r2, [r7, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00e      	beq.n	8001bd8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f002 fb2e 	bl	800421c <DMA_CheckFifoParam>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d008      	beq.n	8001bd8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e192      	b.n	8001efe <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f002 fa69 	bl	80040b8 <DMA_CalcBaseAndBitshift>
 8001be6:	4603      	mov	r3, r0
 8001be8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	223f      	movs	r2, #63	; 0x3f
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	e0c8      	b.n	8001d8e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a38      	ldr	r2, [pc, #224]	; (8001ce4 <HAL_DMA_Init+0x424>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d022      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a37      	ldr	r2, [pc, #220]	; (8001ce8 <HAL_DMA_Init+0x428>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d01d      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a35      	ldr	r2, [pc, #212]	; (8001cec <HAL_DMA_Init+0x42c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d018      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a34      	ldr	r2, [pc, #208]	; (8001cf0 <HAL_DMA_Init+0x430>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a32      	ldr	r2, [pc, #200]	; (8001cf4 <HAL_DMA_Init+0x434>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d00e      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a31      	ldr	r2, [pc, #196]	; (8001cf8 <HAL_DMA_Init+0x438>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d009      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_DMA_Init+0x43c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d004      	beq.n	8001c4c <HAL_DMA_Init+0x38c>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a2e      	ldr	r2, [pc, #184]	; (8001d00 <HAL_DMA_Init+0x440>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_DMA_Init+0x390>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e000      	b.n	8001c52 <HAL_DMA_Init+0x392>
 8001c50:	2300      	movs	r3, #0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 8092 	beq.w	8001d7c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <HAL_DMA_Init+0x424>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d021      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a20      	ldr	r2, [pc, #128]	; (8001ce8 <HAL_DMA_Init+0x428>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d01c      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1e      	ldr	r2, [pc, #120]	; (8001cec <HAL_DMA_Init+0x42c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d017      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	; (8001cf0 <HAL_DMA_Init+0x430>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d012      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <HAL_DMA_Init+0x434>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00d      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1a      	ldr	r2, [pc, #104]	; (8001cf8 <HAL_DMA_Init+0x438>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a18      	ldr	r2, [pc, #96]	; (8001cfc <HAL_DMA_Init+0x43c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_DMA_Init+0x3e6>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_DMA_Init+0x440>)
 8001ca4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2202      	movs	r2, #2
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <HAL_DMA_Init+0x444>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b40      	cmp	r3, #64	; 0x40
 8001ccc:	d01c      	beq.n	8001d08 <HAL_DMA_Init+0x448>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b80      	cmp	r3, #128	; 0x80
 8001cd4:	d102      	bne.n	8001cdc <HAL_DMA_Init+0x41c>
 8001cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cda:	e016      	b.n	8001d0a <HAL_DMA_Init+0x44a>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e014      	b.n	8001d0a <HAL_DMA_Init+0x44a>
 8001ce0:	fe10803f 	.word	0xfe10803f
 8001ce4:	58025408 	.word	0x58025408
 8001ce8:	5802541c 	.word	0x5802541c
 8001cec:	58025430 	.word	0x58025430
 8001cf0:	58025444 	.word	0x58025444
 8001cf4:	58025458 	.word	0x58025458
 8001cf8:	5802546c 	.word	0x5802546c
 8001cfc:	58025480 	.word	0x58025480
 8001d00:	58025494 	.word	0x58025494
 8001d04:	fffe000f 	.word	0xfffe000f
 8001d08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68d2      	ldr	r2, [r2, #12]
 8001d0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691b      	ldr	r3, [r3, #16]
 8001d16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001d28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001d30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001d38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	697a      	ldr	r2, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b6e      	ldr	r3, [pc, #440]	; (8001f08 <HAL_DMA_Init+0x648>)
 8001d50:	4413      	add	r3, r2
 8001d52:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_DMA_Init+0x64c>)
 8001d54:	fba2 2303 	umull	r2, r3, r2, r3
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	009a      	lsls	r2, r3, #2
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f002 f9a9 	bl	80040b8 <DMA_CalcBaseAndBitshift>
 8001d66:	4603      	mov	r3, r0
 8001d68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2201      	movs	r2, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	605a      	str	r2, [r3, #4]
 8001d7a:	e008      	b.n	8001d8e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2240      	movs	r2, #64	; 0x40
 8001d80:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2203      	movs	r2, #3
 8001d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0b7      	b.n	8001efe <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5f      	ldr	r2, [pc, #380]	; (8001f10 <HAL_DMA_Init+0x650>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d072      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5d      	ldr	r2, [pc, #372]	; (8001f14 <HAL_DMA_Init+0x654>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d06d      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a5c      	ldr	r2, [pc, #368]	; (8001f18 <HAL_DMA_Init+0x658>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d068      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a5a      	ldr	r2, [pc, #360]	; (8001f1c <HAL_DMA_Init+0x65c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d063      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a59      	ldr	r2, [pc, #356]	; (8001f20 <HAL_DMA_Init+0x660>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d05e      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a57      	ldr	r2, [pc, #348]	; (8001f24 <HAL_DMA_Init+0x664>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d059      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a56      	ldr	r2, [pc, #344]	; (8001f28 <HAL_DMA_Init+0x668>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d054      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a54      	ldr	r2, [pc, #336]	; (8001f2c <HAL_DMA_Init+0x66c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d04f      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a53      	ldr	r2, [pc, #332]	; (8001f30 <HAL_DMA_Init+0x670>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d04a      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a51      	ldr	r2, [pc, #324]	; (8001f34 <HAL_DMA_Init+0x674>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d045      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a50      	ldr	r2, [pc, #320]	; (8001f38 <HAL_DMA_Init+0x678>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d040      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a4e      	ldr	r2, [pc, #312]	; (8001f3c <HAL_DMA_Init+0x67c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d03b      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a4d      	ldr	r2, [pc, #308]	; (8001f40 <HAL_DMA_Init+0x680>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d036      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_DMA_Init+0x684>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d031      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_DMA_Init+0x688>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d02c      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a48      	ldr	r2, [pc, #288]	; (8001f4c <HAL_DMA_Init+0x68c>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d027      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a47      	ldr	r2, [pc, #284]	; (8001f50 <HAL_DMA_Init+0x690>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d022      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <HAL_DMA_Init+0x694>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01d      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a44      	ldr	r2, [pc, #272]	; (8001f58 <HAL_DMA_Init+0x698>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d018      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a42      	ldr	r2, [pc, #264]	; (8001f5c <HAL_DMA_Init+0x69c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d013      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a41      	ldr	r2, [pc, #260]	; (8001f60 <HAL_DMA_Init+0x6a0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00e      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a3f      	ldr	r2, [pc, #252]	; (8001f64 <HAL_DMA_Init+0x6a4>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a3e      	ldr	r2, [pc, #248]	; (8001f68 <HAL_DMA_Init+0x6a8>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d004      	beq.n	8001e7e <HAL_DMA_Init+0x5be>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a3c      	ldr	r2, [pc, #240]	; (8001f6c <HAL_DMA_Init+0x6ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d101      	bne.n	8001e82 <HAL_DMA_Init+0x5c2>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <HAL_DMA_Init+0x5c4>
 8001e82:	2300      	movs	r3, #0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d032      	beq.n	8001eee <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f002 fa43 	bl	8004314 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d102      	bne.n	8001e9c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001eb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d010      	beq.n	8001edc <HAL_DMA_Init+0x61c>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d80c      	bhi.n	8001edc <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f002 fac0 	bl	8004448 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e008      	b.n	8001eee <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	a7fdabf8 	.word	0xa7fdabf8
 8001f0c:	cccccccd 	.word	0xcccccccd
 8001f10:	40020010 	.word	0x40020010
 8001f14:	40020028 	.word	0x40020028
 8001f18:	40020040 	.word	0x40020040
 8001f1c:	40020058 	.word	0x40020058
 8001f20:	40020070 	.word	0x40020070
 8001f24:	40020088 	.word	0x40020088
 8001f28:	400200a0 	.word	0x400200a0
 8001f2c:	400200b8 	.word	0x400200b8
 8001f30:	40020410 	.word	0x40020410
 8001f34:	40020428 	.word	0x40020428
 8001f38:	40020440 	.word	0x40020440
 8001f3c:	40020458 	.word	0x40020458
 8001f40:	40020470 	.word	0x40020470
 8001f44:	40020488 	.word	0x40020488
 8001f48:	400204a0 	.word	0x400204a0
 8001f4c:	400204b8 	.word	0x400204b8
 8001f50:	58025408 	.word	0x58025408
 8001f54:	5802541c 	.word	0x5802541c
 8001f58:	58025430 	.word	0x58025430
 8001f5c:	58025444 	.word	0x58025444
 8001f60:	58025458 	.word	0x58025458
 8001f64:	5802546c 	.word	0x5802546c
 8001f68:	58025480 	.word	0x58025480
 8001f6c:	58025494 	.word	0x58025494

08001f70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
 8001f7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e226      	b.n	80023da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d101      	bne.n	8001f9a <HAL_DMA_Start_IT+0x2a>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e21f      	b.n	80023da <HAL_DMA_Start_IT+0x46a>
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	f040 820a 	bne.w	80023c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a68      	ldr	r2, [pc, #416]	; (8002164 <HAL_DMA_Start_IT+0x1f4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d04a      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a66      	ldr	r2, [pc, #408]	; (8002168 <HAL_DMA_Start_IT+0x1f8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d045      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_DMA_Start_IT+0x1fc>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d040      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a63      	ldr	r2, [pc, #396]	; (8002170 <HAL_DMA_Start_IT+0x200>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d03b      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a62      	ldr	r2, [pc, #392]	; (8002174 <HAL_DMA_Start_IT+0x204>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d036      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a60      	ldr	r2, [pc, #384]	; (8002178 <HAL_DMA_Start_IT+0x208>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d031      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a5f      	ldr	r2, [pc, #380]	; (800217c <HAL_DMA_Start_IT+0x20c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d02c      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a5d      	ldr	r2, [pc, #372]	; (8002180 <HAL_DMA_Start_IT+0x210>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d027      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_DMA_Start_IT+0x214>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d022      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_DMA_Start_IT+0x218>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d01d      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a59      	ldr	r2, [pc, #356]	; (800218c <HAL_DMA_Start_IT+0x21c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d018      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a57      	ldr	r2, [pc, #348]	; (8002190 <HAL_DMA_Start_IT+0x220>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d013      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a56      	ldr	r2, [pc, #344]	; (8002194 <HAL_DMA_Start_IT+0x224>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00e      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a54      	ldr	r2, [pc, #336]	; (8002198 <HAL_DMA_Start_IT+0x228>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d009      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a53      	ldr	r2, [pc, #332]	; (800219c <HAL_DMA_Start_IT+0x22c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d004      	beq.n	800205e <HAL_DMA_Start_IT+0xee>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a51      	ldr	r2, [pc, #324]	; (80021a0 <HAL_DMA_Start_IT+0x230>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d108      	bne.n	8002070 <HAL_DMA_Start_IT+0x100>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0201 	bic.w	r2, r2, #1
 800206c:	601a      	str	r2, [r3, #0]
 800206e:	e007      	b.n	8002080 <HAL_DMA_Start_IT+0x110>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0201 	bic.w	r2, r2, #1
 800207e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f001 fe6a 	bl	8003d60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a34      	ldr	r2, [pc, #208]	; (8002164 <HAL_DMA_Start_IT+0x1f4>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d04a      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a33      	ldr	r2, [pc, #204]	; (8002168 <HAL_DMA_Start_IT+0x1f8>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d045      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a31      	ldr	r2, [pc, #196]	; (800216c <HAL_DMA_Start_IT+0x1fc>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d040      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a30      	ldr	r2, [pc, #192]	; (8002170 <HAL_DMA_Start_IT+0x200>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d03b      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2e      	ldr	r2, [pc, #184]	; (8002174 <HAL_DMA_Start_IT+0x204>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d036      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2d      	ldr	r2, [pc, #180]	; (8002178 <HAL_DMA_Start_IT+0x208>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a2b      	ldr	r2, [pc, #172]	; (800217c <HAL_DMA_Start_IT+0x20c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d02c      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_DMA_Start_IT+0x210>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d027      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_DMA_Start_IT+0x214>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d022      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_DMA_Start_IT+0x218>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d01d      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_DMA_Start_IT+0x21c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d018      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a24      	ldr	r2, [pc, #144]	; (8002190 <HAL_DMA_Start_IT+0x220>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d013      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a22      	ldr	r2, [pc, #136]	; (8002194 <HAL_DMA_Start_IT+0x224>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00e      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a21      	ldr	r2, [pc, #132]	; (8002198 <HAL_DMA_Start_IT+0x228>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d009      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1f      	ldr	r2, [pc, #124]	; (800219c <HAL_DMA_Start_IT+0x22c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_DMA_Start_IT+0x1bc>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1e      	ldr	r2, [pc, #120]	; (80021a0 <HAL_DMA_Start_IT+0x230>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_DMA_Start_IT+0x1c0>
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <HAL_DMA_Start_IT+0x1c2>
 8002130:	2300      	movs	r3, #0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d036      	beq.n	80021a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f023 021e 	bic.w	r2, r3, #30
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0216 	orr.w	r2, r2, #22
 8002148:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d03e      	beq.n	80021d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f042 0208 	orr.w	r2, r2, #8
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e035      	b.n	80021d0 <HAL_DMA_Start_IT+0x260>
 8002164:	40020010 	.word	0x40020010
 8002168:	40020028 	.word	0x40020028
 800216c:	40020040 	.word	0x40020040
 8002170:	40020058 	.word	0x40020058
 8002174:	40020070 	.word	0x40020070
 8002178:	40020088 	.word	0x40020088
 800217c:	400200a0 	.word	0x400200a0
 8002180:	400200b8 	.word	0x400200b8
 8002184:	40020410 	.word	0x40020410
 8002188:	40020428 	.word	0x40020428
 800218c:	40020440 	.word	0x40020440
 8002190:	40020458 	.word	0x40020458
 8002194:	40020470 	.word	0x40020470
 8002198:	40020488 	.word	0x40020488
 800219c:	400204a0 	.word	0x400204a0
 80021a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 020e 	bic.w	r2, r3, #14
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f042 020a 	orr.w	r2, r2, #10
 80021b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0204 	orr.w	r2, r2, #4
 80021ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a83      	ldr	r2, [pc, #524]	; (80023e4 <HAL_DMA_Start_IT+0x474>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d072      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a82      	ldr	r2, [pc, #520]	; (80023e8 <HAL_DMA_Start_IT+0x478>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d06d      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a80      	ldr	r2, [pc, #512]	; (80023ec <HAL_DMA_Start_IT+0x47c>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d068      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_DMA_Start_IT+0x480>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d063      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a7d      	ldr	r2, [pc, #500]	; (80023f4 <HAL_DMA_Start_IT+0x484>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d05e      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_DMA_Start_IT+0x488>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d059      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a7a      	ldr	r2, [pc, #488]	; (80023fc <HAL_DMA_Start_IT+0x48c>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d054      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a79      	ldr	r2, [pc, #484]	; (8002400 <HAL_DMA_Start_IT+0x490>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d04f      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a77      	ldr	r2, [pc, #476]	; (8002404 <HAL_DMA_Start_IT+0x494>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d04a      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a76      	ldr	r2, [pc, #472]	; (8002408 <HAL_DMA_Start_IT+0x498>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d045      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a74      	ldr	r2, [pc, #464]	; (800240c <HAL_DMA_Start_IT+0x49c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d040      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a73      	ldr	r2, [pc, #460]	; (8002410 <HAL_DMA_Start_IT+0x4a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d03b      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a71      	ldr	r2, [pc, #452]	; (8002414 <HAL_DMA_Start_IT+0x4a4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d036      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a70      	ldr	r2, [pc, #448]	; (8002418 <HAL_DMA_Start_IT+0x4a8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d031      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a6e      	ldr	r2, [pc, #440]	; (800241c <HAL_DMA_Start_IT+0x4ac>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d02c      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a6d      	ldr	r2, [pc, #436]	; (8002420 <HAL_DMA_Start_IT+0x4b0>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d027      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6b      	ldr	r2, [pc, #428]	; (8002424 <HAL_DMA_Start_IT+0x4b4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d022      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6a      	ldr	r2, [pc, #424]	; (8002428 <HAL_DMA_Start_IT+0x4b8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d01d      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a68      	ldr	r2, [pc, #416]	; (800242c <HAL_DMA_Start_IT+0x4bc>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d018      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a67      	ldr	r2, [pc, #412]	; (8002430 <HAL_DMA_Start_IT+0x4c0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d013      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a65      	ldr	r2, [pc, #404]	; (8002434 <HAL_DMA_Start_IT+0x4c4>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d00e      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a64      	ldr	r2, [pc, #400]	; (8002438 <HAL_DMA_Start_IT+0x4c8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d009      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a62      	ldr	r2, [pc, #392]	; (800243c <HAL_DMA_Start_IT+0x4cc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d004      	beq.n	80022c0 <HAL_DMA_Start_IT+0x350>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a61      	ldr	r2, [pc, #388]	; (8002440 <HAL_DMA_Start_IT+0x4d0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Start_IT+0x354>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_DMA_Start_IT+0x356>
 80022c4:	2300      	movs	r3, #0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01a      	beq.n	8002300 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d007      	beq.n	8002300 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a37      	ldr	r2, [pc, #220]	; (80023e4 <HAL_DMA_Start_IT+0x474>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d04a      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a36      	ldr	r2, [pc, #216]	; (80023e8 <HAL_DMA_Start_IT+0x478>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d045      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a34      	ldr	r2, [pc, #208]	; (80023ec <HAL_DMA_Start_IT+0x47c>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d040      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a33      	ldr	r2, [pc, #204]	; (80023f0 <HAL_DMA_Start_IT+0x480>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d03b      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a31      	ldr	r2, [pc, #196]	; (80023f4 <HAL_DMA_Start_IT+0x484>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d036      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a30      	ldr	r2, [pc, #192]	; (80023f8 <HAL_DMA_Start_IT+0x488>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d031      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <HAL_DMA_Start_IT+0x48c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d02c      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a2d      	ldr	r2, [pc, #180]	; (8002400 <HAL_DMA_Start_IT+0x490>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d027      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a2b      	ldr	r2, [pc, #172]	; (8002404 <HAL_DMA_Start_IT+0x494>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d022      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2a      	ldr	r2, [pc, #168]	; (8002408 <HAL_DMA_Start_IT+0x498>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d01d      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a28      	ldr	r2, [pc, #160]	; (800240c <HAL_DMA_Start_IT+0x49c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d018      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a27      	ldr	r2, [pc, #156]	; (8002410 <HAL_DMA_Start_IT+0x4a0>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d013      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a25      	ldr	r2, [pc, #148]	; (8002414 <HAL_DMA_Start_IT+0x4a4>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d00e      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a24      	ldr	r2, [pc, #144]	; (8002418 <HAL_DMA_Start_IT+0x4a8>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d009      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a22      	ldr	r2, [pc, #136]	; (800241c <HAL_DMA_Start_IT+0x4ac>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d004      	beq.n	80023a0 <HAL_DMA_Start_IT+0x430>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <HAL_DMA_Start_IT+0x4b0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d108      	bne.n	80023b2 <HAL_DMA_Start_IT+0x442>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e012      	b.n	80023d8 <HAL_DMA_Start_IT+0x468>
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
 80023c2:	e009      	b.n	80023d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80023d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40020010 	.word	0x40020010
 80023e8:	40020028 	.word	0x40020028
 80023ec:	40020040 	.word	0x40020040
 80023f0:	40020058 	.word	0x40020058
 80023f4:	40020070 	.word	0x40020070
 80023f8:	40020088 	.word	0x40020088
 80023fc:	400200a0 	.word	0x400200a0
 8002400:	400200b8 	.word	0x400200b8
 8002404:	40020410 	.word	0x40020410
 8002408:	40020428 	.word	0x40020428
 800240c:	40020440 	.word	0x40020440
 8002410:	40020458 	.word	0x40020458
 8002414:	40020470 	.word	0x40020470
 8002418:	40020488 	.word	0x40020488
 800241c:	400204a0 	.word	0x400204a0
 8002420:	400204b8 	.word	0x400204b8
 8002424:	58025408 	.word	0x58025408
 8002428:	5802541c 	.word	0x5802541c
 800242c:	58025430 	.word	0x58025430
 8002430:	58025444 	.word	0x58025444
 8002434:	58025458 	.word	0x58025458
 8002438:	5802546c 	.word	0x5802546c
 800243c:	58025480 	.word	0x58025480
 8002440:	58025494 	.word	0x58025494

08002444 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800244c:	f7ff f8e4 	bl	8001618 <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e2dc      	b.n	8002a16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b02      	cmp	r3, #2
 8002466:	d008      	beq.n	800247a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2280      	movs	r2, #128	; 0x80
 800246c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e2cd      	b.n	8002a16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a76      	ldr	r2, [pc, #472]	; (8002658 <HAL_DMA_Abort+0x214>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d04a      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a74      	ldr	r2, [pc, #464]	; (800265c <HAL_DMA_Abort+0x218>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d045      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a73      	ldr	r2, [pc, #460]	; (8002660 <HAL_DMA_Abort+0x21c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d040      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a71      	ldr	r2, [pc, #452]	; (8002664 <HAL_DMA_Abort+0x220>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d03b      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a70      	ldr	r2, [pc, #448]	; (8002668 <HAL_DMA_Abort+0x224>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d036      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6e      	ldr	r2, [pc, #440]	; (800266c <HAL_DMA_Abort+0x228>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d031      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a6d      	ldr	r2, [pc, #436]	; (8002670 <HAL_DMA_Abort+0x22c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d02c      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a6b      	ldr	r2, [pc, #428]	; (8002674 <HAL_DMA_Abort+0x230>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d027      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6a      	ldr	r2, [pc, #424]	; (8002678 <HAL_DMA_Abort+0x234>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a68      	ldr	r2, [pc, #416]	; (800267c <HAL_DMA_Abort+0x238>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01d      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a67      	ldr	r2, [pc, #412]	; (8002680 <HAL_DMA_Abort+0x23c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d018      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a65      	ldr	r2, [pc, #404]	; (8002684 <HAL_DMA_Abort+0x240>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d013      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a64      	ldr	r2, [pc, #400]	; (8002688 <HAL_DMA_Abort+0x244>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d00e      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a62      	ldr	r2, [pc, #392]	; (800268c <HAL_DMA_Abort+0x248>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d009      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_DMA_Abort+0x24c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d004      	beq.n	800251a <HAL_DMA_Abort+0xd6>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a5f      	ldr	r2, [pc, #380]	; (8002694 <HAL_DMA_Abort+0x250>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_DMA_Abort+0xda>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <HAL_DMA_Abort+0xdc>
 800251e:	2300      	movs	r3, #0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d013      	beq.n	800254c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f022 021e 	bic.w	r2, r2, #30
 8002532:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695a      	ldr	r2, [r3, #20]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002542:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e00a      	b.n	8002562 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 020e 	bic.w	r2, r2, #14
 800255a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a3c      	ldr	r2, [pc, #240]	; (8002658 <HAL_DMA_Abort+0x214>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d072      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a3a      	ldr	r2, [pc, #232]	; (800265c <HAL_DMA_Abort+0x218>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d06d      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a39      	ldr	r2, [pc, #228]	; (8002660 <HAL_DMA_Abort+0x21c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d068      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a37      	ldr	r2, [pc, #220]	; (8002664 <HAL_DMA_Abort+0x220>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d063      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a36      	ldr	r2, [pc, #216]	; (8002668 <HAL_DMA_Abort+0x224>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d05e      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a34      	ldr	r2, [pc, #208]	; (800266c <HAL_DMA_Abort+0x228>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d059      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a33      	ldr	r2, [pc, #204]	; (8002670 <HAL_DMA_Abort+0x22c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d054      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a31      	ldr	r2, [pc, #196]	; (8002674 <HAL_DMA_Abort+0x230>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d04f      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a30      	ldr	r2, [pc, #192]	; (8002678 <HAL_DMA_Abort+0x234>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04a      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a2e      	ldr	r2, [pc, #184]	; (800267c <HAL_DMA_Abort+0x238>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d045      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_DMA_Abort+0x23c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d040      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a2b      	ldr	r2, [pc, #172]	; (8002684 <HAL_DMA_Abort+0x240>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d03b      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a2a      	ldr	r2, [pc, #168]	; (8002688 <HAL_DMA_Abort+0x244>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d036      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a28      	ldr	r2, [pc, #160]	; (800268c <HAL_DMA_Abort+0x248>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d031      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a27      	ldr	r2, [pc, #156]	; (8002690 <HAL_DMA_Abort+0x24c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d02c      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a25      	ldr	r2, [pc, #148]	; (8002694 <HAL_DMA_Abort+0x250>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d027      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <HAL_DMA_Abort+0x254>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d022      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a22      	ldr	r2, [pc, #136]	; (800269c <HAL_DMA_Abort+0x258>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d01d      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a21      	ldr	r2, [pc, #132]	; (80026a0 <HAL_DMA_Abort+0x25c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d018      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_DMA_Abort+0x260>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d013      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_DMA_Abort+0x264>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d00e      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a1c      	ldr	r2, [pc, #112]	; (80026ac <HAL_DMA_Abort+0x268>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d009      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a1b      	ldr	r2, [pc, #108]	; (80026b0 <HAL_DMA_Abort+0x26c>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d004      	beq.n	8002652 <HAL_DMA_Abort+0x20e>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a19      	ldr	r2, [pc, #100]	; (80026b4 <HAL_DMA_Abort+0x270>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d132      	bne.n	80026b8 <HAL_DMA_Abort+0x274>
 8002652:	2301      	movs	r3, #1
 8002654:	e031      	b.n	80026ba <HAL_DMA_Abort+0x276>
 8002656:	bf00      	nop
 8002658:	40020010 	.word	0x40020010
 800265c:	40020028 	.word	0x40020028
 8002660:	40020040 	.word	0x40020040
 8002664:	40020058 	.word	0x40020058
 8002668:	40020070 	.word	0x40020070
 800266c:	40020088 	.word	0x40020088
 8002670:	400200a0 	.word	0x400200a0
 8002674:	400200b8 	.word	0x400200b8
 8002678:	40020410 	.word	0x40020410
 800267c:	40020428 	.word	0x40020428
 8002680:	40020440 	.word	0x40020440
 8002684:	40020458 	.word	0x40020458
 8002688:	40020470 	.word	0x40020470
 800268c:	40020488 	.word	0x40020488
 8002690:	400204a0 	.word	0x400204a0
 8002694:	400204b8 	.word	0x400204b8
 8002698:	58025408 	.word	0x58025408
 800269c:	5802541c 	.word	0x5802541c
 80026a0:	58025430 	.word	0x58025430
 80026a4:	58025444 	.word	0x58025444
 80026a8:	58025458 	.word	0x58025458
 80026ac:	5802546c 	.word	0x5802546c
 80026b0:	58025480 	.word	0x58025480
 80026b4:	58025494 	.word	0x58025494
 80026b8:	2300      	movs	r3, #0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a6d      	ldr	r2, [pc, #436]	; (8002888 <HAL_DMA_Abort+0x444>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d04a      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a6b      	ldr	r2, [pc, #428]	; (800288c <HAL_DMA_Abort+0x448>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d045      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_DMA_Abort+0x44c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d040      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a68      	ldr	r2, [pc, #416]	; (8002894 <HAL_DMA_Abort+0x450>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d03b      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a67      	ldr	r2, [pc, #412]	; (8002898 <HAL_DMA_Abort+0x454>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d036      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a65      	ldr	r2, [pc, #404]	; (800289c <HAL_DMA_Abort+0x458>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d031      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a64      	ldr	r2, [pc, #400]	; (80028a0 <HAL_DMA_Abort+0x45c>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d02c      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a62      	ldr	r2, [pc, #392]	; (80028a4 <HAL_DMA_Abort+0x460>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d027      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a61      	ldr	r2, [pc, #388]	; (80028a8 <HAL_DMA_Abort+0x464>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d022      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a5f      	ldr	r2, [pc, #380]	; (80028ac <HAL_DMA_Abort+0x468>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01d      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a5e      	ldr	r2, [pc, #376]	; (80028b0 <HAL_DMA_Abort+0x46c>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d018      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5c      	ldr	r2, [pc, #368]	; (80028b4 <HAL_DMA_Abort+0x470>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5b      	ldr	r2, [pc, #364]	; (80028b8 <HAL_DMA_Abort+0x474>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d00e      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a59      	ldr	r2, [pc, #356]	; (80028bc <HAL_DMA_Abort+0x478>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d009      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_DMA_Abort+0x47c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d004      	beq.n	800276e <HAL_DMA_Abort+0x32a>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a56      	ldr	r2, [pc, #344]	; (80028c4 <HAL_DMA_Abort+0x480>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <HAL_DMA_Abort+0x33c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f022 0201 	bic.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	e007      	b.n	8002790 <HAL_DMA_Abort+0x34c>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002790:	e013      	b.n	80027ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002792:	f7fe ff41 	bl	8001618 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b05      	cmp	r3, #5
 800279e:	d90c      	bls.n	80027ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2203      	movs	r2, #3
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e12d      	b.n	8002a16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e5      	bne.n	8002792 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2f      	ldr	r2, [pc, #188]	; (8002888 <HAL_DMA_Abort+0x444>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d04a      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2d      	ldr	r2, [pc, #180]	; (800288c <HAL_DMA_Abort+0x448>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d045      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2c      	ldr	r2, [pc, #176]	; (8002890 <HAL_DMA_Abort+0x44c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d040      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a2a      	ldr	r2, [pc, #168]	; (8002894 <HAL_DMA_Abort+0x450>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d03b      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a29      	ldr	r2, [pc, #164]	; (8002898 <HAL_DMA_Abort+0x454>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d036      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a27      	ldr	r2, [pc, #156]	; (800289c <HAL_DMA_Abort+0x458>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d031      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a26      	ldr	r2, [pc, #152]	; (80028a0 <HAL_DMA_Abort+0x45c>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d02c      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a24      	ldr	r2, [pc, #144]	; (80028a4 <HAL_DMA_Abort+0x460>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d027      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a23      	ldr	r2, [pc, #140]	; (80028a8 <HAL_DMA_Abort+0x464>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d022      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a21      	ldr	r2, [pc, #132]	; (80028ac <HAL_DMA_Abort+0x468>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d01d      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a20      	ldr	r2, [pc, #128]	; (80028b0 <HAL_DMA_Abort+0x46c>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d018      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1e      	ldr	r2, [pc, #120]	; (80028b4 <HAL_DMA_Abort+0x470>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_DMA_Abort+0x474>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d00e      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a1b      	ldr	r2, [pc, #108]	; (80028bc <HAL_DMA_Abort+0x478>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_DMA_Abort+0x47c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d004      	beq.n	8002866 <HAL_DMA_Abort+0x422>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_DMA_Abort+0x480>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d101      	bne.n	800286a <HAL_DMA_Abort+0x426>
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_DMA_Abort+0x428>
 800286a:	2300      	movs	r3, #0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d02b      	beq.n	80028c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	f003 031f 	and.w	r3, r3, #31
 800287e:	223f      	movs	r2, #63	; 0x3f
 8002880:	409a      	lsls	r2, r3
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	609a      	str	r2, [r3, #8]
 8002886:	e02a      	b.n	80028de <HAL_DMA_Abort+0x49a>
 8002888:	40020010 	.word	0x40020010
 800288c:	40020028 	.word	0x40020028
 8002890:	40020040 	.word	0x40020040
 8002894:	40020058 	.word	0x40020058
 8002898:	40020070 	.word	0x40020070
 800289c:	40020088 	.word	0x40020088
 80028a0:	400200a0 	.word	0x400200a0
 80028a4:	400200b8 	.word	0x400200b8
 80028a8:	40020410 	.word	0x40020410
 80028ac:	40020428 	.word	0x40020428
 80028b0:	40020440 	.word	0x40020440
 80028b4:	40020458 	.word	0x40020458
 80028b8:	40020470 	.word	0x40020470
 80028bc:	40020488 	.word	0x40020488
 80028c0:	400204a0 	.word	0x400204a0
 80028c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	f003 031f 	and.w	r3, r3, #31
 80028d6:	2201      	movs	r2, #1
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a4f      	ldr	r2, [pc, #316]	; (8002a20 <HAL_DMA_Abort+0x5dc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d072      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a4d      	ldr	r2, [pc, #308]	; (8002a24 <HAL_DMA_Abort+0x5e0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d06d      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a4c      	ldr	r2, [pc, #304]	; (8002a28 <HAL_DMA_Abort+0x5e4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d068      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a4a      	ldr	r2, [pc, #296]	; (8002a2c <HAL_DMA_Abort+0x5e8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d063      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a49      	ldr	r2, [pc, #292]	; (8002a30 <HAL_DMA_Abort+0x5ec>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d05e      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <HAL_DMA_Abort+0x5f0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d059      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a46      	ldr	r2, [pc, #280]	; (8002a38 <HAL_DMA_Abort+0x5f4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d054      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a44      	ldr	r2, [pc, #272]	; (8002a3c <HAL_DMA_Abort+0x5f8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d04f      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a43      	ldr	r2, [pc, #268]	; (8002a40 <HAL_DMA_Abort+0x5fc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d04a      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a41      	ldr	r2, [pc, #260]	; (8002a44 <HAL_DMA_Abort+0x600>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d045      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a40      	ldr	r2, [pc, #256]	; (8002a48 <HAL_DMA_Abort+0x604>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d040      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3e      	ldr	r2, [pc, #248]	; (8002a4c <HAL_DMA_Abort+0x608>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d03b      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a3d      	ldr	r2, [pc, #244]	; (8002a50 <HAL_DMA_Abort+0x60c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a3b      	ldr	r2, [pc, #236]	; (8002a54 <HAL_DMA_Abort+0x610>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d031      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3a      	ldr	r2, [pc, #232]	; (8002a58 <HAL_DMA_Abort+0x614>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d02c      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a38      	ldr	r2, [pc, #224]	; (8002a5c <HAL_DMA_Abort+0x618>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d027      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a37      	ldr	r2, [pc, #220]	; (8002a60 <HAL_DMA_Abort+0x61c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d022      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a35      	ldr	r2, [pc, #212]	; (8002a64 <HAL_DMA_Abort+0x620>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d01d      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a34      	ldr	r2, [pc, #208]	; (8002a68 <HAL_DMA_Abort+0x624>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d018      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a32      	ldr	r2, [pc, #200]	; (8002a6c <HAL_DMA_Abort+0x628>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d013      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_DMA_Abort+0x62c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00e      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2f      	ldr	r2, [pc, #188]	; (8002a74 <HAL_DMA_Abort+0x630>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d009      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <HAL_DMA_Abort+0x634>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_Abort+0x58a>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2c      	ldr	r2, [pc, #176]	; (8002a7c <HAL_DMA_Abort+0x638>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d101      	bne.n	80029d2 <HAL_DMA_Abort+0x58e>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_DMA_Abort+0x590>
 80029d2:	2300      	movs	r3, #0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80029e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00c      	beq.n	8002a04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002a02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40020010 	.word	0x40020010
 8002a24:	40020028 	.word	0x40020028
 8002a28:	40020040 	.word	0x40020040
 8002a2c:	40020058 	.word	0x40020058
 8002a30:	40020070 	.word	0x40020070
 8002a34:	40020088 	.word	0x40020088
 8002a38:	400200a0 	.word	0x400200a0
 8002a3c:	400200b8 	.word	0x400200b8
 8002a40:	40020410 	.word	0x40020410
 8002a44:	40020428 	.word	0x40020428
 8002a48:	40020440 	.word	0x40020440
 8002a4c:	40020458 	.word	0x40020458
 8002a50:	40020470 	.word	0x40020470
 8002a54:	40020488 	.word	0x40020488
 8002a58:	400204a0 	.word	0x400204a0
 8002a5c:	400204b8 	.word	0x400204b8
 8002a60:	58025408 	.word	0x58025408
 8002a64:	5802541c 	.word	0x5802541c
 8002a68:	58025430 	.word	0x58025430
 8002a6c:	58025444 	.word	0x58025444
 8002a70:	58025458 	.word	0x58025458
 8002a74:	5802546c 	.word	0x5802546c
 8002a78:	58025480 	.word	0x58025480
 8002a7c:	58025494 	.word	0x58025494

08002a80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e237      	b.n	8002f02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d004      	beq.n	8002aa8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2280      	movs	r2, #128	; 0x80
 8002aa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e22c      	b.n	8002f02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a5c      	ldr	r2, [pc, #368]	; (8002c20 <HAL_DMA_Abort_IT+0x1a0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04a      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a5b      	ldr	r2, [pc, #364]	; (8002c24 <HAL_DMA_Abort_IT+0x1a4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d045      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a59      	ldr	r2, [pc, #356]	; (8002c28 <HAL_DMA_Abort_IT+0x1a8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d040      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_DMA_Abort_IT+0x1ac>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d03b      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a56      	ldr	r2, [pc, #344]	; (8002c30 <HAL_DMA_Abort_IT+0x1b0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d036      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a55      	ldr	r2, [pc, #340]	; (8002c34 <HAL_DMA_Abort_IT+0x1b4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d031      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_DMA_Abort_IT+0x1b8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d02c      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_DMA_Abort_IT+0x1bc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d027      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <HAL_DMA_Abort_IT+0x1c0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d022      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4f      	ldr	r2, [pc, #316]	; (8002c44 <HAL_DMA_Abort_IT+0x1c4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d01d      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4d      	ldr	r2, [pc, #308]	; (8002c48 <HAL_DMA_Abort_IT+0x1c8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d018      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4c      	ldr	r2, [pc, #304]	; (8002c4c <HAL_DMA_Abort_IT+0x1cc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4a      	ldr	r2, [pc, #296]	; (8002c50 <HAL_DMA_Abort_IT+0x1d0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d00e      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a49      	ldr	r2, [pc, #292]	; (8002c54 <HAL_DMA_Abort_IT+0x1d4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d009      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a47      	ldr	r2, [pc, #284]	; (8002c58 <HAL_DMA_Abort_IT+0x1d8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_DMA_Abort_IT+0xc8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_DMA_Abort_IT+0x1dc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_DMA_Abort_IT+0xcc>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_Abort_IT+0xce>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8086 	beq.w	8002c60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2204      	movs	r2, #4
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_DMA_Abort_IT+0x1a0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d04a      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <HAL_DMA_Abort_IT+0x1a4>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d045      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2c      	ldr	r2, [pc, #176]	; (8002c28 <HAL_DMA_Abort_IT+0x1a8>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d040      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a2b      	ldr	r2, [pc, #172]	; (8002c2c <HAL_DMA_Abort_IT+0x1ac>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d03b      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_DMA_Abort_IT+0x1b0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d036      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a28      	ldr	r2, [pc, #160]	; (8002c34 <HAL_DMA_Abort_IT+0x1b4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d031      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <HAL_DMA_Abort_IT+0x1b8>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d02c      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a25      	ldr	r2, [pc, #148]	; (8002c3c <HAL_DMA_Abort_IT+0x1bc>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d027      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a23      	ldr	r2, [pc, #140]	; (8002c40 <HAL_DMA_Abort_IT+0x1c0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d022      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a22      	ldr	r2, [pc, #136]	; (8002c44 <HAL_DMA_Abort_IT+0x1c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d01d      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a20      	ldr	r2, [pc, #128]	; (8002c48 <HAL_DMA_Abort_IT+0x1c8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d018      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_DMA_Abort_IT+0x1cc>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d013      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	; (8002c50 <HAL_DMA_Abort_IT+0x1d0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a1c      	ldr	r2, [pc, #112]	; (8002c54 <HAL_DMA_Abort_IT+0x1d4>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d009      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a1a      	ldr	r2, [pc, #104]	; (8002c58 <HAL_DMA_Abort_IT+0x1d8>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_DMA_Abort_IT+0x17c>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_DMA_Abort_IT+0x1dc>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d108      	bne.n	8002c0e <HAL_DMA_Abort_IT+0x18e>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	e178      	b.n	8002f00 <HAL_DMA_Abort_IT+0x480>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e16f      	b.n	8002f00 <HAL_DMA_Abort_IT+0x480>
 8002c20:	40020010 	.word	0x40020010
 8002c24:	40020028 	.word	0x40020028
 8002c28:	40020040 	.word	0x40020040
 8002c2c:	40020058 	.word	0x40020058
 8002c30:	40020070 	.word	0x40020070
 8002c34:	40020088 	.word	0x40020088
 8002c38:	400200a0 	.word	0x400200a0
 8002c3c:	400200b8 	.word	0x400200b8
 8002c40:	40020410 	.word	0x40020410
 8002c44:	40020428 	.word	0x40020428
 8002c48:	40020440 	.word	0x40020440
 8002c4c:	40020458 	.word	0x40020458
 8002c50:	40020470 	.word	0x40020470
 8002c54:	40020488 	.word	0x40020488
 8002c58:	400204a0 	.word	0x400204a0
 8002c5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 020e 	bic.w	r2, r2, #14
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a6c      	ldr	r2, [pc, #432]	; (8002e28 <HAL_DMA_Abort_IT+0x3a8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d04a      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6b      	ldr	r2, [pc, #428]	; (8002e2c <HAL_DMA_Abort_IT+0x3ac>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d045      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a69      	ldr	r2, [pc, #420]	; (8002e30 <HAL_DMA_Abort_IT+0x3b0>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d040      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a68      	ldr	r2, [pc, #416]	; (8002e34 <HAL_DMA_Abort_IT+0x3b4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d03b      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a66      	ldr	r2, [pc, #408]	; (8002e38 <HAL_DMA_Abort_IT+0x3b8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d036      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a65      	ldr	r2, [pc, #404]	; (8002e3c <HAL_DMA_Abort_IT+0x3bc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d031      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_DMA_Abort_IT+0x3c0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d02c      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a62      	ldr	r2, [pc, #392]	; (8002e44 <HAL_DMA_Abort_IT+0x3c4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d027      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a60      	ldr	r2, [pc, #384]	; (8002e48 <HAL_DMA_Abort_IT+0x3c8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d022      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a5f      	ldr	r2, [pc, #380]	; (8002e4c <HAL_DMA_Abort_IT+0x3cc>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d01d      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a5d      	ldr	r2, [pc, #372]	; (8002e50 <HAL_DMA_Abort_IT+0x3d0>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d018      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_DMA_Abort_IT+0x3d4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a5a      	ldr	r2, [pc, #360]	; (8002e58 <HAL_DMA_Abort_IT+0x3d8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a59      	ldr	r2, [pc, #356]	; (8002e5c <HAL_DMA_Abort_IT+0x3dc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a57      	ldr	r2, [pc, #348]	; (8002e60 <HAL_DMA_Abort_IT+0x3e0>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x290>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a56      	ldr	r2, [pc, #344]	; (8002e64 <HAL_DMA_Abort_IT+0x3e4>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d108      	bne.n	8002d22 <HAL_DMA_Abort_IT+0x2a2>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	e007      	b.n	8002d32 <HAL_DMA_Abort_IT+0x2b2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <HAL_DMA_Abort_IT+0x3a8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d072      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a3a      	ldr	r2, [pc, #232]	; (8002e2c <HAL_DMA_Abort_IT+0x3ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d06d      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a39      	ldr	r2, [pc, #228]	; (8002e30 <HAL_DMA_Abort_IT+0x3b0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d068      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a37      	ldr	r2, [pc, #220]	; (8002e34 <HAL_DMA_Abort_IT+0x3b4>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d063      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <HAL_DMA_Abort_IT+0x3b8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d05e      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a34      	ldr	r2, [pc, #208]	; (8002e3c <HAL_DMA_Abort_IT+0x3bc>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d059      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a33      	ldr	r2, [pc, #204]	; (8002e40 <HAL_DMA_Abort_IT+0x3c0>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d054      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a31      	ldr	r2, [pc, #196]	; (8002e44 <HAL_DMA_Abort_IT+0x3c4>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d04f      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a30      	ldr	r2, [pc, #192]	; (8002e48 <HAL_DMA_Abort_IT+0x3c8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d04a      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a2e      	ldr	r2, [pc, #184]	; (8002e4c <HAL_DMA_Abort_IT+0x3cc>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d045      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <HAL_DMA_Abort_IT+0x3d0>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d040      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a2b      	ldr	r2, [pc, #172]	; (8002e54 <HAL_DMA_Abort_IT+0x3d4>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d03b      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_DMA_Abort_IT+0x3d8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d036      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a28      	ldr	r2, [pc, #160]	; (8002e5c <HAL_DMA_Abort_IT+0x3dc>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d031      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a27      	ldr	r2, [pc, #156]	; (8002e60 <HAL_DMA_Abort_IT+0x3e0>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02c      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a25      	ldr	r2, [pc, #148]	; (8002e64 <HAL_DMA_Abort_IT+0x3e4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a24      	ldr	r2, [pc, #144]	; (8002e68 <HAL_DMA_Abort_IT+0x3e8>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a22      	ldr	r2, [pc, #136]	; (8002e6c <HAL_DMA_Abort_IT+0x3ec>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d01d      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <HAL_DMA_Abort_IT+0x3f0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d018      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <HAL_DMA_Abort_IT+0x3f4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d013      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1e      	ldr	r2, [pc, #120]	; (8002e78 <HAL_DMA_Abort_IT+0x3f8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d00e      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <HAL_DMA_Abort_IT+0x3fc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d009      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_DMA_Abort_IT+0x400>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x3a2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a19      	ldr	r2, [pc, #100]	; (8002e84 <HAL_DMA_Abort_IT+0x404>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d132      	bne.n	8002e88 <HAL_DMA_Abort_IT+0x408>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e031      	b.n	8002e8a <HAL_DMA_Abort_IT+0x40a>
 8002e26:	bf00      	nop
 8002e28:	40020010 	.word	0x40020010
 8002e2c:	40020028 	.word	0x40020028
 8002e30:	40020040 	.word	0x40020040
 8002e34:	40020058 	.word	0x40020058
 8002e38:	40020070 	.word	0x40020070
 8002e3c:	40020088 	.word	0x40020088
 8002e40:	400200a0 	.word	0x400200a0
 8002e44:	400200b8 	.word	0x400200b8
 8002e48:	40020410 	.word	0x40020410
 8002e4c:	40020428 	.word	0x40020428
 8002e50:	40020440 	.word	0x40020440
 8002e54:	40020458 	.word	0x40020458
 8002e58:	40020470 	.word	0x40020470
 8002e5c:	40020488 	.word	0x40020488
 8002e60:	400204a0 	.word	0x400204a0
 8002e64:	400204b8 	.word	0x400204b8
 8002e68:	58025408 	.word	0x58025408
 8002e6c:	5802541c 	.word	0x5802541c
 8002e70:	58025430 	.word	0x58025430
 8002e74:	58025444 	.word	0x58025444
 8002e78:	58025458 	.word	0x58025458
 8002e7c:	5802546c 	.word	0x5802546c
 8002e80:	58025480 	.word	0x58025480
 8002e84:	58025494 	.word	0x58025494
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d028      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2201      	movs	r2, #1
 8002eae:	409a      	lsls	r2, r3
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ebc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00c      	beq.n	8002ee0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ed4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002ede:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop

08002f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08a      	sub	sp, #40	; 0x28
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f18:	4b67      	ldr	r3, [pc, #412]	; (80030b8 <HAL_DMA_IRQHandler+0x1ac>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a67      	ldr	r2, [pc, #412]	; (80030bc <HAL_DMA_IRQHandler+0x1b0>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	0a9b      	lsrs	r3, r3, #10
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f32:	6a3b      	ldr	r3, [r7, #32]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <HAL_DMA_IRQHandler+0x1b4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d04a      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a5d      	ldr	r2, [pc, #372]	; (80030c4 <HAL_DMA_IRQHandler+0x1b8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d045      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a5c      	ldr	r2, [pc, #368]	; (80030c8 <HAL_DMA_IRQHandler+0x1bc>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d040      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5a      	ldr	r2, [pc, #360]	; (80030cc <HAL_DMA_IRQHandler+0x1c0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d03b      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a59      	ldr	r2, [pc, #356]	; (80030d0 <HAL_DMA_IRQHandler+0x1c4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d036      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a57      	ldr	r2, [pc, #348]	; (80030d4 <HAL_DMA_IRQHandler+0x1c8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d031      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a56      	ldr	r2, [pc, #344]	; (80030d8 <HAL_DMA_IRQHandler+0x1cc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d02c      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a54      	ldr	r2, [pc, #336]	; (80030dc <HAL_DMA_IRQHandler+0x1d0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d027      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a53      	ldr	r2, [pc, #332]	; (80030e0 <HAL_DMA_IRQHandler+0x1d4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d022      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a51      	ldr	r2, [pc, #324]	; (80030e4 <HAL_DMA_IRQHandler+0x1d8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01d      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a50      	ldr	r2, [pc, #320]	; (80030e8 <HAL_DMA_IRQHandler+0x1dc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d018      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a4e      	ldr	r2, [pc, #312]	; (80030ec <HAL_DMA_IRQHandler+0x1e0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d013      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a4d      	ldr	r2, [pc, #308]	; (80030f0 <HAL_DMA_IRQHandler+0x1e4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00e      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a4b      	ldr	r2, [pc, #300]	; (80030f4 <HAL_DMA_IRQHandler+0x1e8>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d009      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a4a      	ldr	r2, [pc, #296]	; (80030f8 <HAL_DMA_IRQHandler+0x1ec>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_IRQHandler+0xd2>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a48      	ldr	r2, [pc, #288]	; (80030fc <HAL_DMA_IRQHandler+0x1f0>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d101      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0xd6>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_IRQHandler+0xd8>
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 842b 	beq.w	8003840 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	f003 031f 	and.w	r3, r3, #31
 8002ff2:	2208      	movs	r2, #8
 8002ff4:	409a      	lsls	r2, r3
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80a2 	beq.w	8003144 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a2e      	ldr	r2, [pc, #184]	; (80030c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d04a      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_DMA_IRQHandler+0x1b8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d045      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a2b      	ldr	r2, [pc, #172]	; (80030c8 <HAL_DMA_IRQHandler+0x1bc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d040      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_DMA_IRQHandler+0x1c0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d03b      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a28      	ldr	r2, [pc, #160]	; (80030d0 <HAL_DMA_IRQHandler+0x1c4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d036      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d031      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a25      	ldr	r2, [pc, #148]	; (80030d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d02c      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a24      	ldr	r2, [pc, #144]	; (80030dc <HAL_DMA_IRQHandler+0x1d0>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d027      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a22      	ldr	r2, [pc, #136]	; (80030e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d022      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a21      	ldr	r2, [pc, #132]	; (80030e4 <HAL_DMA_IRQHandler+0x1d8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d01d      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1f      	ldr	r2, [pc, #124]	; (80030e8 <HAL_DMA_IRQHandler+0x1dc>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d018      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1e      	ldr	r2, [pc, #120]	; (80030ec <HAL_DMA_IRQHandler+0x1e0>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d013      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a1c      	ldr	r2, [pc, #112]	; (80030f0 <HAL_DMA_IRQHandler+0x1e4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d00e      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a1b      	ldr	r2, [pc, #108]	; (80030f4 <HAL_DMA_IRQHandler+0x1e8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a19      	ldr	r2, [pc, #100]	; (80030f8 <HAL_DMA_IRQHandler+0x1ec>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d004      	beq.n	80030a0 <HAL_DMA_IRQHandler+0x194>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a18      	ldr	r2, [pc, #96]	; (80030fc <HAL_DMA_IRQHandler+0x1f0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d12f      	bne.n	8003100 <HAL_DMA_IRQHandler+0x1f4>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	bf14      	ite	ne
 80030ae:	2301      	movne	r3, #1
 80030b0:	2300      	moveq	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	e02e      	b.n	8003114 <HAL_DMA_IRQHandler+0x208>
 80030b6:	bf00      	nop
 80030b8:	24000000 	.word	0x24000000
 80030bc:	1b4e81b5 	.word	0x1b4e81b5
 80030c0:	40020010 	.word	0x40020010
 80030c4:	40020028 	.word	0x40020028
 80030c8:	40020040 	.word	0x40020040
 80030cc:	40020058 	.word	0x40020058
 80030d0:	40020070 	.word	0x40020070
 80030d4:	40020088 	.word	0x40020088
 80030d8:	400200a0 	.word	0x400200a0
 80030dc:	400200b8 	.word	0x400200b8
 80030e0:	40020410 	.word	0x40020410
 80030e4:	40020428 	.word	0x40020428
 80030e8:	40020440 	.word	0x40020440
 80030ec:	40020458 	.word	0x40020458
 80030f0:	40020470 	.word	0x40020470
 80030f4:	40020488 	.word	0x40020488
 80030f8:	400204a0 	.word	0x400204a0
 80030fc:	400204b8 	.word	0x400204b8
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	bf14      	ite	ne
 800310e:	2301      	movne	r3, #1
 8003110:	2300      	moveq	r3, #0
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0204 	bic.w	r2, r2, #4
 8003126:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	2208      	movs	r2, #8
 8003132:	409a      	lsls	r2, r3
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d06e      	beq.n	8003238 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a69      	ldr	r2, [pc, #420]	; (8003304 <HAL_DMA_IRQHandler+0x3f8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d04a      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_DMA_IRQHandler+0x3fc>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d045      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a66      	ldr	r2, [pc, #408]	; (800330c <HAL_DMA_IRQHandler+0x400>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d040      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a64      	ldr	r2, [pc, #400]	; (8003310 <HAL_DMA_IRQHandler+0x404>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d03b      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a63      	ldr	r2, [pc, #396]	; (8003314 <HAL_DMA_IRQHandler+0x408>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d036      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a61      	ldr	r2, [pc, #388]	; (8003318 <HAL_DMA_IRQHandler+0x40c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d031      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a60      	ldr	r2, [pc, #384]	; (800331c <HAL_DMA_IRQHandler+0x410>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d02c      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_DMA_IRQHandler+0x414>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d027      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a5d      	ldr	r2, [pc, #372]	; (8003324 <HAL_DMA_IRQHandler+0x418>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d022      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5b      	ldr	r2, [pc, #364]	; (8003328 <HAL_DMA_IRQHandler+0x41c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d01d      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_DMA_IRQHandler+0x420>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d018      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a58      	ldr	r2, [pc, #352]	; (8003330 <HAL_DMA_IRQHandler+0x424>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d013      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_DMA_IRQHandler+0x428>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00e      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a55      	ldr	r2, [pc, #340]	; (8003338 <HAL_DMA_IRQHandler+0x42c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d009      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a54      	ldr	r2, [pc, #336]	; (800333c <HAL_DMA_IRQHandler+0x430>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d004      	beq.n	80031fa <HAL_DMA_IRQHandler+0x2ee>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a52      	ldr	r2, [pc, #328]	; (8003340 <HAL_DMA_IRQHandler+0x434>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10a      	bne.n	8003210 <HAL_DMA_IRQHandler+0x304>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e003      	b.n	8003218 <HAL_DMA_IRQHandler+0x30c>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2300      	movs	r3, #0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003230:	f043 0202 	orr.w	r2, r3, #2
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800323c:	f003 031f 	and.w	r3, r3, #31
 8003240:	2204      	movs	r2, #4
 8003242:	409a      	lsls	r2, r3
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 808f 	beq.w	800336c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a2c      	ldr	r2, [pc, #176]	; (8003304 <HAL_DMA_IRQHandler+0x3f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d04a      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a2a      	ldr	r2, [pc, #168]	; (8003308 <HAL_DMA_IRQHandler+0x3fc>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d045      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a29      	ldr	r2, [pc, #164]	; (800330c <HAL_DMA_IRQHandler+0x400>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d040      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_DMA_IRQHandler+0x404>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d03b      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a26      	ldr	r2, [pc, #152]	; (8003314 <HAL_DMA_IRQHandler+0x408>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d036      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a24      	ldr	r2, [pc, #144]	; (8003318 <HAL_DMA_IRQHandler+0x40c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d031      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <HAL_DMA_IRQHandler+0x410>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d02c      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_DMA_IRQHandler+0x414>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d027      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a20      	ldr	r2, [pc, #128]	; (8003324 <HAL_DMA_IRQHandler+0x418>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d022      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <HAL_DMA_IRQHandler+0x41c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01d      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a1d      	ldr	r2, [pc, #116]	; (800332c <HAL_DMA_IRQHandler+0x420>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d018      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1b      	ldr	r2, [pc, #108]	; (8003330 <HAL_DMA_IRQHandler+0x424>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_DMA_IRQHandler+0x428>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d00e      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a18      	ldr	r2, [pc, #96]	; (8003338 <HAL_DMA_IRQHandler+0x42c>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d009      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_DMA_IRQHandler+0x430>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d004      	beq.n	80032ee <HAL_DMA_IRQHandler+0x3e2>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <HAL_DMA_IRQHandler+0x434>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d12a      	bne.n	8003344 <HAL_DMA_IRQHandler+0x438>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	bf14      	ite	ne
 80032fc:	2301      	movne	r3, #1
 80032fe:	2300      	moveq	r3, #0
 8003300:	b2db      	uxtb	r3, r3
 8003302:	e023      	b.n	800334c <HAL_DMA_IRQHandler+0x440>
 8003304:	40020010 	.word	0x40020010
 8003308:	40020028 	.word	0x40020028
 800330c:	40020040 	.word	0x40020040
 8003310:	40020058 	.word	0x40020058
 8003314:	40020070 	.word	0x40020070
 8003318:	40020088 	.word	0x40020088
 800331c:	400200a0 	.word	0x400200a0
 8003320:	400200b8 	.word	0x400200b8
 8003324:	40020410 	.word	0x40020410
 8003328:	40020428 	.word	0x40020428
 800332c:	40020440 	.word	0x40020440
 8003330:	40020458 	.word	0x40020458
 8003334:	40020470 	.word	0x40020470
 8003338:	40020488 	.word	0x40020488
 800333c:	400204a0 	.word	0x400204a0
 8003340:	400204b8 	.word	0x400204b8
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2204      	movs	r2, #4
 800335a:	409a      	lsls	r2, r3
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003364:	f043 0204 	orr.w	r2, r3, #4
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003370:	f003 031f 	and.w	r3, r3, #31
 8003374:	2210      	movs	r2, #16
 8003376:	409a      	lsls	r2, r3
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a6 	beq.w	80034ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a85      	ldr	r2, [pc, #532]	; (800359c <HAL_DMA_IRQHandler+0x690>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d04a      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a83      	ldr	r2, [pc, #524]	; (80035a0 <HAL_DMA_IRQHandler+0x694>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d045      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a82      	ldr	r2, [pc, #520]	; (80035a4 <HAL_DMA_IRQHandler+0x698>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d040      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <HAL_DMA_IRQHandler+0x69c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d03b      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a7f      	ldr	r2, [pc, #508]	; (80035ac <HAL_DMA_IRQHandler+0x6a0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d036      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a7d      	ldr	r2, [pc, #500]	; (80035b0 <HAL_DMA_IRQHandler+0x6a4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d031      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7c      	ldr	r2, [pc, #496]	; (80035b4 <HAL_DMA_IRQHandler+0x6a8>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d02c      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a7a      	ldr	r2, [pc, #488]	; (80035b8 <HAL_DMA_IRQHandler+0x6ac>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d027      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a79      	ldr	r2, [pc, #484]	; (80035bc <HAL_DMA_IRQHandler+0x6b0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d022      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a77      	ldr	r2, [pc, #476]	; (80035c0 <HAL_DMA_IRQHandler+0x6b4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d01d      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_DMA_IRQHandler+0x6b8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d018      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a74      	ldr	r2, [pc, #464]	; (80035c8 <HAL_DMA_IRQHandler+0x6bc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a73      	ldr	r2, [pc, #460]	; (80035cc <HAL_DMA_IRQHandler+0x6c0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d00e      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a71      	ldr	r2, [pc, #452]	; (80035d0 <HAL_DMA_IRQHandler+0x6c4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d009      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a70      	ldr	r2, [pc, #448]	; (80035d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_DMA_IRQHandler+0x516>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a6e      	ldr	r2, [pc, #440]	; (80035d8 <HAL_DMA_IRQHandler+0x6cc>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d10a      	bne.n	8003438 <HAL_DMA_IRQHandler+0x52c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	e009      	b.n	800344c <HAL_DMA_IRQHandler+0x540>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0304 	and.w	r3, r3, #4
 8003442:	2b00      	cmp	r3, #0
 8003444:	bf14      	ite	ne
 8003446:	2301      	movne	r3, #1
 8003448:	2300      	moveq	r3, #0
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d03e      	beq.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	2210      	movs	r2, #16
 800345a:	409a      	lsls	r2, r3
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d018      	beq.n	80034a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d108      	bne.n	800348e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d024      	beq.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e01f      	b.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01b      	beq.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	4798      	blx	r3
 800349e:	e016      	b.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d107      	bne.n	80034be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0208 	bic.w	r2, r2, #8
 80034bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	f003 031f 	and.w	r3, r3, #31
 80034d6:	2220      	movs	r2, #32
 80034d8:	409a      	lsls	r2, r3
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8110 	beq.w	8003704 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a2c      	ldr	r2, [pc, #176]	; (800359c <HAL_DMA_IRQHandler+0x690>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d04a      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a2b      	ldr	r2, [pc, #172]	; (80035a0 <HAL_DMA_IRQHandler+0x694>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d045      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a29      	ldr	r2, [pc, #164]	; (80035a4 <HAL_DMA_IRQHandler+0x698>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d040      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a28      	ldr	r2, [pc, #160]	; (80035a8 <HAL_DMA_IRQHandler+0x69c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d03b      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <HAL_DMA_IRQHandler+0x6a0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d036      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a25      	ldr	r2, [pc, #148]	; (80035b0 <HAL_DMA_IRQHandler+0x6a4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d031      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_DMA_IRQHandler+0x6a8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d02c      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <HAL_DMA_IRQHandler+0x6ac>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d027      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_DMA_IRQHandler+0x6b0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d022      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <HAL_DMA_IRQHandler+0x6b4>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d01d      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <HAL_DMA_IRQHandler+0x6b8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d018      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <HAL_DMA_IRQHandler+0x6bc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d013      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1a      	ldr	r2, [pc, #104]	; (80035cc <HAL_DMA_IRQHandler+0x6c0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d00e      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_DMA_IRQHandler+0x6c4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d009      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a17      	ldr	r2, [pc, #92]	; (80035d4 <HAL_DMA_IRQHandler+0x6c8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <HAL_DMA_IRQHandler+0x678>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_DMA_IRQHandler+0x6cc>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d12b      	bne.n	80035dc <HAL_DMA_IRQHandler+0x6d0>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0310 	and.w	r3, r3, #16
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e02a      	b.n	80035f0 <HAL_DMA_IRQHandler+0x6e4>
 800359a:	bf00      	nop
 800359c:	40020010 	.word	0x40020010
 80035a0:	40020028 	.word	0x40020028
 80035a4:	40020040 	.word	0x40020040
 80035a8:	40020058 	.word	0x40020058
 80035ac:	40020070 	.word	0x40020070
 80035b0:	40020088 	.word	0x40020088
 80035b4:	400200a0 	.word	0x400200a0
 80035b8:	400200b8 	.word	0x400200b8
 80035bc:	40020410 	.word	0x40020410
 80035c0:	40020428 	.word	0x40020428
 80035c4:	40020440 	.word	0x40020440
 80035c8:	40020458 	.word	0x40020458
 80035cc:	40020470 	.word	0x40020470
 80035d0:	40020488 	.word	0x40020488
 80035d4:	400204a0 	.word	0x400204a0
 80035d8:	400204b8 	.word	0x400204b8
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8087 	beq.w	8003704 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2220      	movs	r2, #32
 8003600:	409a      	lsls	r2, r3
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b04      	cmp	r3, #4
 8003610:	d139      	bne.n	8003686 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003630:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_IRQHandler+0x736>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003656:	f003 031f 	and.w	r3, r3, #31
 800365a:	223f      	movs	r2, #63	; 0x3f
 800365c:	409a      	lsls	r2, r3
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 834a 	beq.w	8003d10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	4798      	blx	r3
          }
          return;
 8003684:	e344      	b.n	8003d10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d018      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d108      	bne.n	80036b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d02c      	beq.n	8003704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
 80036b2:	e027      	b.n	8003704 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d023      	beq.n	8003704 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	4798      	blx	r3
 80036c4:	e01e      	b.n	8003704 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10f      	bne.n	80036f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0210 	bic.w	r2, r2, #16
 80036e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 8306 	beq.w	8003d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8088 	beq.w	800382c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2204      	movs	r2, #4
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a7a      	ldr	r2, [pc, #488]	; (8003914 <HAL_DMA_IRQHandler+0xa08>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d04a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a79      	ldr	r2, [pc, #484]	; (8003918 <HAL_DMA_IRQHandler+0xa0c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d045      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_DMA_IRQHandler+0xa10>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d040      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a76      	ldr	r2, [pc, #472]	; (8003920 <HAL_DMA_IRQHandler+0xa14>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d03b      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a74      	ldr	r2, [pc, #464]	; (8003924 <HAL_DMA_IRQHandler+0xa18>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d036      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a73      	ldr	r2, [pc, #460]	; (8003928 <HAL_DMA_IRQHandler+0xa1c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d031      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a71      	ldr	r2, [pc, #452]	; (800392c <HAL_DMA_IRQHandler+0xa20>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d02c      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a70      	ldr	r2, [pc, #448]	; (8003930 <HAL_DMA_IRQHandler+0xa24>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d027      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6e      	ldr	r2, [pc, #440]	; (8003934 <HAL_DMA_IRQHandler+0xa28>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6d      	ldr	r2, [pc, #436]	; (8003938 <HAL_DMA_IRQHandler+0xa2c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d01d      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a6b      	ldr	r2, [pc, #428]	; (800393c <HAL_DMA_IRQHandler+0xa30>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a6a      	ldr	r2, [pc, #424]	; (8003940 <HAL_DMA_IRQHandler+0xa34>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_DMA_IRQHandler+0xa38>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a67      	ldr	r2, [pc, #412]	; (8003948 <HAL_DMA_IRQHandler+0xa3c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_DMA_IRQHandler+0xa40>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x8b8>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a64      	ldr	r2, [pc, #400]	; (8003950 <HAL_DMA_IRQHandler+0xa44>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d108      	bne.n	80037d6 <HAL_DMA_IRQHandler+0x8ca>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
 80037d4:	e007      	b.n	80037e6 <HAL_DMA_IRQHandler+0x8da>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0201 	bic.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	3301      	adds	r3, #1
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d307      	bcc.n	8003802 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d1f2      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x8da>
 8003800:	e000      	b.n	8003804 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003802:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2203      	movs	r2, #3
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800381a:	e003      	b.n	8003824 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8272 	beq.w	8003d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
 800383e:	e26c      	b.n	8003d1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a43      	ldr	r2, [pc, #268]	; (8003954 <HAL_DMA_IRQHandler+0xa48>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d022      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a42      	ldr	r2, [pc, #264]	; (8003958 <HAL_DMA_IRQHandler+0xa4c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d01d      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a40      	ldr	r2, [pc, #256]	; (800395c <HAL_DMA_IRQHandler+0xa50>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d018      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a3f      	ldr	r2, [pc, #252]	; (8003960 <HAL_DMA_IRQHandler+0xa54>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a3d      	ldr	r2, [pc, #244]	; (8003964 <HAL_DMA_IRQHandler+0xa58>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00e      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3c      	ldr	r2, [pc, #240]	; (8003968 <HAL_DMA_IRQHandler+0xa5c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a3a      	ldr	r2, [pc, #232]	; (800396c <HAL_DMA_IRQHandler+0xa60>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_DMA_IRQHandler+0x984>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a39      	ldr	r2, [pc, #228]	; (8003970 <HAL_DMA_IRQHandler+0xa64>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_DMA_IRQHandler+0x988>
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_DMA_IRQHandler+0x98a>
 8003894:	2300      	movs	r3, #0
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 823f 	beq.w	8003d1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2204      	movs	r2, #4
 80038ae:	409a      	lsls	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80cd 	beq.w	8003a54 <HAL_DMA_IRQHandler+0xb48>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80c7 	beq.w	8003a54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2204      	movs	r2, #4
 80038d0:	409a      	lsls	r2, r3
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d049      	beq.n	8003974 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8210 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038fc:	e20a      	b.n	8003d14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8206 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003910:	e200      	b.n	8003d14 <HAL_DMA_IRQHandler+0xe08>
 8003912:	bf00      	nop
 8003914:	40020010 	.word	0x40020010
 8003918:	40020028 	.word	0x40020028
 800391c:	40020040 	.word	0x40020040
 8003920:	40020058 	.word	0x40020058
 8003924:	40020070 	.word	0x40020070
 8003928:	40020088 	.word	0x40020088
 800392c:	400200a0 	.word	0x400200a0
 8003930:	400200b8 	.word	0x400200b8
 8003934:	40020410 	.word	0x40020410
 8003938:	40020428 	.word	0x40020428
 800393c:	40020440 	.word	0x40020440
 8003940:	40020458 	.word	0x40020458
 8003944:	40020470 	.word	0x40020470
 8003948:	40020488 	.word	0x40020488
 800394c:	400204a0 	.word	0x400204a0
 8003950:	400204b8 	.word	0x400204b8
 8003954:	58025408 	.word	0x58025408
 8003958:	5802541c 	.word	0x5802541c
 800395c:	58025430 	.word	0x58025430
 8003960:	58025444 	.word	0x58025444
 8003964:	58025458 	.word	0x58025458
 8003968:	5802546c 	.word	0x5802546c
 800396c:	58025480 	.word	0x58025480
 8003970:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d160      	bne.n	8003a40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a7f      	ldr	r2, [pc, #508]	; (8003b80 <HAL_DMA_IRQHandler+0xc74>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d04a      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a7d      	ldr	r2, [pc, #500]	; (8003b84 <HAL_DMA_IRQHandler+0xc78>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d045      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a7c      	ldr	r2, [pc, #496]	; (8003b88 <HAL_DMA_IRQHandler+0xc7c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d040      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a7a      	ldr	r2, [pc, #488]	; (8003b8c <HAL_DMA_IRQHandler+0xc80>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d03b      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a79      	ldr	r2, [pc, #484]	; (8003b90 <HAL_DMA_IRQHandler+0xc84>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d036      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a77      	ldr	r2, [pc, #476]	; (8003b94 <HAL_DMA_IRQHandler+0xc88>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d031      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a76      	ldr	r2, [pc, #472]	; (8003b98 <HAL_DMA_IRQHandler+0xc8c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d02c      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a74      	ldr	r2, [pc, #464]	; (8003b9c <HAL_DMA_IRQHandler+0xc90>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d027      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a73      	ldr	r2, [pc, #460]	; (8003ba0 <HAL_DMA_IRQHandler+0xc94>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d022      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a71      	ldr	r2, [pc, #452]	; (8003ba4 <HAL_DMA_IRQHandler+0xc98>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a70      	ldr	r2, [pc, #448]	; (8003ba8 <HAL_DMA_IRQHandler+0xc9c>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d018      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <HAL_DMA_IRQHandler+0xca0>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d013      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6d      	ldr	r2, [pc, #436]	; (8003bb0 <HAL_DMA_IRQHandler+0xca4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6b      	ldr	r2, [pc, #428]	; (8003bb4 <HAL_DMA_IRQHandler+0xca8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d009      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a6a      	ldr	r2, [pc, #424]	; (8003bb8 <HAL_DMA_IRQHandler+0xcac>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_DMA_IRQHandler+0xb12>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a68      	ldr	r2, [pc, #416]	; (8003bbc <HAL_DMA_IRQHandler+0xcb0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d108      	bne.n	8003a30 <HAL_DMA_IRQHandler+0xb24>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0208 	bic.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	e007      	b.n	8003a40 <HAL_DMA_IRQHandler+0xb34>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0204 	bic.w	r2, r2, #4
 8003a3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8165 	beq.w	8003d14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a52:	e15f      	b.n	8003d14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	409a      	lsls	r2, r3
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	4013      	ands	r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80c5 	beq.w	8003bf4 <HAL_DMA_IRQHandler+0xce8>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80bf 	beq.w	8003bf4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2202      	movs	r2, #2
 8003a80:	409a      	lsls	r2, r3
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d018      	beq.n	8003ac2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d109      	bne.n	8003aae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 813a 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aac:	e134      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8130 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ac0:	e12a      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f003 0320 	and.w	r3, r3, #32
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 8089 	bne.w	8003be0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a2b      	ldr	r2, [pc, #172]	; (8003b80 <HAL_DMA_IRQHandler+0xc74>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04a      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a29      	ldr	r2, [pc, #164]	; (8003b84 <HAL_DMA_IRQHandler+0xc78>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d045      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a28      	ldr	r2, [pc, #160]	; (8003b88 <HAL_DMA_IRQHandler+0xc7c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d040      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a26      	ldr	r2, [pc, #152]	; (8003b8c <HAL_DMA_IRQHandler+0xc80>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d03b      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a25      	ldr	r2, [pc, #148]	; (8003b90 <HAL_DMA_IRQHandler+0xc84>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d036      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a23      	ldr	r2, [pc, #140]	; (8003b94 <HAL_DMA_IRQHandler+0xc88>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d031      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a22      	ldr	r2, [pc, #136]	; (8003b98 <HAL_DMA_IRQHandler+0xc8c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d02c      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a20      	ldr	r2, [pc, #128]	; (8003b9c <HAL_DMA_IRQHandler+0xc90>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d027      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1f      	ldr	r2, [pc, #124]	; (8003ba0 <HAL_DMA_IRQHandler+0xc94>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d022      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1d      	ldr	r2, [pc, #116]	; (8003ba4 <HAL_DMA_IRQHandler+0xc98>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d01d      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1c      	ldr	r2, [pc, #112]	; (8003ba8 <HAL_DMA_IRQHandler+0xc9c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d018      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1a      	ldr	r2, [pc, #104]	; (8003bac <HAL_DMA_IRQHandler+0xca0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a19      	ldr	r2, [pc, #100]	; (8003bb0 <HAL_DMA_IRQHandler+0xca4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d00e      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a17      	ldr	r2, [pc, #92]	; (8003bb4 <HAL_DMA_IRQHandler+0xca8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_DMA_IRQHandler+0xcac>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d004      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xc62>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a14      	ldr	r2, [pc, #80]	; (8003bbc <HAL_DMA_IRQHandler+0xcb0>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d128      	bne.n	8003bc0 <HAL_DMA_IRQHandler+0xcb4>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0214 	bic.w	r2, r2, #20
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e027      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xcc4>
 8003b80:	40020010 	.word	0x40020010
 8003b84:	40020028 	.word	0x40020028
 8003b88:	40020040 	.word	0x40020040
 8003b8c:	40020058 	.word	0x40020058
 8003b90:	40020070 	.word	0x40020070
 8003b94:	40020088 	.word	0x40020088
 8003b98:	400200a0 	.word	0x400200a0
 8003b9c:	400200b8 	.word	0x400200b8
 8003ba0:	40020410 	.word	0x40020410
 8003ba4:	40020428 	.word	0x40020428
 8003ba8:	40020440 	.word	0x40020440
 8003bac:	40020458 	.word	0x40020458
 8003bb0:	40020470 	.word	0x40020470
 8003bb4:	40020488 	.word	0x40020488
 8003bb8:	400204a0 	.word	0x400204a0
 8003bbc:	400204b8 	.word	0x400204b8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020a 	bic.w	r2, r2, #10
 8003bce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8097 	beq.w	8003d18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bf2:	e091      	b.n	8003d18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf8:	f003 031f 	and.w	r3, r3, #31
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	409a      	lsls	r2, r3
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8088 	beq.w	8003d1a <HAL_DMA_IRQHandler+0xe0e>
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8082 	beq.w	8003d1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a41      	ldr	r2, [pc, #260]	; (8003d20 <HAL_DMA_IRQHandler+0xe14>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d04a      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3f      	ldr	r2, [pc, #252]	; (8003d24 <HAL_DMA_IRQHandler+0xe18>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d045      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a3e      	ldr	r2, [pc, #248]	; (8003d28 <HAL_DMA_IRQHandler+0xe1c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d040      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a3c      	ldr	r2, [pc, #240]	; (8003d2c <HAL_DMA_IRQHandler+0xe20>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d03b      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3b      	ldr	r2, [pc, #236]	; (8003d30 <HAL_DMA_IRQHandler+0xe24>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d036      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a39      	ldr	r2, [pc, #228]	; (8003d34 <HAL_DMA_IRQHandler+0xe28>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d031      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a38      	ldr	r2, [pc, #224]	; (8003d38 <HAL_DMA_IRQHandler+0xe2c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d02c      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a36      	ldr	r2, [pc, #216]	; (8003d3c <HAL_DMA_IRQHandler+0xe30>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d027      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <HAL_DMA_IRQHandler+0xe34>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d022      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a33      	ldr	r2, [pc, #204]	; (8003d44 <HAL_DMA_IRQHandler+0xe38>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01d      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a32      	ldr	r2, [pc, #200]	; (8003d48 <HAL_DMA_IRQHandler+0xe3c>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d018      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a30      	ldr	r2, [pc, #192]	; (8003d4c <HAL_DMA_IRQHandler+0xe40>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d013      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a2f      	ldr	r2, [pc, #188]	; (8003d50 <HAL_DMA_IRQHandler+0xe44>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00e      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a2d      	ldr	r2, [pc, #180]	; (8003d54 <HAL_DMA_IRQHandler+0xe48>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d009      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a2c      	ldr	r2, [pc, #176]	; (8003d58 <HAL_DMA_IRQHandler+0xe4c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d004      	beq.n	8003cb6 <HAL_DMA_IRQHandler+0xdaa>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <HAL_DMA_IRQHandler+0xe50>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d108      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0xdbc>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 021c 	bic.w	r2, r2, #28
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	e007      	b.n	8003cd8 <HAL_DMA_IRQHandler+0xdcc>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 020e 	bic.w	r2, r2, #14
 8003cd6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	409a      	lsls	r2, r3
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	4798      	blx	r3
 8003d0e:	e004      	b.n	8003d1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003d10:	bf00      	nop
 8003d12:	e002      	b.n	8003d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d14:	bf00      	nop
 8003d16:	e000      	b.n	8003d1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d1a:	3728      	adds	r7, #40	; 0x28
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40020010 	.word	0x40020010
 8003d24:	40020028 	.word	0x40020028
 8003d28:	40020040 	.word	0x40020040
 8003d2c:	40020058 	.word	0x40020058
 8003d30:	40020070 	.word	0x40020070
 8003d34:	40020088 	.word	0x40020088
 8003d38:	400200a0 	.word	0x400200a0
 8003d3c:	400200b8 	.word	0x400200b8
 8003d40:	40020410 	.word	0x40020410
 8003d44:	40020428 	.word	0x40020428
 8003d48:	40020440 	.word	0x40020440
 8003d4c:	40020458 	.word	0x40020458
 8003d50:	40020470 	.word	0x40020470
 8003d54:	40020488 	.word	0x40020488
 8003d58:	400204a0 	.word	0x400204a0
 8003d5c:	400204b8 	.word	0x400204b8

08003d60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a7f      	ldr	r2, [pc, #508]	; (8003f7c <DMA_SetConfig+0x21c>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d072      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <DMA_SetConfig+0x220>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d06d      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a7c      	ldr	r2, [pc, #496]	; (8003f84 <DMA_SetConfig+0x224>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d068      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a7a      	ldr	r2, [pc, #488]	; (8003f88 <DMA_SetConfig+0x228>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d063      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a79      	ldr	r2, [pc, #484]	; (8003f8c <DMA_SetConfig+0x22c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d05e      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a77      	ldr	r2, [pc, #476]	; (8003f90 <DMA_SetConfig+0x230>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d059      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a76      	ldr	r2, [pc, #472]	; (8003f94 <DMA_SetConfig+0x234>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d054      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a74      	ldr	r2, [pc, #464]	; (8003f98 <DMA_SetConfig+0x238>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d04f      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a73      	ldr	r2, [pc, #460]	; (8003f9c <DMA_SetConfig+0x23c>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d04a      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a71      	ldr	r2, [pc, #452]	; (8003fa0 <DMA_SetConfig+0x240>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d045      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <DMA_SetConfig+0x244>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d040      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a6e      	ldr	r2, [pc, #440]	; (8003fa8 <DMA_SetConfig+0x248>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d03b      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a6d      	ldr	r2, [pc, #436]	; (8003fac <DMA_SetConfig+0x24c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d036      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6b      	ldr	r2, [pc, #428]	; (8003fb0 <DMA_SetConfig+0x250>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d031      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6a      	ldr	r2, [pc, #424]	; (8003fb4 <DMA_SetConfig+0x254>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d02c      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <DMA_SetConfig+0x258>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d027      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a67      	ldr	r2, [pc, #412]	; (8003fbc <DMA_SetConfig+0x25c>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d022      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a65      	ldr	r2, [pc, #404]	; (8003fc0 <DMA_SetConfig+0x260>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d01d      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a64      	ldr	r2, [pc, #400]	; (8003fc4 <DMA_SetConfig+0x264>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d018      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a62      	ldr	r2, [pc, #392]	; (8003fc8 <DMA_SetConfig+0x268>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d013      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a61      	ldr	r2, [pc, #388]	; (8003fcc <DMA_SetConfig+0x26c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d00e      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5f      	ldr	r2, [pc, #380]	; (8003fd0 <DMA_SetConfig+0x270>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d009      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5e      	ldr	r2, [pc, #376]	; (8003fd4 <DMA_SetConfig+0x274>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d004      	beq.n	8003e6a <DMA_SetConfig+0x10a>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a5c      	ldr	r2, [pc, #368]	; (8003fd8 <DMA_SetConfig+0x278>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d101      	bne.n	8003e6e <DMA_SetConfig+0x10e>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e000      	b.n	8003e70 <DMA_SetConfig+0x110>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00d      	beq.n	8003e90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003e7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003e8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a39      	ldr	r2, [pc, #228]	; (8003f7c <DMA_SetConfig+0x21c>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d04a      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a38      	ldr	r2, [pc, #224]	; (8003f80 <DMA_SetConfig+0x220>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d045      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a36      	ldr	r2, [pc, #216]	; (8003f84 <DMA_SetConfig+0x224>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d040      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <DMA_SetConfig+0x228>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d03b      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a33      	ldr	r2, [pc, #204]	; (8003f8c <DMA_SetConfig+0x22c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d036      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a32      	ldr	r2, [pc, #200]	; (8003f90 <DMA_SetConfig+0x230>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d031      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a30      	ldr	r2, [pc, #192]	; (8003f94 <DMA_SetConfig+0x234>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d02c      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a2f      	ldr	r2, [pc, #188]	; (8003f98 <DMA_SetConfig+0x238>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d027      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a2d      	ldr	r2, [pc, #180]	; (8003f9c <DMA_SetConfig+0x23c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d022      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a2c      	ldr	r2, [pc, #176]	; (8003fa0 <DMA_SetConfig+0x240>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d01d      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2a      	ldr	r2, [pc, #168]	; (8003fa4 <DMA_SetConfig+0x244>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d018      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <DMA_SetConfig+0x248>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d013      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a27      	ldr	r2, [pc, #156]	; (8003fac <DMA_SetConfig+0x24c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00e      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <DMA_SetConfig+0x250>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d009      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a24      	ldr	r2, [pc, #144]	; (8003fb4 <DMA_SetConfig+0x254>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d004      	beq.n	8003f30 <DMA_SetConfig+0x1d0>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <DMA_SetConfig+0x258>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <DMA_SetConfig+0x1d4>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <DMA_SetConfig+0x1d6>
 8003f34:	2300      	movs	r3, #0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d059      	beq.n	8003fee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f3e:	f003 031f 	and.w	r3, r3, #31
 8003f42:	223f      	movs	r2, #63	; 0x3f
 8003f44:	409a      	lsls	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	2b40      	cmp	r3, #64	; 0x40
 8003f68:	d138      	bne.n	8003fdc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f7a:	e086      	b.n	800408a <DMA_SetConfig+0x32a>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
 8003fbc:	58025408 	.word	0x58025408
 8003fc0:	5802541c 	.word	0x5802541c
 8003fc4:	58025430 	.word	0x58025430
 8003fc8:	58025444 	.word	0x58025444
 8003fcc:	58025458 	.word	0x58025458
 8003fd0:	5802546c 	.word	0x5802546c
 8003fd4:	58025480 	.word	0x58025480
 8003fd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
}
 8003fec:	e04d      	b.n	800408a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a29      	ldr	r2, [pc, #164]	; (8004098 <DMA_SetConfig+0x338>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d022      	beq.n	800403e <DMA_SetConfig+0x2de>
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <DMA_SetConfig+0x33c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d01d      	beq.n	800403e <DMA_SetConfig+0x2de>
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <DMA_SetConfig+0x340>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d018      	beq.n	800403e <DMA_SetConfig+0x2de>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a24      	ldr	r2, [pc, #144]	; (80040a4 <DMA_SetConfig+0x344>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <DMA_SetConfig+0x2de>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a23      	ldr	r2, [pc, #140]	; (80040a8 <DMA_SetConfig+0x348>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d00e      	beq.n	800403e <DMA_SetConfig+0x2de>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <DMA_SetConfig+0x34c>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d009      	beq.n	800403e <DMA_SetConfig+0x2de>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a20      	ldr	r2, [pc, #128]	; (80040b0 <DMA_SetConfig+0x350>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <DMA_SetConfig+0x2de>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1e      	ldr	r2, [pc, #120]	; (80040b4 <DMA_SetConfig+0x354>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d101      	bne.n	8004042 <DMA_SetConfig+0x2e2>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <DMA_SetConfig+0x2e4>
 8004042:	2300      	movs	r3, #0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d020      	beq.n	800408a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d108      	bne.n	800407a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	60da      	str	r2, [r3, #12]
}
 8004078:	e007      	b.n	800408a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	60da      	str	r2, [r3, #12]
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	58025408 	.word	0x58025408
 800409c:	5802541c 	.word	0x5802541c
 80040a0:	58025430 	.word	0x58025430
 80040a4:	58025444 	.word	0x58025444
 80040a8:	58025458 	.word	0x58025458
 80040ac:	5802546c 	.word	0x5802546c
 80040b0:	58025480 	.word	0x58025480
 80040b4:	58025494 	.word	0x58025494

080040b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a42      	ldr	r2, [pc, #264]	; (80041d0 <DMA_CalcBaseAndBitshift+0x118>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d04a      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a41      	ldr	r2, [pc, #260]	; (80041d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d045      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a3f      	ldr	r2, [pc, #252]	; (80041d8 <DMA_CalcBaseAndBitshift+0x120>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d040      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a3e      	ldr	r2, [pc, #248]	; (80041dc <DMA_CalcBaseAndBitshift+0x124>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d03b      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <DMA_CalcBaseAndBitshift+0x128>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d036      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a3b      	ldr	r2, [pc, #236]	; (80041e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d031      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a39      	ldr	r2, [pc, #228]	; (80041e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d02c      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a38      	ldr	r2, [pc, #224]	; (80041ec <DMA_CalcBaseAndBitshift+0x134>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d027      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a36      	ldr	r2, [pc, #216]	; (80041f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d022      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a35      	ldr	r2, [pc, #212]	; (80041f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d01d      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a33      	ldr	r2, [pc, #204]	; (80041f8 <DMA_CalcBaseAndBitshift+0x140>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d018      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a32      	ldr	r2, [pc, #200]	; (80041fc <DMA_CalcBaseAndBitshift+0x144>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d013      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a30      	ldr	r2, [pc, #192]	; (8004200 <DMA_CalcBaseAndBitshift+0x148>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00e      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2f      	ldr	r2, [pc, #188]	; (8004204 <DMA_CalcBaseAndBitshift+0x14c>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d009      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2d      	ldr	r2, [pc, #180]	; (8004208 <DMA_CalcBaseAndBitshift+0x150>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <DMA_CalcBaseAndBitshift+0xa8>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2c      	ldr	r2, [pc, #176]	; (800420c <DMA_CalcBaseAndBitshift+0x154>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d101      	bne.n	8004164 <DMA_CalcBaseAndBitshift+0xac>
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <DMA_CalcBaseAndBitshift+0xae>
 8004164:	2300      	movs	r3, #0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d024      	beq.n	80041b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	3b10      	subs	r3, #16
 8004172:	4a27      	ldr	r2, [pc, #156]	; (8004210 <DMA_CalcBaseAndBitshift+0x158>)
 8004174:	fba2 2303 	umull	r2, r3, r2, r3
 8004178:	091b      	lsrs	r3, r3, #4
 800417a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	4a24      	ldr	r2, [pc, #144]	; (8004214 <DMA_CalcBaseAndBitshift+0x15c>)
 8004184:	5cd3      	ldrb	r3, [r2, r3]
 8004186:	461a      	mov	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d908      	bls.n	80041a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b1f      	ldr	r3, [pc, #124]	; (8004218 <DMA_CalcBaseAndBitshift+0x160>)
 800419a:	4013      	ands	r3, r2
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	659a      	str	r2, [r3, #88]	; 0x58
 80041a2:	e00d      	b.n	80041c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <DMA_CalcBaseAndBitshift+0x160>)
 80041ac:	4013      	ands	r3, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6593      	str	r3, [r2, #88]	; 0x58
 80041b2:	e005      	b.n	80041c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40020010 	.word	0x40020010
 80041d4:	40020028 	.word	0x40020028
 80041d8:	40020040 	.word	0x40020040
 80041dc:	40020058 	.word	0x40020058
 80041e0:	40020070 	.word	0x40020070
 80041e4:	40020088 	.word	0x40020088
 80041e8:	400200a0 	.word	0x400200a0
 80041ec:	400200b8 	.word	0x400200b8
 80041f0:	40020410 	.word	0x40020410
 80041f4:	40020428 	.word	0x40020428
 80041f8:	40020440 	.word	0x40020440
 80041fc:	40020458 	.word	0x40020458
 8004200:	40020470 	.word	0x40020470
 8004204:	40020488 	.word	0x40020488
 8004208:	400204a0 	.word	0x400204a0
 800420c:	400204b8 	.word	0x400204b8
 8004210:	aaaaaaab 	.word	0xaaaaaaab
 8004214:	0800bacc 	.word	0x0800bacc
 8004218:	fffffc00 	.word	0xfffffc00

0800421c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d120      	bne.n	8004272 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004234:	2b03      	cmp	r3, #3
 8004236:	d858      	bhi.n	80042ea <DMA_CheckFifoParam+0xce>
 8004238:	a201      	add	r2, pc, #4	; (adr r2, 8004240 <DMA_CheckFifoParam+0x24>)
 800423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800423e:	bf00      	nop
 8004240:	08004251 	.word	0x08004251
 8004244:	08004263 	.word	0x08004263
 8004248:	08004251 	.word	0x08004251
 800424c:	080042eb 	.word	0x080042eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d048      	beq.n	80042ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004260:	e045      	b.n	80042ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800426a:	d142      	bne.n	80042f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004270:	e03f      	b.n	80042f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800427a:	d123      	bne.n	80042c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	2b03      	cmp	r3, #3
 8004282:	d838      	bhi.n	80042f6 <DMA_CheckFifoParam+0xda>
 8004284:	a201      	add	r2, pc, #4	; (adr r2, 800428c <DMA_CheckFifoParam+0x70>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	0800429d 	.word	0x0800429d
 8004290:	080042a3 	.word	0x080042a3
 8004294:	0800429d 	.word	0x0800429d
 8004298:	080042b5 	.word	0x080042b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
        break;
 80042a0:	e030      	b.n	8004304 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d025      	beq.n	80042fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042b2:	e022      	b.n	80042fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042bc:	d11f      	bne.n	80042fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042c2:	e01c      	b.n	80042fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d902      	bls.n	80042d2 <DMA_CheckFifoParam+0xb6>
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d003      	beq.n	80042d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80042d0:	e018      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
        break;
 80042d6:	e015      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
    break;
 80042e8:	e00b      	b.n	8004302 <DMA_CheckFifoParam+0xe6>
        break;
 80042ea:	bf00      	nop
 80042ec:	e00a      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        break;
 80042ee:	bf00      	nop
 80042f0:	e008      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        break;
 80042f2:	bf00      	nop
 80042f4:	e006      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        break;
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
        break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <DMA_CheckFifoParam+0xe8>
    break;
 8004302:	bf00      	nop
    }
  }

  return status;
 8004304:	7bfb      	ldrb	r3, [r7, #15]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
 8004312:	bf00      	nop

08004314 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a38      	ldr	r2, [pc, #224]	; (8004408 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a36      	ldr	r2, [pc, #216]	; (800440c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d01d      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a35      	ldr	r2, [pc, #212]	; (8004410 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a33      	ldr	r2, [pc, #204]	; (8004414 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a32      	ldr	r2, [pc, #200]	; (8004418 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a30      	ldr	r2, [pc, #192]	; (800441c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a2d      	ldr	r2, [pc, #180]	; (8004424 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d101      	bne.n	8004376 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01a      	beq.n	80043b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	3b08      	subs	r3, #8
 8004384:	4a28      	ldr	r2, [pc, #160]	; (8004428 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4b26      	ldr	r3, [pc, #152]	; (800442c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	461a      	mov	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a24      	ldr	r2, [pc, #144]	; (8004430 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80043a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f003 031f 	and.w	r3, r3, #31
 80043a8:	2201      	movs	r2, #1
 80043aa:	409a      	lsls	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80043b0:	e024      	b.n	80043fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	3b10      	subs	r3, #16
 80043ba:	4a1e      	ldr	r2, [pc, #120]	; (8004434 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80043bc:	fba2 2303 	umull	r2, r3, r2, r3
 80043c0:	091b      	lsrs	r3, r3, #4
 80043c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d806      	bhi.n	80043da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	4a1b      	ldr	r2, [pc, #108]	; (800443c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d902      	bls.n	80043da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	3308      	adds	r3, #8
 80043d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4b18      	ldr	r3, [pc, #96]	; (8004440 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	461a      	mov	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a16      	ldr	r2, [pc, #88]	; (8004444 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80043ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f003 031f 	and.w	r3, r3, #31
 80043f4:	2201      	movs	r2, #1
 80043f6:	409a      	lsls	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494
 8004428:	cccccccd 	.word	0xcccccccd
 800442c:	16009600 	.word	0x16009600
 8004430:	58025880 	.word	0x58025880
 8004434:	aaaaaaab 	.word	0xaaaaaaab
 8004438:	400204b8 	.word	0x400204b8
 800443c:	4002040f 	.word	0x4002040f
 8004440:	10008200 	.word	0x10008200
 8004444:	40020880 	.word	0x40020880

08004448 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d04a      	beq.n	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d847      	bhi.n	80044f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a25      	ldr	r2, [pc, #148]	; (8004500 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d022      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a24      	ldr	r2, [pc, #144]	; (8004504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d01d      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	; (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d101      	bne.n	80044b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80044b4:	2301      	movs	r3, #1
 80044b6:	e000      	b.n	80044ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80044b8:	2300      	movs	r3, #0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	461a      	mov	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80044d0:	671a      	str	r2, [r3, #112]	; 0x70
 80044d2:	e009      	b.n	80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4b14      	ldr	r3, [pc, #80]	; (8004528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80044d8:	4413      	add	r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	461a      	mov	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80044e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	3b01      	subs	r3, #1
 80044ec:	2201      	movs	r2, #1
 80044ee:	409a      	lsls	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80044f4:	bf00      	nop
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	58025408 	.word	0x58025408
 8004504:	5802541c 	.word	0x5802541c
 8004508:	58025430 	.word	0x58025430
 800450c:	58025444 	.word	0x58025444
 8004510:	58025458 	.word	0x58025458
 8004514:	5802546c 	.word	0x5802546c
 8004518:	58025480 	.word	0x58025480
 800451c:	58025494 	.word	0x58025494
 8004520:	1600963f 	.word	0x1600963f
 8004524:	58025940 	.word	0x58025940
 8004528:	1000823f 	.word	0x1000823f
 800452c:	40020940 	.word	0x40020940

08004530 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0cf      	b.n	80046e2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2223      	movs	r2, #35	; 0x23
 8004550:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fc2d 	bl	8000db4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800455a:	4b64      	ldr	r3, [pc, #400]	; (80046ec <HAL_ETH_Init+0x1bc>)
 800455c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004560:	4a62      	ldr	r2, [pc, #392]	; (80046ec <HAL_ETH_Init+0x1bc>)
 8004562:	f043 0302 	orr.w	r3, r3, #2
 8004566:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800456a:	4b60      	ldr	r3, [pc, #384]	; (80046ec <HAL_ETH_Init+0x1bc>)
 800456c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	60bb      	str	r3, [r7, #8]
 8004576:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7a1b      	ldrb	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d103      	bne.n	8004588 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004580:	2000      	movs	r0, #0
 8004582:	f7fd f879 	bl	8001678 <HAL_SYSCFG_ETHInterfaceSelect>
 8004586:	e003      	b.n	8004590 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004588:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800458c:	f7fd f874 	bl	8001678 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004590:	4b57      	ldr	r3, [pc, #348]	; (80046f0 <HAL_ETH_Init+0x1c0>)
 8004592:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045ac:	f7fd f834 	bl	8001618 <HAL_GetTick>
 80045b0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80045b2:	e011      	b.n	80045d8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80045b4:	f7fd f830 	bl	8001618 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045c2:	d909      	bls.n	80045d8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2204      	movs	r2, #4
 80045c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	22e0      	movs	r2, #224	; 0xe0
 80045d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e084      	b.n	80046e2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e4      	bne.n	80045b4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f886 	bl	80046fc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80045f0:	f001 fcc8 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <HAL_ETH_Init+0x1c4>)
 80045f8:	fba2 2303 	umull	r2, r3, r2, r3
 80045fc:	0c9a      	lsrs	r2, r3, #18
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	3a01      	subs	r2, #1
 8004604:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fa71 	bl	8004af0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800461a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800462a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d009      	beq.n	800464e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	22e0      	movs	r2, #224	; 0xe0
 8004646:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e049      	b.n	80046e2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004656:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_ETH_Init+0x1c8>)
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6952      	ldr	r2, [r2, #20]
 8004662:	0051      	lsls	r1, r2, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800466e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fad9 	bl	8004c2a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 fb1f 	bl	8004cbc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	3305      	adds	r3, #5
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	021a      	lsls	r2, r3, #8
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4619      	mov	r1, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	3303      	adds	r3, #3
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	061a      	lsls	r2, r3, #24
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	3302      	adds	r3, #2
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	041b      	lsls	r3, r3, #16
 80046b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	3301      	adds	r3, #1
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046bc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046ca:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046cc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2210      	movs	r2, #16
 80046dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	58024400 	.word	0x58024400
 80046f0:	58000400 	.word	0x58000400
 80046f4:	431bde83 	.word	0x431bde83
 80046f8:	ffff8001 	.word	0xffff8001

080046fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800470c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004714:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004716:	f001 fc35 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 800471a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d908      	bls.n	8004736 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4a1d      	ldr	r2, [pc, #116]	; (800479c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d804      	bhi.n	8004736 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e027      	b.n	8004786 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	4a18      	ldr	r2, [pc, #96]	; (800479c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d908      	bls.n	8004750 <HAL_ETH_SetMDIOClockRange+0x54>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	4a17      	ldr	r2, [pc, #92]	; (80047a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d204      	bcs.n	8004750 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e01a      	b.n	8004786 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d303      	bcc.n	8004760 <HAL_ETH_SetMDIOClockRange+0x64>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	4a12      	ldr	r2, [pc, #72]	; (80047a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d911      	bls.n	8004784 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4a10      	ldr	r2, [pc, #64]	; (80047a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d908      	bls.n	800477a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d804      	bhi.n	800477a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	e005      	b.n	8004786 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	e000      	b.n	8004786 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004784:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	01312cff 	.word	0x01312cff
 800479c:	02160ebf 	.word	0x02160ebf
 80047a0:	03938700 	.word	0x03938700
 80047a4:	05f5e0ff 	.word	0x05f5e0ff
 80047a8:	08f0d17f 	.word	0x08f0d17f

080047ac <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80047be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	791b      	ldrb	r3, [r3, #4]
 80047c4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80047c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	7b1b      	ldrb	r3, [r3, #12]
 80047cc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80047ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	7b5b      	ldrb	r3, [r3, #13]
 80047d4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80047d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	7b9b      	ldrb	r3, [r3, #14]
 80047dc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80047de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	7bdb      	ldrb	r3, [r3, #15]
 80047e4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80047e6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	7c12      	ldrb	r2, [r2, #16]
 80047ec:	2a00      	cmp	r2, #0
 80047ee:	d102      	bne.n	80047f6 <ETH_SetMACConfig+0x4a>
 80047f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80047f4:	e000      	b.n	80047f8 <ETH_SetMACConfig+0x4c>
 80047f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80047f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	7c52      	ldrb	r2, [r2, #17]
 80047fe:	2a00      	cmp	r2, #0
 8004800:	d102      	bne.n	8004808 <ETH_SetMACConfig+0x5c>
 8004802:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004806:	e000      	b.n	800480a <ETH_SetMACConfig+0x5e>
 8004808:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800480a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	7c9b      	ldrb	r3, [r3, #18]
 8004810:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004812:	431a      	orrs	r2, r3
               macconf->Speed |
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004818:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800481e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	7f1b      	ldrb	r3, [r3, #28]
 8004824:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004826:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	7f5b      	ldrb	r3, [r3, #29]
 800482c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800482e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	7f92      	ldrb	r2, [r2, #30]
 8004834:	2a00      	cmp	r2, #0
 8004836:	d102      	bne.n	800483e <ETH_SetMACConfig+0x92>
 8004838:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800483c:	e000      	b.n	8004840 <ETH_SetMACConfig+0x94>
 800483e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004840:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	7fdb      	ldrb	r3, [r3, #31]
 8004846:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004848:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004850:	2a00      	cmp	r2, #0
 8004852:	d102      	bne.n	800485a <ETH_SetMACConfig+0xae>
 8004854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004858:	e000      	b.n	800485c <ETH_SetMACConfig+0xb0>
 800485a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800485c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004862:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800486a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800486c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b56      	ldr	r3, [pc, #344]	; (80049d8 <ETH_SetMACConfig+0x22c>)
 800487e:	4013      	ands	r3, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	68f9      	ldr	r1, [r7, #12]
 8004886:	430b      	orrs	r3, r1
 8004888:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004896:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004898:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048a0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80048a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048aa:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80048ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80048b4:	2a00      	cmp	r2, #0
 80048b6:	d102      	bne.n	80048be <ETH_SetMACConfig+0x112>
 80048b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80048bc:	e000      	b.n	80048c0 <ETH_SetMACConfig+0x114>
 80048be:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80048c0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	4b42      	ldr	r3, [pc, #264]	; (80049dc <ETH_SetMACConfig+0x230>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	6812      	ldr	r2, [r2, #0]
 80048d8:	68f9      	ldr	r1, [r7, #12]
 80048da:	430b      	orrs	r3, r1
 80048dc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048e4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68da      	ldr	r2, [r3, #12]
 80048f4:	4b3a      	ldr	r3, [pc, #232]	; (80049e0 <ETH_SetMACConfig+0x234>)
 80048f6:	4013      	ands	r3, r2
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6812      	ldr	r2, [r2, #0]
 80048fc:	68f9      	ldr	r1, [r7, #12]
 80048fe:	430b      	orrs	r3, r1
 8004900:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004908:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800490e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004910:	683a      	ldr	r2, [r7, #0]
 8004912:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004916:	2a00      	cmp	r2, #0
 8004918:	d101      	bne.n	800491e <ETH_SetMACConfig+0x172>
 800491a:	2280      	movs	r2, #128	; 0x80
 800491c:	e000      	b.n	8004920 <ETH_SetMACConfig+0x174>
 800491e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004920:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004928:	4313      	orrs	r3, r2
 800492a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004932:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004936:	4013      	ands	r3, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	68f9      	ldr	r1, [r7, #12]
 800493e:	430b      	orrs	r3, r1
 8004940:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004948:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004950:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004952:	4313      	orrs	r3, r2
 8004954:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800495e:	f023 0103 	bic.w	r1, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	430a      	orrs	r2, r1
 800496a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004976:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004992:	2a00      	cmp	r2, #0
 8004994:	d101      	bne.n	800499a <ETH_SetMACConfig+0x1ee>
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	e000      	b.n	800499c <ETH_SetMACConfig+0x1f0>
 800499a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800499c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80049a4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80049a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80049ae:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80049bc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80049cc:	bf00      	nop
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	00048083 	.word	0x00048083
 80049dc:	c0f88000 	.word	0xc0f88000
 80049e0:	fffffef0 	.word	0xfffffef0

080049e4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	4b38      	ldr	r3, [pc, #224]	; (8004adc <ETH_SetDMAConfig+0xf8>)
 80049fa:	4013      	ands	r3, r2
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	6811      	ldr	r1, [r2, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a0a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	791b      	ldrb	r3, [r3, #4]
 8004a10:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a16:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	7b1b      	ldrb	r3, [r3, #12]
 8004a1c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2a:	685a      	ldr	r2, [r3, #4]
 8004a2c:	4b2c      	ldr	r3, [pc, #176]	; (8004ae0 <ETH_SetDMAConfig+0xfc>)
 8004a2e:	4013      	ands	r3, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	68f9      	ldr	r1, [r7, #12]
 8004a36:	430b      	orrs	r3, r1
 8004a38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a3c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	7b5b      	ldrb	r3, [r3, #13]
 8004a42:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004a58:	4b22      	ldr	r3, [pc, #136]	; (8004ae4 <ETH_SetDMAConfig+0x100>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6812      	ldr	r2, [r2, #0]
 8004a60:	68f9      	ldr	r1, [r7, #12]
 8004a62:	430b      	orrs	r3, r1
 8004a64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a68:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	7d1b      	ldrb	r3, [r3, #20]
 8004a74:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	7f5b      	ldrb	r3, [r3, #29]
 8004a7c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004a8e:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <ETH_SetDMAConfig+0x104>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	68f9      	ldr	r1, [r7, #12]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a9e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	7f1b      	ldrb	r3, [r3, #28]
 8004aa6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <ETH_SetDMAConfig+0x108>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6812      	ldr	r2, [r2, #0]
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	430b      	orrs	r3, r1
 8004ac8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004acc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	ffff87fd 	.word	0xffff87fd
 8004ae0:	ffff2ffe 	.word	0xffff2ffe
 8004ae4:	fffec000 	.word	0xfffec000
 8004ae8:	ffc0efef 	.word	0xffc0efef
 8004aec:	7fc0ffff 	.word	0x7fc0ffff

08004af0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0a4      	sub	sp, #144	; 0x90
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004afe:	2300      	movs	r3, #0
 8004b00:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004b20:	2300      	movs	r3, #0
 8004b22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b30:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004b32:	2300      	movs	r3, #0
 8004b34:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004b48:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004b4c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004b54:	2300      	movs	r3, #0
 8004b56:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004b72:	2300      	movs	r3, #0
 8004b74:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004b88:	2320      	movs	r3, #32
 8004b8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004b9a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004ba0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ba4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004bac:	2302      	movs	r3, #2
 8004bae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004bd4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fde6 	bl	80047ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004be4:	2301      	movs	r3, #1
 8004be6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bfa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bfe:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004c00:	2300      	movs	r3, #0
 8004c02:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c08:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004c10:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004c14:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff fee1 	bl	80049e4 <ETH_SetDMAConfig>
}
 8004c22:	bf00      	nop
 8004c24:	3790      	adds	r7, #144	; 0x90
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e01d      	b.n	8004c74 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68d9      	ldr	r1, [r3, #12]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	4413      	add	r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	440b      	add	r3, r1
 8004c48:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	3206      	adds	r2, #6
 8004c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	3301      	adds	r3, #1
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b03      	cmp	r3, #3
 8004c78:	d9de      	bls.n	8004c38 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68da      	ldr	r2, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c9c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cac:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e023      	b.n	8004d12 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6919      	ldr	r1, [r3, #16]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	440b      	add	r3, r1
 8004cda:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d00:	68b9      	ldr	r1, [r7, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	3212      	adds	r2, #18
 8004d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	3301      	adds	r3, #1
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d9d8      	bls.n	8004cca <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d3e:	461a      	mov	r2, r3
 8004d40:	2303      	movs	r3, #3
 8004d42:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691a      	ldr	r2, [r3, #16]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d52:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d66:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d82:	2300      	movs	r3, #0
 8004d84:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004d86:	4b86      	ldr	r3, [pc, #536]	; (8004fa0 <HAL_GPIO_Init+0x228>)
 8004d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004d8a:	e18c      	b.n	80050a6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	2101      	movs	r1, #1
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	4013      	ands	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	f000 817e 	beq.w	80050a0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	f003 0303 	and.w	r3, r3, #3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d005      	beq.n	8004dbc <HAL_GPIO_Init+0x44>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f003 0303 	and.w	r3, r3, #3
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d130      	bne.n	8004e1e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	005b      	lsls	r3, r3, #1
 8004dc6:	2203      	movs	r2, #3
 8004dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	68da      	ldr	r2, [r3, #12]
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	005b      	lsls	r3, r3, #1
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004df2:	2201      	movs	r2, #1
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43db      	mvns	r3, r3
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 0201 	and.w	r2, r3, #1
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d017      	beq.n	8004e5a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	2203      	movs	r2, #3
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d123      	bne.n	8004eae <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	08da      	lsrs	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	3208      	adds	r2, #8
 8004e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	220f      	movs	r2, #15
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f003 0307 	and.w	r3, r3, #7
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	08da      	lsrs	r2, r3, #3
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3208      	adds	r2, #8
 8004ea8:	69b9      	ldr	r1, [r7, #24]
 8004eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	2203      	movs	r2, #3
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0203 	and.w	r2, r3, #3
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 80d8 	beq.w	80050a0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_GPIO_Init+0x22c>)
 8004ef2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004ef6:	4a2b      	ldr	r2, [pc, #172]	; (8004fa4 <HAL_GPIO_Init+0x22c>)
 8004ef8:	f043 0302 	orr.w	r3, r3, #2
 8004efc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f00:	4b28      	ldr	r3, [pc, #160]	; (8004fa4 <HAL_GPIO_Init+0x22c>)
 8004f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f0e:	4a26      	ldr	r2, [pc, #152]	; (8004fa8 <HAL_GPIO_Init+0x230>)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	089b      	lsrs	r3, r3, #2
 8004f14:	3302      	adds	r3, #2
 8004f16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	220f      	movs	r2, #15
 8004f26:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	69ba      	ldr	r2, [r7, #24]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <HAL_GPIO_Init+0x234>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d04a      	beq.n	8004fd0 <HAL_GPIO_Init+0x258>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a1c      	ldr	r2, [pc, #112]	; (8004fb0 <HAL_GPIO_Init+0x238>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d02b      	beq.n	8004f9a <HAL_GPIO_Init+0x222>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a1b      	ldr	r2, [pc, #108]	; (8004fb4 <HAL_GPIO_Init+0x23c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d025      	beq.n	8004f96 <HAL_GPIO_Init+0x21e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_GPIO_Init+0x240>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <HAL_GPIO_Init+0x21a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_GPIO_Init+0x244>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d019      	beq.n	8004f8e <HAL_GPIO_Init+0x216>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_GPIO_Init+0x248>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d013      	beq.n	8004f8a <HAL_GPIO_Init+0x212>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a17      	ldr	r2, [pc, #92]	; (8004fc4 <HAL_GPIO_Init+0x24c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00d      	beq.n	8004f86 <HAL_GPIO_Init+0x20e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a16      	ldr	r2, [pc, #88]	; (8004fc8 <HAL_GPIO_Init+0x250>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <HAL_GPIO_Init+0x20a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <HAL_GPIO_Init+0x254>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d101      	bne.n	8004f7e <HAL_GPIO_Init+0x206>
 8004f7a:	2309      	movs	r3, #9
 8004f7c:	e029      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f7e:	230a      	movs	r3, #10
 8004f80:	e027      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f82:	2307      	movs	r3, #7
 8004f84:	e025      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f86:	2306      	movs	r3, #6
 8004f88:	e023      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f8a:	2305      	movs	r3, #5
 8004f8c:	e021      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	e01f      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f92:	2303      	movs	r3, #3
 8004f94:	e01d      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f96:	2302      	movs	r3, #2
 8004f98:	e01b      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e019      	b.n	8004fd2 <HAL_GPIO_Init+0x25a>
 8004f9e:	bf00      	nop
 8004fa0:	58000080 	.word	0x58000080
 8004fa4:	58024400 	.word	0x58024400
 8004fa8:	58000400 	.word	0x58000400
 8004fac:	58020000 	.word	0x58020000
 8004fb0:	58020400 	.word	0x58020400
 8004fb4:	58020800 	.word	0x58020800
 8004fb8:	58020c00 	.word	0x58020c00
 8004fbc:	58021000 	.word	0x58021000
 8004fc0:	58021400 	.word	0x58021400
 8004fc4:	58021800 	.word	0x58021800
 8004fc8:	58021c00 	.word	0x58021c00
 8004fcc:	58022400 	.word	0x58022400
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	f002 0203 	and.w	r2, r2, #3
 8004fd8:	0092      	lsls	r2, r2, #2
 8004fda:	4093      	lsls	r3, r2
 8004fdc:	69ba      	ldr	r2, [r7, #24]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fe2:	4938      	ldr	r1, [pc, #224]	; (80050c4 <HAL_GPIO_Init+0x34c>)
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	089b      	lsrs	r3, r3, #2
 8004fe8:	3302      	adds	r3, #2
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	69ba      	ldr	r2, [r7, #24]
 8004ffe:	4013      	ands	r3, r2
 8005000:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	4313      	orrs	r3, r2
 8005014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005016:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800501e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	43db      	mvns	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	4313      	orrs	r3, r2
 8005042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005044:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	43db      	mvns	r3, r3
 8005056:	69ba      	ldr	r2, [r7, #24]
 8005058:	4013      	ands	r3, r2
 800505a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d003      	beq.n	8005070 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	69ba      	ldr	r2, [r7, #24]
 8005074:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	fa22 f303 	lsr.w	r3, r2, r3
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f47f ae6b 	bne.w	8004d8c <HAL_GPIO_Init+0x14>
  }
}
 80050b6:	bf00      	nop
 80050b8:	bf00      	nop
 80050ba:	3724      	adds	r7, #36	; 0x24
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	58000400 	.word	0x58000400

080050c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
 80050d4:	4613      	mov	r3, r2
 80050d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d8:	787b      	ldrb	r3, [r7, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80050e4:	e003      	b.n	80050ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	041a      	lsls	r2, r3, #16
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	619a      	str	r2, [r3, #24]
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005104:	4b19      	ldr	r3, [pc, #100]	; (800516c <HAL_PWREx_ConfigSupply+0x70>)
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b04      	cmp	r3, #4
 800510e:	d00a      	beq.n	8005126 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005110:	4b16      	ldr	r3, [pc, #88]	; (800516c <HAL_PWREx_ConfigSupply+0x70>)
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d001      	beq.n	8005122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e01f      	b.n	8005162 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e01d      	b.n	8005162 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_PWREx_ConfigSupply+0x70>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f023 0207 	bic.w	r2, r3, #7
 800512e:	490f      	ldr	r1, [pc, #60]	; (800516c <HAL_PWREx_ConfigSupply+0x70>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4313      	orrs	r3, r2
 8005134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005136:	f7fc fa6f 	bl	8001618 <HAL_GetTick>
 800513a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800513c:	e009      	b.n	8005152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800513e:	f7fc fa6b 	bl	8001618 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514c:	d901      	bls.n	8005152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e007      	b.n	8005162 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005152:	4b06      	ldr	r3, [pc, #24]	; (800516c <HAL_PWREx_ConfigSupply+0x70>)
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800515a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515e:	d1ee      	bne.n	800513e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	58024800 	.word	0x58024800

08005170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08c      	sub	sp, #48	; 0x30
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e3c8      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 8087 	beq.w	800529e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005190:	4b88      	ldr	r3, [pc, #544]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800519a:	4b86      	ldr	r3, [pc, #536]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a2:	2b10      	cmp	r3, #16
 80051a4:	d007      	beq.n	80051b6 <HAL_RCC_OscConfig+0x46>
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	2b18      	cmp	r3, #24
 80051aa:	d110      	bne.n	80051ce <HAL_RCC_OscConfig+0x5e>
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f003 0303 	and.w	r3, r3, #3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d10b      	bne.n	80051ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b6:	4b7f      	ldr	r3, [pc, #508]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d06c      	beq.n	800529c <HAL_RCC_OscConfig+0x12c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d168      	bne.n	800529c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e3a2      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051d6:	d106      	bne.n	80051e6 <HAL_RCC_OscConfig+0x76>
 80051d8:	4b76      	ldr	r3, [pc, #472]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a75      	ldr	r2, [pc, #468]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	e02e      	b.n	8005244 <HAL_RCC_OscConfig+0xd4>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10c      	bne.n	8005208 <HAL_RCC_OscConfig+0x98>
 80051ee:	4b71      	ldr	r3, [pc, #452]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a70      	ldr	r2, [pc, #448]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f8:	6013      	str	r3, [r2, #0]
 80051fa:	4b6e      	ldr	r3, [pc, #440]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a6d      	ldr	r2, [pc, #436]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005200:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	e01d      	b.n	8005244 <HAL_RCC_OscConfig+0xd4>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005210:	d10c      	bne.n	800522c <HAL_RCC_OscConfig+0xbc>
 8005212:	4b68      	ldr	r3, [pc, #416]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a67      	ldr	r2, [pc, #412]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800521c:	6013      	str	r3, [r2, #0]
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a64      	ldr	r2, [pc, #400]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e00b      	b.n	8005244 <HAL_RCC_OscConfig+0xd4>
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a60      	ldr	r2, [pc, #384]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b5e      	ldr	r3, [pc, #376]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800523e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005242:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d013      	beq.n	8005274 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fc f9e4 	bl	8001618 <HAL_GetTick>
 8005250:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005254:	f7fc f9e0 	bl	8001618 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b64      	cmp	r3, #100	; 0x64
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e356      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005266:	4b53      	ldr	r3, [pc, #332]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0f0      	beq.n	8005254 <HAL_RCC_OscConfig+0xe4>
 8005272:	e014      	b.n	800529e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005274:	f7fc f9d0 	bl	8001618 <HAL_GetTick>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fc f9cc 	bl	8001618 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e342      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800528e:	4b49      	ldr	r3, [pc, #292]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d1f0      	bne.n	800527c <HAL_RCC_OscConfig+0x10c>
 800529a:	e000      	b.n	800529e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800529c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 808c 	beq.w	80053c4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ac:	4b41      	ldr	r3, [pc, #260]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052b4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052b6:	4b3f      	ldr	r3, [pc, #252]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <HAL_RCC_OscConfig+0x162>
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	2b18      	cmp	r3, #24
 80052c6:	d137      	bne.n	8005338 <HAL_RCC_OscConfig+0x1c8>
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d132      	bne.n	8005338 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d2:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0304 	and.w	r3, r3, #4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d005      	beq.n	80052ea <HAL_RCC_OscConfig+0x17a>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e314      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80052ea:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f023 0219 	bic.w	r2, r3, #25
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	492f      	ldr	r1, [pc, #188]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fc f98c 	bl	8001618 <HAL_GetTick>
 8005300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005302:	e008      	b.n	8005316 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005304:	f7fc f988 	bl	8001618 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e2fe      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005322:	4b24      	ldr	r3, [pc, #144]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	061b      	lsls	r3, r3, #24
 8005330:	4920      	ldr	r1, [pc, #128]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005332:	4313      	orrs	r3, r2
 8005334:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005336:	e045      	b.n	80053c4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d026      	beq.n	800538e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005340:	4b1c      	ldr	r3, [pc, #112]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f023 0219 	bic.w	r2, r3, #25
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4919      	ldr	r1, [pc, #100]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fc f961 	bl	8001618 <HAL_GetTick>
 8005356:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800535a:	f7fc f95d 	bl	8001618 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e2d3      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	061b      	lsls	r3, r3, #24
 8005386:	490b      	ldr	r1, [pc, #44]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005388:	4313      	orrs	r3, r2
 800538a:	604b      	str	r3, [r1, #4]
 800538c:	e01a      	b.n	80053c4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <HAL_RCC_OscConfig+0x244>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800539a:	f7fc f93d 	bl	8001618 <HAL_GetTick>
 800539e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053a2:	f7fc f939 	bl	8001618 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d903      	bls.n	80053b8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e2af      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
 80053b4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053b8:	4b96      	ldr	r3, [pc, #600]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1ee      	bne.n	80053a2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d06a      	beq.n	80054a6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053d0:	4b90      	ldr	r3, [pc, #576]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80053d8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80053da:	4b8e      	ldr	r3, [pc, #568]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80053dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053de:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	2b08      	cmp	r3, #8
 80053e4:	d007      	beq.n	80053f6 <HAL_RCC_OscConfig+0x286>
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	2b18      	cmp	r3, #24
 80053ea:	d11b      	bne.n	8005424 <HAL_RCC_OscConfig+0x2b4>
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d116      	bne.n	8005424 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053f6:	4b87      	ldr	r3, [pc, #540]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_RCC_OscConfig+0x29e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b80      	cmp	r3, #128	; 0x80
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e282      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800540e:	4b81      	ldr	r3, [pc, #516]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	061b      	lsls	r3, r3, #24
 800541c:	497d      	ldr	r1, [pc, #500]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005422:	e040      	b.n	80054a6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d023      	beq.n	8005474 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800542c:	4b79      	ldr	r3, [pc, #484]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a78      	ldr	r2, [pc, #480]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005438:	f7fc f8ee 	bl	8001618 <HAL_GetTick>
 800543c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005440:	f7fc f8ea 	bl	8001618 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e260      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005452:	4b70      	ldr	r3, [pc, #448]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800545e:	4b6d      	ldr	r3, [pc, #436]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	061b      	lsls	r3, r3, #24
 800546c:	4969      	ldr	r1, [pc, #420]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
 8005472:	e018      	b.n	80054a6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005474:	4b67      	ldr	r3, [pc, #412]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a66      	ldr	r2, [pc, #408]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800547a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fc f8ca 	bl	8001618 <HAL_GetTick>
 8005484:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005488:	f7fc f8c6 	bl	8001618 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e23c      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800549a:	4b5e      	ldr	r3, [pc, #376]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0308 	and.w	r3, r3, #8
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d036      	beq.n	8005520 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d019      	beq.n	80054ee <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ba:	4b56      	ldr	r3, [pc, #344]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80054bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054be:	4a55      	ldr	r2, [pc, #340]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c6:	f7fc f8a7 	bl	8001618 <HAL_GetTick>
 80054ca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ce:	f7fc f8a3 	bl	8001618 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e219      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054e0:	4b4c      	ldr	r3, [pc, #304]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80054e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x35e>
 80054ec:	e018      	b.n	8005520 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ee:	4b49      	ldr	r3, [pc, #292]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80054f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054f2:	4a48      	ldr	r2, [pc, #288]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fa:	f7fc f88d 	bl	8001618 <HAL_GetTick>
 80054fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005500:	e008      	b.n	8005514 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005502:	f7fc f889 	bl	8001618 <HAL_GetTick>
 8005506:	4602      	mov	r2, r0
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	1ad3      	subs	r3, r2, r3
 800550c:	2b02      	cmp	r3, #2
 800550e:	d901      	bls.n	8005514 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8005510:	2303      	movs	r3, #3
 8005512:	e1ff      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005514:	4b3f      	ldr	r3, [pc, #252]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005516:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005518:	f003 0302 	and.w	r3, r3, #2
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f0      	bne.n	8005502 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d036      	beq.n	800559a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	699b      	ldr	r3, [r3, #24]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d019      	beq.n	8005568 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005534:	4b37      	ldr	r3, [pc, #220]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a36      	ldr	r2, [pc, #216]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800553a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800553e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005540:	f7fc f86a 	bl	8001618 <HAL_GetTick>
 8005544:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005548:	f7fc f866 	bl	8001618 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e1dc      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800555a:	4b2e      	ldr	r3, [pc, #184]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d0f0      	beq.n	8005548 <HAL_RCC_OscConfig+0x3d8>
 8005566:	e018      	b.n	800559a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005568:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a29      	ldr	r2, [pc, #164]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800556e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005572:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005574:	f7fc f850 	bl	8001618 <HAL_GetTick>
 8005578:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800557a:	e008      	b.n	800558e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800557c:	f7fc f84c 	bl	8001618 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e1c2      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800558e:	4b21      	ldr	r3, [pc, #132]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1f0      	bne.n	800557c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	f000 8086 	beq.w	80056b4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <HAL_RCC_OscConfig+0x4a8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a1a      	ldr	r2, [pc, #104]	; (8005618 <HAL_RCC_OscConfig+0x4a8>)
 80055ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055b4:	f7fc f830 	bl	8001618 <HAL_GetTick>
 80055b8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ba:	e008      	b.n	80055ce <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055bc:	f7fc f82c 	bl	8001618 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b64      	cmp	r3, #100	; 0x64
 80055c8:	d901      	bls.n	80055ce <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80055ca:	2303      	movs	r3, #3
 80055cc:	e1a2      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ce:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_RCC_OscConfig+0x4a8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d0f0      	beq.n	80055bc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d106      	bne.n	80055f0 <HAL_RCC_OscConfig+0x480>
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	4a0b      	ldr	r2, [pc, #44]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	6713      	str	r3, [r2, #112]	; 0x70
 80055ee:	e032      	b.n	8005656 <HAL_RCC_OscConfig+0x4e6>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d111      	bne.n	800561c <HAL_RCC_OscConfig+0x4ac>
 80055f8:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80055fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fc:	4a05      	ldr	r2, [pc, #20]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	6713      	str	r3, [r2, #112]	; 0x70
 8005604:	4b03      	ldr	r3, [pc, #12]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 8005606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005608:	4a02      	ldr	r2, [pc, #8]	; (8005614 <HAL_RCC_OscConfig+0x4a4>)
 800560a:	f023 0304 	bic.w	r3, r3, #4
 800560e:	6713      	str	r3, [r2, #112]	; 0x70
 8005610:	e021      	b.n	8005656 <HAL_RCC_OscConfig+0x4e6>
 8005612:	bf00      	nop
 8005614:	58024400 	.word	0x58024400
 8005618:	58024800 	.word	0x58024800
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b05      	cmp	r3, #5
 8005622:	d10c      	bne.n	800563e <HAL_RCC_OscConfig+0x4ce>
 8005624:	4b83      	ldr	r3, [pc, #524]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a82      	ldr	r2, [pc, #520]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800562a:	f043 0304 	orr.w	r3, r3, #4
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	4b80      	ldr	r3, [pc, #512]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005634:	4a7f      	ldr	r2, [pc, #508]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	6713      	str	r3, [r2, #112]	; 0x70
 800563c:	e00b      	b.n	8005656 <HAL_RCC_OscConfig+0x4e6>
 800563e:	4b7d      	ldr	r3, [pc, #500]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005642:	4a7c      	ldr	r2, [pc, #496]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	6713      	str	r3, [r2, #112]	; 0x70
 800564a:	4b7a      	ldr	r3, [pc, #488]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a79      	ldr	r2, [pc, #484]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005650:	f023 0304 	bic.w	r3, r3, #4
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fb ffdb 	bl	8001618 <HAL_GetTick>
 8005662:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005664:	e00a      	b.n	800567c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005666:	f7fb ffd7 	bl	8001618 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	f241 3288 	movw	r2, #5000	; 0x1388
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e14b      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800567c:	4b6d      	ldr	r3, [pc, #436]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800567e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ee      	beq.n	8005666 <HAL_RCC_OscConfig+0x4f6>
 8005688:	e014      	b.n	80056b4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568a:	f7fb ffc5 	bl	8001618 <HAL_GetTick>
 800568e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005690:	e00a      	b.n	80056a8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005692:	f7fb ffc1 	bl	8001618 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e135      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056a8:	4b62      	ldr	r3, [pc, #392]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80056aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1ee      	bne.n	8005692 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f000 812a 	beq.w	8005912 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056be:	4b5d      	ldr	r3, [pc, #372]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056c6:	2b18      	cmp	r3, #24
 80056c8:	f000 80ba 	beq.w	8005840 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	f040 8095 	bne.w	8005800 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d6:	4b57      	ldr	r3, [pc, #348]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a56      	ldr	r2, [pc, #344]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80056dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e2:	f7fb ff99 	bl	8001618 <HAL_GetTick>
 80056e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e8:	e008      	b.n	80056fc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056ea:	f7fb ff95 	bl	8001618 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e10b      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056fc:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1f0      	bne.n	80056ea <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005708:	4b4a      	ldr	r3, [pc, #296]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800570a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800570c:	4b4a      	ldr	r3, [pc, #296]	; (8005838 <HAL_RCC_OscConfig+0x6c8>)
 800570e:	4013      	ands	r3, r2
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005718:	0112      	lsls	r2, r2, #4
 800571a:	430a      	orrs	r2, r1
 800571c:	4945      	ldr	r1, [pc, #276]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800571e:	4313      	orrs	r3, r2
 8005720:	628b      	str	r3, [r1, #40]	; 0x28
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005726:	3b01      	subs	r3, #1
 8005728:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	3b01      	subs	r3, #1
 8005732:	025b      	lsls	r3, r3, #9
 8005734:	b29b      	uxth	r3, r3
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800573c:	3b01      	subs	r3, #1
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005744:	431a      	orrs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574a:	3b01      	subs	r3, #1
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005752:	4938      	ldr	r1, [pc, #224]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005754:	4313      	orrs	r3, r2
 8005756:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005758:	4b36      	ldr	r3, [pc, #216]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800575a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575c:	4a35      	ldr	r2, [pc, #212]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800575e:	f023 0301 	bic.w	r3, r3, #1
 8005762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005764:	4b33      	ldr	r3, [pc, #204]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005768:	4b34      	ldr	r3, [pc, #208]	; (800583c <HAL_RCC_OscConfig+0x6cc>)
 800576a:	4013      	ands	r3, r2
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005770:	00d2      	lsls	r2, r2, #3
 8005772:	4930      	ldr	r1, [pc, #192]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005774:	4313      	orrs	r3, r2
 8005776:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005778:	4b2e      	ldr	r3, [pc, #184]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f023 020c 	bic.w	r2, r3, #12
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	492b      	ldr	r1, [pc, #172]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005786:	4313      	orrs	r3, r2
 8005788:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800578a:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800578c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578e:	f023 0202 	bic.w	r2, r3, #2
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005796:	4927      	ldr	r1, [pc, #156]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005798:	4313      	orrs	r3, r2
 800579a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057a8:	4b22      	ldr	r3, [pc, #136]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	4a21      	ldr	r2, [pc, #132]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057b4:	4b1f      	ldr	r3, [pc, #124]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	4a1e      	ldr	r2, [pc, #120]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80057c0:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	4a1b      	ldr	r2, [pc, #108]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057c6:	f043 0301 	orr.w	r3, r3, #1
 80057ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057cc:	4b19      	ldr	r3, [pc, #100]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fb ff1e 	bl	8001618 <HAL_GetTick>
 80057dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fb ff1a 	bl	8001618 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e090      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f0      	beq.n	80057e0 <HAL_RCC_OscConfig+0x670>
 80057fe:	e088      	b.n	8005912 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580c:	f7fb ff04 	bl	8001618 <HAL_GetTick>
 8005810:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005812:	e008      	b.n	8005826 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005814:	f7fb ff00 	bl	8001618 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	2b02      	cmp	r3, #2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e076      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005826:	4b03      	ldr	r3, [pc, #12]	; (8005834 <HAL_RCC_OscConfig+0x6c4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1f0      	bne.n	8005814 <HAL_RCC_OscConfig+0x6a4>
 8005832:	e06e      	b.n	8005912 <HAL_RCC_OscConfig+0x7a2>
 8005834:	58024400 	.word	0x58024400
 8005838:	fffffc0c 	.word	0xfffffc0c
 800583c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005840:	4b36      	ldr	r3, [pc, #216]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005846:	4b35      	ldr	r3, [pc, #212]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 8005848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	2b01      	cmp	r3, #1
 8005852:	d031      	beq.n	80058b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f003 0203 	and.w	r2, r3, #3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d12a      	bne.n	80058b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	091b      	lsrs	r3, r3, #4
 8005866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d122      	bne.n	80058b8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800587e:	429a      	cmp	r2, r3
 8005880:	d11a      	bne.n	80058b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	0a5b      	lsrs	r3, r3, #9
 8005886:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005890:	429a      	cmp	r2, r3
 8005892:	d111      	bne.n	80058b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	0c1b      	lsrs	r3, r3, #16
 8005898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d108      	bne.n	80058b8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	0e1b      	lsrs	r3, r3, #24
 80058aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e02b      	b.n	8005914 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80058bc:	4b17      	ldr	r3, [pc, #92]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	08db      	lsrs	r3, r3, #3
 80058c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d01f      	beq.n	8005912 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80058d2:	4b12      	ldr	r3, [pc, #72]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 80058d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d6:	4a11      	ldr	r2, [pc, #68]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 80058d8:	f023 0301 	bic.w	r3, r3, #1
 80058dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058de:	f7fb fe9b 	bl	8001618 <HAL_GetTick>
 80058e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80058e4:	bf00      	nop
 80058e6:	f7fb fe97 	bl	8001618 <HAL_GetTick>
 80058ea:	4602      	mov	r2, r0
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d0f9      	beq.n	80058e6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80058f2:	4b0a      	ldr	r3, [pc, #40]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 80058f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058f6:	4b0a      	ldr	r3, [pc, #40]	; (8005920 <HAL_RCC_OscConfig+0x7b0>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80058fe:	00d2      	lsls	r2, r2, #3
 8005900:	4906      	ldr	r1, [pc, #24]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 8005902:	4313      	orrs	r3, r2
 8005904:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005906:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 8005908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800590a:	4a04      	ldr	r2, [pc, #16]	; (800591c <HAL_RCC_OscConfig+0x7ac>)
 800590c:	f043 0301 	orr.w	r3, r3, #1
 8005910:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3730      	adds	r7, #48	; 0x30
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}
 800591c:	58024400 	.word	0x58024400
 8005920:	ffff0007 	.word	0xffff0007

08005924 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b086      	sub	sp, #24
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e19c      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005938:	4b8a      	ldr	r3, [pc, #552]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 030f 	and.w	r3, r3, #15
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d910      	bls.n	8005968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005946:	4b87      	ldr	r3, [pc, #540]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f023 020f 	bic.w	r2, r3, #15
 800594e:	4985      	ldr	r1, [pc, #532]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	4313      	orrs	r3, r2
 8005954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005956:	4b83      	ldr	r3, [pc, #524]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 030f 	and.w	r3, r3, #15
 800595e:	683a      	ldr	r2, [r7, #0]
 8005960:	429a      	cmp	r2, r3
 8005962:	d001      	beq.n	8005968 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e184      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d010      	beq.n	8005996 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	4b7b      	ldr	r3, [pc, #492]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005980:	429a      	cmp	r2, r3
 8005982:	d908      	bls.n	8005996 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005984:	4b78      	ldr	r3, [pc, #480]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	4975      	ldr	r1, [pc, #468]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005992:	4313      	orrs	r3, r2
 8005994:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0308 	and.w	r3, r3, #8
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d010      	beq.n	80059c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	4b70      	ldr	r3, [pc, #448]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	69db      	ldr	r3, [r3, #28]
 80059aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d908      	bls.n	80059c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80059b2:	4b6d      	ldr	r3, [pc, #436]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	496a      	ldr	r1, [pc, #424]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059c0:	4313      	orrs	r3, r2
 80059c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0310 	and.w	r3, r3, #16
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699a      	ldr	r2, [r3, #24]
 80059d4:	4b64      	ldr	r3, [pc, #400]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	69db      	ldr	r3, [r3, #28]
 80059d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059dc:	429a      	cmp	r2, r3
 80059de:	d908      	bls.n	80059f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059e0:	4b61      	ldr	r3, [pc, #388]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	699b      	ldr	r3, [r3, #24]
 80059ec:	495e      	ldr	r1, [pc, #376]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0320 	and.w	r3, r3, #32
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d010      	beq.n	8005a20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	69da      	ldr	r2, [r3, #28]
 8005a02:	4b59      	ldr	r3, [pc, #356]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d908      	bls.n	8005a20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005a0e:	4b56      	ldr	r3, [pc, #344]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a10:	6a1b      	ldr	r3, [r3, #32]
 8005a12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	4953      	ldr	r1, [pc, #332]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	4b4d      	ldr	r3, [pc, #308]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d908      	bls.n	8005a4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a3c:	4b4a      	ldr	r3, [pc, #296]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	f023 020f 	bic.w	r2, r3, #15
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4947      	ldr	r1, [pc, #284]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d055      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a5a:	4b43      	ldr	r3, [pc, #268]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	4940      	ldr	r1, [pc, #256]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b02      	cmp	r3, #2
 8005a72:	d107      	bne.n	8005a84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a74:	4b3c      	ldr	r3, [pc, #240]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d121      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e0f6      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b03      	cmp	r3, #3
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a8c:	4b36      	ldr	r3, [pc, #216]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d115      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0ea      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d107      	bne.n	8005ab4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aa4:	4b30      	ldr	r3, [pc, #192]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d109      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e0de      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ab4:	4b2c      	ldr	r3, [pc, #176]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0304 	and.w	r3, r3, #4
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0d6      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ac4:	4b28      	ldr	r3, [pc, #160]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f023 0207 	bic.w	r2, r3, #7
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	4925      	ldr	r1, [pc, #148]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad6:	f7fb fd9f 	bl	8001618 <HAL_GetTick>
 8005ada:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005adc:	e00a      	b.n	8005af4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ade:	f7fb fd9b 	bl	8001618 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d901      	bls.n	8005af4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	e0be      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005af4:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d1eb      	bne.n	8005ade <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d010      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	4b14      	ldr	r3, [pc, #80]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d208      	bcs.n	8005b34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b22:	4b11      	ldr	r3, [pc, #68]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	f023 020f 	bic.w	r2, r3, #15
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	490e      	ldr	r1, [pc, #56]	; (8005b68 <HAL_RCC_ClockConfig+0x244>)
 8005b30:	4313      	orrs	r3, r2
 8005b32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	683a      	ldr	r2, [r7, #0]
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d214      	bcs.n	8005b6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 020f 	bic.w	r2, r3, #15
 8005b4a:	4906      	ldr	r1, [pc, #24]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <HAL_RCC_ClockConfig+0x240>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 030f 	and.w	r3, r3, #15
 8005b5a:	683a      	ldr	r2, [r7, #0]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d005      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e086      	b.n	8005c72 <HAL_RCC_ClockConfig+0x34e>
 8005b64:	52002000 	.word	0x52002000
 8005b68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0304 	and.w	r3, r3, #4
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d010      	beq.n	8005b9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691a      	ldr	r2, [r3, #16]
 8005b7c:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d208      	bcs.n	8005b9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b88:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	4939      	ldr	r1, [pc, #228]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d010      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d208      	bcs.n	8005bc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	492e      	ldr	r1, [pc, #184]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699a      	ldr	r2, [r3, #24]
 8005bd8:	4b28      	ldr	r3, [pc, #160]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d208      	bcs.n	8005bf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005be4:	4b25      	ldr	r3, [pc, #148]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	4922      	ldr	r1, [pc, #136]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	69da      	ldr	r2, [r3, #28]
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d208      	bcs.n	8005c24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69db      	ldr	r3, [r3, #28]
 8005c1e:	4917      	ldr	r1, [pc, #92]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c24:	f000 f834 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b14      	ldr	r3, [pc, #80]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	0a1b      	lsrs	r3, r3, #8
 8005c30:	f003 030f 	and.w	r3, r3, #15
 8005c34:	4912      	ldr	r1, [pc, #72]	; (8005c80 <HAL_RCC_ClockConfig+0x35c>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c42:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <HAL_RCC_ClockConfig+0x358>)
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	4a0d      	ldr	r2, [pc, #52]	; (8005c80 <HAL_RCC_ClockConfig+0x35c>)
 8005c4c:	5cd3      	ldrb	r3, [r2, r3]
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	fa22 f303 	lsr.w	r3, r2, r3
 8005c58:	4a0a      	ldr	r2, [pc, #40]	; (8005c84 <HAL_RCC_ClockConfig+0x360>)
 8005c5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c5c:	4a0a      	ldr	r2, [pc, #40]	; (8005c88 <HAL_RCC_ClockConfig+0x364>)
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005c62:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <HAL_RCC_ClockConfig+0x368>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7fb fc8c 	bl	8001584 <HAL_InitTick>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	58024400 	.word	0x58024400
 8005c80:	0800babc 	.word	0x0800babc
 8005c84:	24000004 	.word	0x24000004
 8005c88:	24000000 	.word	0x24000000
 8005c8c:	24000008 	.word	0x24000008

08005c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b089      	sub	sp, #36	; 0x24
 8005c94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c96:	4bb3      	ldr	r3, [pc, #716]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c9e:	2b18      	cmp	r3, #24
 8005ca0:	f200 8155 	bhi.w	8005f4e <HAL_RCC_GetSysClockFreq+0x2be>
 8005ca4:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <HAL_RCC_GetSysClockFreq+0x1c>)
 8005ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005caa:	bf00      	nop
 8005cac:	08005d11 	.word	0x08005d11
 8005cb0:	08005f4f 	.word	0x08005f4f
 8005cb4:	08005f4f 	.word	0x08005f4f
 8005cb8:	08005f4f 	.word	0x08005f4f
 8005cbc:	08005f4f 	.word	0x08005f4f
 8005cc0:	08005f4f 	.word	0x08005f4f
 8005cc4:	08005f4f 	.word	0x08005f4f
 8005cc8:	08005f4f 	.word	0x08005f4f
 8005ccc:	08005d37 	.word	0x08005d37
 8005cd0:	08005f4f 	.word	0x08005f4f
 8005cd4:	08005f4f 	.word	0x08005f4f
 8005cd8:	08005f4f 	.word	0x08005f4f
 8005cdc:	08005f4f 	.word	0x08005f4f
 8005ce0:	08005f4f 	.word	0x08005f4f
 8005ce4:	08005f4f 	.word	0x08005f4f
 8005ce8:	08005f4f 	.word	0x08005f4f
 8005cec:	08005d3d 	.word	0x08005d3d
 8005cf0:	08005f4f 	.word	0x08005f4f
 8005cf4:	08005f4f 	.word	0x08005f4f
 8005cf8:	08005f4f 	.word	0x08005f4f
 8005cfc:	08005f4f 	.word	0x08005f4f
 8005d00:	08005f4f 	.word	0x08005f4f
 8005d04:	08005f4f 	.word	0x08005f4f
 8005d08:	08005f4f 	.word	0x08005f4f
 8005d0c:	08005d43 	.word	0x08005d43
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d10:	4b94      	ldr	r3, [pc, #592]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0320 	and.w	r3, r3, #32
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d009      	beq.n	8005d30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d1c:	4b91      	ldr	r3, [pc, #580]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	08db      	lsrs	r3, r3, #3
 8005d22:	f003 0303 	and.w	r3, r3, #3
 8005d26:	4a90      	ldr	r2, [pc, #576]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005d2e:	e111      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d30:	4b8d      	ldr	r3, [pc, #564]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d32:	61bb      	str	r3, [r7, #24]
      break;
 8005d34:	e10e      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005d36:	4b8d      	ldr	r3, [pc, #564]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d38:	61bb      	str	r3, [r7, #24]
      break;
 8005d3a:	e10b      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005d3c:	4b8c      	ldr	r3, [pc, #560]	; (8005f70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d3e:	61bb      	str	r3, [r7, #24]
      break;
 8005d40:	e108      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d42:	4b88      	ldr	r3, [pc, #544]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005d4c:	4b85      	ldr	r3, [pc, #532]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d50:	091b      	lsrs	r3, r3, #4
 8005d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d56:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d58:	4b82      	ldr	r3, [pc, #520]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5c:	f003 0301 	and.w	r3, r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005d62:	4b80      	ldr	r3, [pc, #512]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	08db      	lsrs	r3, r3, #3
 8005d68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	fb02 f303 	mul.w	r3, r2, r3
 8005d72:	ee07 3a90 	vmov	s15, r3
 8005d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d7a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80e1 	beq.w	8005f48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	f000 8083 	beq.w	8005e94 <HAL_RCC_GetSysClockFreq+0x204>
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b02      	cmp	r3, #2
 8005d92:	f200 80a1 	bhi.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x248>
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x114>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d056      	beq.n	8005e50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005da2:	e099      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005da4:	4b6f      	ldr	r3, [pc, #444]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f003 0320 	and.w	r3, r3, #32
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02d      	beq.n	8005e0c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005db0:	4b6c      	ldr	r3, [pc, #432]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	08db      	lsrs	r3, r3, #3
 8005db6:	f003 0303 	and.w	r3, r3, #3
 8005dba:	4a6b      	ldr	r2, [pc, #428]	; (8005f68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8005dc0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	ee07 3a90 	vmov	s15, r3
 8005dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dda:	4b62      	ldr	r3, [pc, #392]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de2:	ee07 3a90 	vmov	s15, r3
 8005de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dea:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e06:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005e0a:	e087      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	ee07 3a90 	vmov	s15, r3
 8005e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005e1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e26:	ee07 3a90 	vmov	s15, r3
 8005e2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e4e:	e065      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e62:	4b40      	ldr	r3, [pc, #256]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e72:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005e92:	e043      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	ee07 3a90 	vmov	s15, r3
 8005e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005ea2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea6:	4b2f      	ldr	r3, [pc, #188]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eae:	ee07 3a90 	vmov	s15, r3
 8005eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8005eba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005ed6:	e021      	b.n	8005f1c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	ee07 3a90 	vmov	s15, r3
 8005ede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eea:	4b1e      	ldr	r3, [pc, #120]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efa:	ed97 6a02 	vldr	s12, [r7, #8]
 8005efe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005f1a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005f1c:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	0a5b      	lsrs	r3, r3, #9
 8005f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f26:	3301      	adds	r3, #1
 8005f28:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	ee07 3a90 	vmov	s15, r3
 8005f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f40:	ee17 3a90 	vmov	r3, s15
 8005f44:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005f46:	e005      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
      break;
 8005f4c:	e002      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005f4e:	4b07      	ldr	r3, [pc, #28]	; (8005f6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f50:	61bb      	str	r3, [r7, #24]
      break;
 8005f52:	bf00      	nop
  }

  return sysclockfreq;
 8005f54:	69bb      	ldr	r3, [r7, #24]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	58024400 	.word	0x58024400
 8005f68:	03d09000 	.word	0x03d09000
 8005f6c:	003d0900 	.word	0x003d0900
 8005f70:	007a1200 	.word	0x007a1200
 8005f74:	46000000 	.word	0x46000000
 8005f78:	4c742400 	.word	0x4c742400
 8005f7c:	4a742400 	.word	0x4a742400
 8005f80:	4af42400 	.word	0x4af42400

08005f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f8a:	f7ff fe81 	bl	8005c90 <HAL_RCC_GetSysClockFreq>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	4b10      	ldr	r3, [pc, #64]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	0a1b      	lsrs	r3, r3, #8
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	490f      	ldr	r1, [pc, #60]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f9c:	5ccb      	ldrb	r3, [r1, r3]
 8005f9e:	f003 031f 	and.w	r3, r3, #31
 8005fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fa8:	4b0a      	ldr	r3, [pc, #40]	; (8005fd4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	4a09      	ldr	r2, [pc, #36]	; (8005fd8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005fb2:	5cd3      	ldrb	r3, [r2, r3]
 8005fb4:	f003 031f 	and.w	r3, r3, #31
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	4a07      	ldr	r2, [pc, #28]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x58>)
 8005fc0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <HAL_RCC_GetHCLKFreq+0x58>)
 8005fca:	681b      	ldr	r3, [r3, #0]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	0800babc 	.word	0x0800babc
 8005fdc:	24000004 	.word	0x24000004
 8005fe0:	24000000 	.word	0x24000000

08005fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fe8:	f7ff ffcc 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8005fec:	4602      	mov	r2, r0
 8005fee:	4b06      	ldr	r3, [pc, #24]	; (8006008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	091b      	lsrs	r3, r3, #4
 8005ff4:	f003 0307 	and.w	r3, r3, #7
 8005ff8:	4904      	ldr	r1, [pc, #16]	; (800600c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005ffa:	5ccb      	ldrb	r3, [r1, r3]
 8005ffc:	f003 031f 	and.w	r3, r3, #31
 8006000:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006004:	4618      	mov	r0, r3
 8006006:	bd80      	pop	{r7, pc}
 8006008:	58024400 	.word	0x58024400
 800600c:	0800babc 	.word	0x0800babc

08006010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006014:	f7ff ffb6 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8006018:	4602      	mov	r2, r0
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_GetPCLK2Freq+0x24>)
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4904      	ldr	r1, [pc, #16]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006026:	5ccb      	ldrb	r3, [r1, r3]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	58024400 	.word	0x58024400
 8006038:	0800babc 	.word	0x0800babc

0800603c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b0c6      	sub	sp, #280	; 0x118
 8006042:	af00      	add	r7, sp, #0
 8006044:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006048:	2300      	movs	r3, #0
 800604a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800604e:	2300      	movs	r3, #0
 8006050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8006060:	2500      	movs	r5, #0
 8006062:	ea54 0305 	orrs.w	r3, r4, r5
 8006066:	d049      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800606e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006072:	d02f      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006074:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006078:	d828      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800607a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800607e:	d01a      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006084:	d822      	bhi.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d007      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006090:	e01c      	b.n	80060cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006092:	4bab      	ldr	r3, [pc, #684]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006096:	4aaa      	ldr	r2, [pc, #680]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800609c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800609e:	e01a      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80060a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060a4:	3308      	adds	r3, #8
 80060a6:	2102      	movs	r1, #2
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 fc25 	bl	80078f8 <RCCEx_PLL2_Config>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060b4:	e00f      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80060b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ba:	3328      	adds	r3, #40	; 0x28
 80060bc:	2102      	movs	r1, #2
 80060be:	4618      	mov	r0, r3
 80060c0:	f001 fccc 	bl	8007a5c <RCCEx_PLL3_Config>
 80060c4:	4603      	mov	r3, r0
 80060c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80060ca:	e004      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80060d2:	e000      	b.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80060d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060de:	4b98      	ldr	r3, [pc, #608]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80060e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060ec:	4a94      	ldr	r2, [pc, #592]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80060ee:	430b      	orrs	r3, r1
 80060f0:	6513      	str	r3, [r2, #80]	; 0x50
 80060f2:	e003      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060f8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006104:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8006108:	f04f 0900 	mov.w	r9, #0
 800610c:	ea58 0309 	orrs.w	r3, r8, r9
 8006110:	d047      	beq.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006112:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006118:	2b04      	cmp	r3, #4
 800611a:	d82a      	bhi.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800611c:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800611e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006122:	bf00      	nop
 8006124:	08006139 	.word	0x08006139
 8006128:	08006147 	.word	0x08006147
 800612c:	0800615d 	.word	0x0800615d
 8006130:	0800617b 	.word	0x0800617b
 8006134:	0800617b 	.word	0x0800617b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006138:	4b81      	ldr	r3, [pc, #516]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a80      	ldr	r2, [pc, #512]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006144:	e01a      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800614a:	3308      	adds	r3, #8
 800614c:	2100      	movs	r1, #0
 800614e:	4618      	mov	r0, r3
 8006150:	f001 fbd2 	bl	80078f8 <RCCEx_PLL2_Config>
 8006154:	4603      	mov	r3, r0
 8006156:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800615a:	e00f      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800615c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006160:	3328      	adds	r3, #40	; 0x28
 8006162:	2100      	movs	r1, #0
 8006164:	4618      	mov	r0, r3
 8006166:	f001 fc79 	bl	8007a5c <RCCEx_PLL3_Config>
 800616a:	4603      	mov	r3, r0
 800616c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006170:	e004      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006178:	e000      	b.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800617a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006184:	4b6e      	ldr	r3, [pc, #440]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006188:	f023 0107 	bic.w	r1, r3, #7
 800618c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006192:	4a6b      	ldr	r2, [pc, #428]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006194:	430b      	orrs	r3, r1
 8006196:	6513      	str	r3, [r2, #80]	; 0x50
 8006198:	e003      	b.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800619e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061aa:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80061b6:	d05b      	beq.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80061b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061bc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061c0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80061c4:	d03b      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80061c6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80061ca:	d834      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d0:	d037      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80061d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061d6:	d82e      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061d8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061dc:	d033      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80061de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061e2:	d828      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e8:	d01a      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80061ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ee:	d822      	bhi.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d003      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80061f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061f8:	d007      	beq.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80061fa:	e01c      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061fc:	4b50      	ldr	r3, [pc, #320]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	4a4f      	ldr	r2, [pc, #316]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006202:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006206:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006208:	e01e      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800620a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800620e:	3308      	adds	r3, #8
 8006210:	2100      	movs	r1, #0
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fb70 	bl	80078f8 <RCCEx_PLL2_Config>
 8006218:	4603      	mov	r3, r0
 800621a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800621e:	e013      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	3328      	adds	r3, #40	; 0x28
 8006226:	2100      	movs	r1, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f001 fc17 	bl	8007a5c <RCCEx_PLL3_Config>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006234:	e008      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800623c:	e004      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800623e:	bf00      	nop
 8006240:	e002      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006242:	bf00      	nop
 8006244:	e000      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8006246:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006248:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10b      	bne.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006250:	4b3b      	ldr	r3, [pc, #236]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006254:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8006258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800625c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006260:	4a37      	ldr	r2, [pc, #220]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8006262:	430b      	orrs	r3, r1
 8006264:	6593      	str	r3, [r2, #88]	; 0x58
 8006266:	e003      	b.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006268:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800626c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800627c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006280:	2300      	movs	r3, #0
 8006282:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006286:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800628a:	460b      	mov	r3, r1
 800628c:	4313      	orrs	r3, r2
 800628e:	d05d      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006294:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006298:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800629c:	d03b      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800629e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80062a2:	d834      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062a8:	d037      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80062aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062ae:	d82e      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062b4:	d033      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80062b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80062ba:	d828      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c0:	d01a      	beq.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80062c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80062c6:	d822      	bhi.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80062cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062d0:	d007      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80062d2:	e01c      	b.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062d4:	4b1a      	ldr	r3, [pc, #104]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80062da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80062e0:	e01e      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062e6:	3308      	adds	r3, #8
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f001 fb04 	bl	80078f8 <RCCEx_PLL2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80062f6:	e013      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80062f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062fc:	3328      	adds	r3, #40	; 0x28
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f001 fbab 	bl	8007a5c <RCCEx_PLL3_Config>
 8006306:	4603      	mov	r3, r0
 8006308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800630c:	e008      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006314:	e004      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800631e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006320:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10d      	bne.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8006330:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006334:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006338:	4a01      	ldr	r2, [pc, #4]	; (8006340 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800633a:	430b      	orrs	r3, r1
 800633c:	6593      	str	r3, [r2, #88]	; 0x58
 800633e:	e005      	b.n	800634c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006340:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006344:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006348:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800634c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006354:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006358:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800635c:	2300      	movs	r3, #0
 800635e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006362:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8006366:	460b      	mov	r3, r1
 8006368:	4313      	orrs	r3, r2
 800636a:	d03a      	beq.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800636c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006372:	2b30      	cmp	r3, #48	; 0x30
 8006374:	d01f      	beq.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8006376:	2b30      	cmp	r3, #48	; 0x30
 8006378:	d819      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 800637a:	2b20      	cmp	r3, #32
 800637c:	d00c      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800637e:	2b20      	cmp	r3, #32
 8006380:	d815      	bhi.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x372>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d019      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006386:	2b10      	cmp	r3, #16
 8006388:	d111      	bne.n	80063ae <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800638a:	4baa      	ldr	r3, [pc, #680]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	4aa9      	ldr	r2, [pc, #676]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006394:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8006396:	e011      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639c:	3308      	adds	r3, #8
 800639e:	2102      	movs	r1, #2
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 faa9 	bl	80078f8 <RCCEx_PLL2_Config>
 80063a6:	4603      	mov	r3, r0
 80063a8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80063ac:	e006      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80063b4:	e002      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063b6:	bf00      	nop
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80063ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10a      	bne.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063c4:	4b9b      	ldr	r3, [pc, #620]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80063cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063d2:	4a98      	ldr	r2, [pc, #608]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80063d4:	430b      	orrs	r3, r1
 80063d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80063d8:	e003      	b.n	80063e2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80063de:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80063e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ea:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80063ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80063f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80063fc:	460b      	mov	r3, r1
 80063fe:	4313      	orrs	r3, r2
 8006400:	d051      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006402:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800640c:	d035      	beq.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800640e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006412:	d82e      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006414:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006418:	d031      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800641a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800641e:	d828      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8006420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006424:	d01a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642a:	d822      	bhi.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800642c:	2b00      	cmp	r3, #0
 800642e:	d003      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8006430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006434:	d007      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006436:	e01c      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006438:	4b7e      	ldr	r3, [pc, #504]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800643a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643c:	4a7d      	ldr	r2, [pc, #500]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800643e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006444:	e01c      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800644a:	3308      	adds	r3, #8
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f001 fa52 	bl	80078f8 <RCCEx_PLL2_Config>
 8006454:	4603      	mov	r3, r0
 8006456:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800645a:	e011      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006460:	3328      	adds	r3, #40	; 0x28
 8006462:	2100      	movs	r1, #0
 8006464:	4618      	mov	r0, r3
 8006466:	f001 faf9 	bl	8007a5c <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006470:	e006      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006478:	e002      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800647a:	bf00      	nop
 800647c:	e000      	b.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800647e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006480:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006488:	4b6a      	ldr	r3, [pc, #424]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800648a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	4a67      	ldr	r2, [pc, #412]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006498:	430b      	orrs	r3, r1
 800649a:	6513      	str	r3, [r2, #80]	; 0x50
 800649c:	e003      	b.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800649e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064a2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80064a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80064b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80064b6:	2300      	movs	r3, #0
 80064b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80064bc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80064c0:	460b      	mov	r3, r1
 80064c2:	4313      	orrs	r3, r2
 80064c4:	d053      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80064c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d0:	d033      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80064d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d6:	d82c      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064dc:	d02f      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0x502>
 80064de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80064e2:	d826      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064e8:	d02b      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80064ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80064ee:	d820      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f4:	d012      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80064f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064fa:	d81a      	bhi.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d022      	beq.n	8006546 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8006500:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006504:	d115      	bne.n	8006532 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800650a:	3308      	adds	r3, #8
 800650c:	2101      	movs	r1, #1
 800650e:	4618      	mov	r0, r3
 8006510:	f001 f9f2 	bl	80078f8 <RCCEx_PLL2_Config>
 8006514:	4603      	mov	r3, r0
 8006516:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800651a:	e015      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800651c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006520:	3328      	adds	r3, #40	; 0x28
 8006522:	2101      	movs	r1, #1
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fa99 	bl	8007a5c <RCCEx_PLL3_Config>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006530:	e00a      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006538:	e006      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800653a:	bf00      	nop
 800653c:	e004      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800653e:	bf00      	nop
 8006540:	e002      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006542:	bf00      	nop
 8006544:	e000      	b.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8006546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006548:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10a      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006550:	4b38      	ldr	r3, [pc, #224]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800655c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800655e:	4a35      	ldr	r2, [pc, #212]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8006560:	430b      	orrs	r3, r1
 8006562:	6513      	str	r3, [r2, #80]	; 0x50
 8006564:	e003      	b.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006566:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800656a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800656e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006576:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800657a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800657e:	2300      	movs	r3, #0
 8006580:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006584:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006588:	460b      	mov	r3, r1
 800658a:	4313      	orrs	r3, r2
 800658c:	d058      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800659a:	d033      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800659c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065a0:	d82c      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065a6:	d02f      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80065a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ac:	d826      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065b2:	d02b      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80065b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80065b8:	d820      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065be:	d012      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80065c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c4:	d81a      	bhi.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d022      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80065ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065ce:	d115      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	3308      	adds	r3, #8
 80065d6:	2101      	movs	r1, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f001 f98d 	bl	80078f8 <RCCEx_PLL2_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065e4:	e015      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065ea:	3328      	adds	r3, #40	; 0x28
 80065ec:	2101      	movs	r1, #1
 80065ee:	4618      	mov	r0, r3
 80065f0:	f001 fa34 	bl	8007a5c <RCCEx_PLL3_Config>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80065fa:	e00a      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006602:	e006      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006604:	bf00      	nop
 8006606:	e004      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006608:	bf00      	nop
 800660a:	e002      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800660c:	bf00      	nop
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8006610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006612:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10e      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800661a:	4b06      	ldr	r3, [pc, #24]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800661c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800661e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006626:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800662a:	4a02      	ldr	r2, [pc, #8]	; (8006634 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6593      	str	r3, [r2, #88]	; 0x58
 8006630:	e006      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800663c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800664c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006650:	2300      	movs	r3, #0
 8006652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006656:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800665a:	460b      	mov	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	d037      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006666:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666a:	d00e      	beq.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800666c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006670:	d816      	bhi.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8006676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800667a:	d111      	bne.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800667c:	4bc4      	ldr	r3, [pc, #784]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800667e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006680:	4ac3      	ldr	r2, [pc, #780]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006682:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006686:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006688:	e00f      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800668a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800668e:	3308      	adds	r3, #8
 8006690:	2101      	movs	r1, #1
 8006692:	4618      	mov	r0, r3
 8006694:	f001 f930 	bl	80078f8 <RCCEx_PLL2_Config>
 8006698:	4603      	mov	r3, r0
 800669a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800669e:	e004      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80066a6:	e000      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80066a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80066b2:	4bb7      	ldr	r3, [pc, #732]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80066ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	4ab3      	ldr	r2, [pc, #716]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	6513      	str	r3, [r2, #80]	; 0x50
 80066c6:	e003      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80066cc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80066dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80066e0:	2300      	movs	r3, #0
 80066e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80066e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d039      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b03      	cmp	r3, #3
 80066f8:	d81c      	bhi.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80066fa:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80066fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006700:	0800673d 	.word	0x0800673d
 8006704:	08006711 	.word	0x08006711
 8006708:	0800671f 	.word	0x0800671f
 800670c:	0800673d 	.word	0x0800673d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006710:	4b9f      	ldr	r3, [pc, #636]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006714:	4a9e      	ldr	r2, [pc, #632]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800671a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800671c:	e00f      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800671e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006722:	3308      	adds	r3, #8
 8006724:	2102      	movs	r1, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 f8e6 	bl	80078f8 <RCCEx_PLL2_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006732:	e004      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800673a:	e000      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800673c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006746:	4b92      	ldr	r3, [pc, #584]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800674a:	f023 0103 	bic.w	r1, r3, #3
 800674e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006754:	4a8e      	ldr	r2, [pc, #568]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006756:	430b      	orrs	r3, r1
 8006758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006760:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006770:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006774:	2300      	movs	r3, #0
 8006776:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800677a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800677e:	460b      	mov	r3, r1
 8006780:	4313      	orrs	r3, r2
 8006782:	f000 8099 	beq.w	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006786:	4b83      	ldr	r3, [pc, #524]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a82      	ldr	r2, [pc, #520]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800678c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006790:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006792:	f7fa ff41 	bl	8001618 <HAL_GetTick>
 8006796:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800679a:	e00b      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800679c:	f7fa ff3c 	bl	8001618 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	2b64      	cmp	r3, #100	; 0x64
 80067aa:	d903      	bls.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80067b2:	e005      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067b4:	4b77      	ldr	r3, [pc, #476]	; (8006994 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d0ed      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80067c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d173      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80067c8:	4b71      	ldr	r3, [pc, #452]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80067d4:	4053      	eors	r3, r2
 80067d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d015      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80067de:	4b6c      	ldr	r3, [pc, #432]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067ea:	4b69      	ldr	r3, [pc, #420]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ee:	4a68      	ldr	r2, [pc, #416]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067f4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80067f6:	4b66      	ldr	r3, [pc, #408]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fa:	4a65      	ldr	r2, [pc, #404]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80067fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006800:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006802:	4a63      	ldr	r2, [pc, #396]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006804:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006808:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800680a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800680e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006816:	d118      	bne.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006818:	f7fa fefe 	bl	8001618 <HAL_GetTick>
 800681c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006820:	e00d      	b.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006822:	f7fa fef9 	bl	8001618 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800682c:	1ad2      	subs	r2, r2, r3
 800682e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006832:	429a      	cmp	r2, r3
 8006834:	d903      	bls.n	800683e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800683c:	e005      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800683e:	4b54      	ldr	r3, [pc, #336]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0eb      	beq.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800684a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800684e:	2b00      	cmp	r3, #0
 8006850:	d129      	bne.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800685a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800685e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006862:	d10e      	bne.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8006864:	4b4a      	ldr	r3, [pc, #296]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006870:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006874:	091a      	lsrs	r2, r3, #4
 8006876:	4b48      	ldr	r3, [pc, #288]	; (8006998 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8006878:	4013      	ands	r3, r2
 800687a:	4a45      	ldr	r2, [pc, #276]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800687c:	430b      	orrs	r3, r1
 800687e:	6113      	str	r3, [r2, #16]
 8006880:	e005      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8006882:	4b43      	ldr	r3, [pc, #268]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	4a42      	ldr	r2, [pc, #264]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006888:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800688c:	6113      	str	r3, [r2, #16]
 800688e:	4b40      	ldr	r3, [pc, #256]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8006890:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8006892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006896:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800689a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800689e:	4a3c      	ldr	r2, [pc, #240]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80068a0:	430b      	orrs	r3, r1
 80068a2:	6713      	str	r3, [r2, #112]	; 0x70
 80068a4:	e008      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80068a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80068ae:	e003      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80068b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f002 0301 	and.w	r3, r2, #1
 80068c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80068c8:	2300      	movs	r3, #0
 80068ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80068ce:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f000 808f 	beq.w	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80068da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068e0:	2b28      	cmp	r3, #40	; 0x28
 80068e2:	d871      	bhi.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80068e4:	a201      	add	r2, pc, #4	; (adr r2, 80068ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80068e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ea:	bf00      	nop
 80068ec:	080069d1 	.word	0x080069d1
 80068f0:	080069c9 	.word	0x080069c9
 80068f4:	080069c9 	.word	0x080069c9
 80068f8:	080069c9 	.word	0x080069c9
 80068fc:	080069c9 	.word	0x080069c9
 8006900:	080069c9 	.word	0x080069c9
 8006904:	080069c9 	.word	0x080069c9
 8006908:	080069c9 	.word	0x080069c9
 800690c:	0800699d 	.word	0x0800699d
 8006910:	080069c9 	.word	0x080069c9
 8006914:	080069c9 	.word	0x080069c9
 8006918:	080069c9 	.word	0x080069c9
 800691c:	080069c9 	.word	0x080069c9
 8006920:	080069c9 	.word	0x080069c9
 8006924:	080069c9 	.word	0x080069c9
 8006928:	080069c9 	.word	0x080069c9
 800692c:	080069b3 	.word	0x080069b3
 8006930:	080069c9 	.word	0x080069c9
 8006934:	080069c9 	.word	0x080069c9
 8006938:	080069c9 	.word	0x080069c9
 800693c:	080069c9 	.word	0x080069c9
 8006940:	080069c9 	.word	0x080069c9
 8006944:	080069c9 	.word	0x080069c9
 8006948:	080069c9 	.word	0x080069c9
 800694c:	080069d1 	.word	0x080069d1
 8006950:	080069c9 	.word	0x080069c9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069c9 	.word	0x080069c9
 800695c:	080069c9 	.word	0x080069c9
 8006960:	080069c9 	.word	0x080069c9
 8006964:	080069c9 	.word	0x080069c9
 8006968:	080069c9 	.word	0x080069c9
 800696c:	080069d1 	.word	0x080069d1
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069c9 	.word	0x080069c9
 8006978:	080069c9 	.word	0x080069c9
 800697c:	080069c9 	.word	0x080069c9
 8006980:	080069c9 	.word	0x080069c9
 8006984:	080069c9 	.word	0x080069c9
 8006988:	080069c9 	.word	0x080069c9
 800698c:	080069d1 	.word	0x080069d1
 8006990:	58024400 	.word	0x58024400
 8006994:	58024800 	.word	0x58024800
 8006998:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800699c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a0:	3308      	adds	r3, #8
 80069a2:	2101      	movs	r1, #1
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 ffa7 	bl	80078f8 <RCCEx_PLL2_Config>
 80069aa:	4603      	mov	r3, r0
 80069ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069b0:	e00f      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069b6:	3328      	adds	r3, #40	; 0x28
 80069b8:	2101      	movs	r1, #1
 80069ba:	4618      	mov	r0, r3
 80069bc:	f001 f84e 	bl	8007a5c <RCCEx_PLL3_Config>
 80069c0:	4603      	mov	r3, r0
 80069c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80069c6:	e004      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80069ce:	e000      	b.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80069d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069d2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10a      	bne.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80069da:	4bbf      	ldr	r3, [pc, #764]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069de:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80069e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069e8:	4abb      	ldr	r2, [pc, #748]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80069ea:	430b      	orrs	r3, r1
 80069ec:	6553      	str	r3, [r2, #84]	; 0x54
 80069ee:	e003      	b.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80069f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80069f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a00:	f002 0302 	and.w	r3, r2, #2
 8006a04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a08:	2300      	movs	r3, #0
 8006a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a0e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4313      	orrs	r3, r2
 8006a16:	d041      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d824      	bhi.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006a22:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a28:	08006a75 	.word	0x08006a75
 8006a2c:	08006a41 	.word	0x08006a41
 8006a30:	08006a57 	.word	0x08006a57
 8006a34:	08006a75 	.word	0x08006a75
 8006a38:	08006a75 	.word	0x08006a75
 8006a3c:	08006a75 	.word	0x08006a75
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a44:	3308      	adds	r3, #8
 8006a46:	2101      	movs	r1, #1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 ff55 	bl	80078f8 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a54:	e00f      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5a:	3328      	adds	r3, #40	; 0x28
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fffc 	bl	8007a5c <RCCEx_PLL3_Config>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006a6a:	e004      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006a72:	e000      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006a74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a76:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006a7e:	4b96      	ldr	r3, [pc, #600]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a82:	f023 0107 	bic.w	r1, r3, #7
 8006a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a8c:	4a92      	ldr	r2, [pc, #584]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	6553      	str	r3, [r2, #84]	; 0x54
 8006a92:	e003      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006a98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f002 0304 	and.w	r3, r2, #4
 8006aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d044      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac4:	2b05      	cmp	r3, #5
 8006ac6:	d825      	bhi.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006ac8:	a201      	add	r2, pc, #4	; (adr r2, 8006ad0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ace:	bf00      	nop
 8006ad0:	08006b1d 	.word	0x08006b1d
 8006ad4:	08006ae9 	.word	0x08006ae9
 8006ad8:	08006aff 	.word	0x08006aff
 8006adc:	08006b1d 	.word	0x08006b1d
 8006ae0:	08006b1d 	.word	0x08006b1d
 8006ae4:	08006b1d 	.word	0x08006b1d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aec:	3308      	adds	r3, #8
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f000 ff01 	bl	80078f8 <RCCEx_PLL2_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006afc:	e00f      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006afe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b02:	3328      	adds	r3, #40	; 0x28
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 ffa8 	bl	8007a5c <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006b12:	e004      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006b1a:	e000      	b.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006b1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10b      	bne.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b26:	4b6c      	ldr	r3, [pc, #432]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b2a:	f023 0107 	bic.w	r1, r3, #7
 8006b2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b36:	4a68      	ldr	r2, [pc, #416]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8006b3c:	e003      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006b42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4e:	f002 0320 	and.w	r3, r2, #32
 8006b52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006b56:	2300      	movs	r3, #0
 8006b58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006b5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006b60:	460b      	mov	r3, r1
 8006b62:	4313      	orrs	r3, r2
 8006b64:	d055      	beq.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b72:	d033      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006b74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b78:	d82c      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b7e:	d02f      	beq.n	8006be0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b84:	d826      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b86:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b8a:	d02b      	beq.n	8006be4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006b8c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b90:	d820      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b96:	d012      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006b98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9c:	d81a      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d022      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006ba2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ba6:	d115      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bac:	3308      	adds	r3, #8
 8006bae:	2100      	movs	r1, #0
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f000 fea1 	bl	80078f8 <RCCEx_PLL2_Config>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bbc:	e015      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bc2:	3328      	adds	r3, #40	; 0x28
 8006bc4:	2102      	movs	r1, #2
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 ff48 	bl	8007a5c <RCCEx_PLL3_Config>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006bd2:	e00a      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006bdc:	bf00      	nop
 8006bde:	e004      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006be0:	bf00      	nop
 8006be2:	e002      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006be4:	bf00      	nop
 8006be6:	e000      	b.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bf6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006bfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c02:	4a35      	ldr	r2, [pc, #212]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6553      	str	r3, [r2, #84]	; 0x54
 8006c08:	e003      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c0a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006c0e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006c1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006c22:	2300      	movs	r3, #0
 8006c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006c28:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d058      	beq.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c3e:	d033      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006c40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006c44:	d82c      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4a:	d02f      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c50:	d826      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c56:	d02b      	beq.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006c58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c5c:	d820      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c62:	d012      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c68:	d81a      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d022      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006c6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c72:	d115      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c78:	3308      	adds	r3, #8
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f000 fe3b 	bl	80078f8 <RCCEx_PLL2_Config>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c88:	e015      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c8e:	3328      	adds	r3, #40	; 0x28
 8006c90:	2102      	movs	r1, #2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fee2 	bl	8007a5c <RCCEx_PLL3_Config>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006c9e:	e00a      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ca6:	e006      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006ca8:	bf00      	nop
 8006caa:	e004      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cac:	bf00      	nop
 8006cae:	e002      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cb0:	bf00      	nop
 8006cb2:	e000      	b.n	8006cb6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10e      	bne.n	8006cdc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006cbe:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cc2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8006cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cce:	4a02      	ldr	r2, [pc, #8]	; (8006cd8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006cd0:	430b      	orrs	r3, r1
 8006cd2:	6593      	str	r3, [r2, #88]	; 0x58
 8006cd4:	e006      	b.n	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8006cd6:	bf00      	nop
 8006cd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cdc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ce0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cec:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006cf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006cfa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4313      	orrs	r3, r2
 8006d02:	d055      	beq.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006d04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d10:	d033      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006d12:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d16:	d82c      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d1c:	d02f      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d22:	d826      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d28:	d02b      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006d2a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d2e:	d820      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d34:	d012      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3a:	d81a      	bhi.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d022      	beq.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d44:	d115      	bne.n	8006d72 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d4a:	3308      	adds	r3, #8
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fdd2 	bl	80078f8 <RCCEx_PLL2_Config>
 8006d54:	4603      	mov	r3, r0
 8006d56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d5a:	e015      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d60:	3328      	adds	r3, #40	; 0x28
 8006d62:	2102      	movs	r1, #2
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 fe79 	bl	8007a5c <RCCEx_PLL3_Config>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006d70:	e00a      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006d78:	e006      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d7a:	bf00      	nop
 8006d7c:	e004      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006d86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006d90:	4ba0      	ldr	r3, [pc, #640]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d94:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006da0:	4a9c      	ldr	r2, [pc, #624]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006da2:	430b      	orrs	r3, r1
 8006da4:	6593      	str	r3, [r2, #88]	; 0x58
 8006da6:	e003      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006da8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006dac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db8:	f002 0308 	and.w	r3, r2, #8
 8006dbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006dc6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4313      	orrs	r3, r2
 8006dce:	d01e      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006dd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ddc:	d10c      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	3328      	adds	r3, #40	; 0x28
 8006de4:	2102      	movs	r1, #2
 8006de6:	4618      	mov	r0, r3
 8006de8:	f000 fe38 	bl	8007a5c <RCCEx_PLL3_Config>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006df8:	4b86      	ldr	r3, [pc, #536]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e08:	4a82      	ldr	r2, [pc, #520]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e0a:	430b      	orrs	r3, r1
 8006e0c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e16:	f002 0310 	and.w	r3, r2, #16
 8006e1a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e24:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	d01e      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e3a:	d10c      	bne.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	3328      	adds	r3, #40	; 0x28
 8006e42:	2102      	movs	r1, #2
 8006e44:	4618      	mov	r0, r3
 8006e46:	f000 fe09 	bl	8007a5c <RCCEx_PLL3_Config>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e56:	4b6f      	ldr	r3, [pc, #444]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e66:	4a6b      	ldr	r2, [pc, #428]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006e68:	430b      	orrs	r3, r1
 8006e6a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e74:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006e78:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e7e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006e82:	460b      	mov	r3, r1
 8006e84:	4313      	orrs	r3, r2
 8006e86:	d03e      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e94:	d022      	beq.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006e96:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e9a:	d81b      	bhi.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea4:	d00b      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006ea6:	e015      	b.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eac:	3308      	adds	r3, #8
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fd21 	bl	80078f8 <RCCEx_PLL2_Config>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ebc:	e00f      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ec2:	3328      	adds	r3, #40	; 0x28
 8006ec4:	2102      	movs	r1, #2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f000 fdc8 	bl	8007a5c <RCCEx_PLL3_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006ed2:	e004      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006eda:	e000      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ede:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d10b      	bne.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ee6:	4b4b      	ldr	r3, [pc, #300]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eea:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006eee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ef2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ef6:	4a47      	ldr	r2, [pc, #284]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ef8:	430b      	orrs	r3, r1
 8006efa:	6593      	str	r3, [r2, #88]	; 0x58
 8006efc:	e003      	b.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006efe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006f12:	673b      	str	r3, [r7, #112]	; 0x70
 8006f14:	2300      	movs	r3, #0
 8006f16:	677b      	str	r3, [r7, #116]	; 0x74
 8006f18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	d03b      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006f22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f2e:	d01f      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006f30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f34:	d818      	bhi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006f36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f3a:	d003      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f40:	d007      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006f42:	e011      	b.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f44:	4b33      	ldr	r3, [pc, #204]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	4a32      	ldr	r2, [pc, #200]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f4e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f50:	e00f      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f56:	3328      	adds	r3, #40	; 0x28
 8006f58:	2101      	movs	r1, #1
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 fd7e 	bl	8007a5c <RCCEx_PLL3_Config>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006f66:	e004      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006f6e:	e000      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10b      	bne.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f7a:	4b26      	ldr	r3, [pc, #152]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8a:	4a22      	ldr	r2, [pc, #136]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	6553      	str	r3, [r2, #84]	; 0x54
 8006f90:	e003      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f92:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006f96:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8006fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fa8:	2300      	movs	r3, #0
 8006faa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fac:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	d034      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc4:	d007      	beq.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006fc6:	e011      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fc8:	4b12      	ldr	r3, [pc, #72]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fcc:	4a11      	ldr	r2, [pc, #68]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006fce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006fd4:	e00e      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fda:	3308      	adds	r3, #8
 8006fdc:	2102      	movs	r1, #2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 fc8a 	bl	80078f8 <RCCEx_PLL2_Config>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006fea:	e003      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10d      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006ffc:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700a:	4a02      	ldr	r2, [pc, #8]	; (8007014 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800700c:	430b      	orrs	r3, r1
 800700e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007010:	e006      	b.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8007012:	bf00      	nop
 8007014:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007018:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800701c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007020:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800702c:	663b      	str	r3, [r7, #96]	; 0x60
 800702e:	2300      	movs	r3, #0
 8007030:	667b      	str	r3, [r7, #100]	; 0x64
 8007032:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8007036:	460b      	mov	r3, r1
 8007038:	4313      	orrs	r3, r2
 800703a:	d00c      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800703c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007040:	3328      	adds	r3, #40	; 0x28
 8007042:	2102      	movs	r1, #2
 8007044:	4618      	mov	r0, r3
 8007046:	f000 fd09 	bl	8007a5c <RCCEx_PLL3_Config>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007062:	65bb      	str	r3, [r7, #88]	; 0x58
 8007064:	2300      	movs	r3, #0
 8007066:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007068:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800706c:	460b      	mov	r3, r1
 800706e:	4313      	orrs	r3, r2
 8007070:	d036      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800707c:	d018      	beq.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800707e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007082:	d811      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007088:	d014      	beq.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800708a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800708e:	d80b      	bhi.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d011      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8007094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007098:	d106      	bne.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800709a:	4bb7      	ldr	r3, [pc, #732]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800709c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709e:	4ab6      	ldr	r2, [pc, #728]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80070a6:	e008      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80070ae:	e004      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070b0:	bf00      	nop
 80070b2:	e002      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80070b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80070c2:	4bad      	ldr	r3, [pc, #692]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070d0:	4aa9      	ldr	r2, [pc, #676]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070d2:	430b      	orrs	r3, r1
 80070d4:	6553      	str	r3, [r2, #84]	; 0x54
 80070d6:	e003      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80070dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80070e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80070ec:	653b      	str	r3, [r7, #80]	; 0x50
 80070ee:	2300      	movs	r3, #0
 80070f0:	657b      	str	r3, [r7, #84]	; 0x54
 80070f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80070f6:	460b      	mov	r3, r1
 80070f8:	4313      	orrs	r3, r2
 80070fa:	d009      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80070fc:	4b9e      	ldr	r3, [pc, #632]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80070fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710a:	4a9b      	ldr	r2, [pc, #620]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800710c:	430b      	orrs	r3, r1
 800710e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800711c:	64bb      	str	r3, [r7, #72]	; 0x48
 800711e:	2300      	movs	r3, #0
 8007120:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007122:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8007126:	460b      	mov	r3, r1
 8007128:	4313      	orrs	r3, r2
 800712a:	d009      	beq.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800712c:	4b92      	ldr	r3, [pc, #584]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800712e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007130:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007138:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800713a:	4a8f      	ldr	r2, [pc, #572]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800713c:	430b      	orrs	r3, r1
 800713e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800714c:	643b      	str	r3, [r7, #64]	; 0x40
 800714e:	2300      	movs	r3, #0
 8007150:	647b      	str	r3, [r7, #68]	; 0x44
 8007152:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007156:	460b      	mov	r3, r1
 8007158:	4313      	orrs	r3, r2
 800715a:	d00e      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800715c:	4b86      	ldr	r3, [pc, #536]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800715e:	691b      	ldr	r3, [r3, #16]
 8007160:	4a85      	ldr	r2, [pc, #532]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007162:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007166:	6113      	str	r3, [r2, #16]
 8007168:	4b83      	ldr	r3, [pc, #524]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800716a:	6919      	ldr	r1, [r3, #16]
 800716c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007170:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007174:	4a80      	ldr	r2, [pc, #512]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007176:	430b      	orrs	r3, r1
 8007178:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800717a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8007186:	63bb      	str	r3, [r7, #56]	; 0x38
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800718c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8007190:	460b      	mov	r3, r1
 8007192:	4313      	orrs	r3, r2
 8007194:	d009      	beq.n	80071aa <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007196:	4b78      	ldr	r3, [pc, #480]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8007198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800719a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800719e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071a4:	4a74      	ldr	r2, [pc, #464]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071a6:	430b      	orrs	r3, r1
 80071a8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80071b6:	633b      	str	r3, [r7, #48]	; 0x30
 80071b8:	2300      	movs	r3, #0
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
 80071bc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80071c0:	460b      	mov	r3, r1
 80071c2:	4313      	orrs	r3, r2
 80071c4:	d00a      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80071c6:	4b6c      	ldr	r3, [pc, #432]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071d6:	4a68      	ldr	r2, [pc, #416]	; (8007378 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80071d8:	430b      	orrs	r3, r1
 80071da:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80071dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	2100      	movs	r1, #0
 80071e6:	62b9      	str	r1, [r7, #40]	; 0x28
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80071f2:	460b      	mov	r3, r1
 80071f4:	4313      	orrs	r3, r2
 80071f6:	d011      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071fc:	3308      	adds	r3, #8
 80071fe:	2100      	movs	r1, #0
 8007200:	4618      	mov	r0, r3
 8007202:	f000 fb79 	bl	80078f8 <RCCEx_PLL2_Config>
 8007206:	4603      	mov	r3, r0
 8007208:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800720c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007214:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007218:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800721c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	2100      	movs	r1, #0
 8007226:	6239      	str	r1, [r7, #32]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
 800722e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007232:	460b      	mov	r3, r1
 8007234:	4313      	orrs	r3, r2
 8007236:	d011      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007238:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800723c:	3308      	adds	r3, #8
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fb59 	bl	80078f8 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800724c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007250:	2b00      	cmp	r3, #0
 8007252:	d003      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007254:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007258:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800725c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	2100      	movs	r1, #0
 8007266:	61b9      	str	r1, [r7, #24]
 8007268:	f003 0304 	and.w	r3, r3, #4
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007272:	460b      	mov	r3, r1
 8007274:	4313      	orrs	r3, r2
 8007276:	d011      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800727c:	3308      	adds	r3, #8
 800727e:	2102      	movs	r1, #2
 8007280:	4618      	mov	r0, r3
 8007282:	f000 fb39 	bl	80078f8 <RCCEx_PLL2_Config>
 8007286:	4603      	mov	r3, r0
 8007288:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800728c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007294:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007298:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800729c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	2100      	movs	r1, #0
 80072a6:	6139      	str	r1, [r7, #16]
 80072a8:	f003 0308 	and.w	r3, r3, #8
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d011      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80072b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072bc:	3328      	adds	r3, #40	; 0x28
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fbcb 	bl	8007a5c <RCCEx_PLL3_Config>
 80072c6:	4603      	mov	r3, r0
 80072c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 80072cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d003      	beq.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80072d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80072dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	2100      	movs	r1, #0
 80072e6:	60b9      	str	r1, [r7, #8]
 80072e8:	f003 0310 	and.w	r3, r3, #16
 80072ec:	60fb      	str	r3, [r7, #12]
 80072ee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80072f2:	460b      	mov	r3, r1
 80072f4:	4313      	orrs	r3, r2
 80072f6:	d011      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072fc:	3328      	adds	r3, #40	; 0x28
 80072fe:	2101      	movs	r1, #1
 8007300:	4618      	mov	r0, r3
 8007302:	f000 fbab 	bl	8007a5c <RCCEx_PLL3_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800730c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007310:	2b00      	cmp	r3, #0
 8007312:	d003      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007318:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800731c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	2100      	movs	r1, #0
 8007326:	6039      	str	r1, [r7, #0]
 8007328:	f003 0320 	and.w	r3, r3, #32
 800732c:	607b      	str	r3, [r7, #4]
 800732e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007332:	460b      	mov	r3, r1
 8007334:	4313      	orrs	r3, r2
 8007336:	d011      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800733c:	3328      	adds	r3, #40	; 0x28
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f000 fb8b 	bl	8007a5c <RCCEx_PLL3_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800734c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007354:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8007358:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800735c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8007360:	2b00      	cmp	r3, #0
 8007362:	d101      	bne.n	8007368 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	e000      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
}
 800736a:	4618      	mov	r0, r3
 800736c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8007370:	46bd      	mov	sp, r7
 8007372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007376:	bf00      	nop
 8007378:	58024400 	.word	0x58024400

0800737c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007380:	f7fe fe00 	bl	8005f84 <HAL_RCC_GetHCLKFreq>
 8007384:	4602      	mov	r2, r0
 8007386:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	091b      	lsrs	r3, r3, #4
 800738c:	f003 0307 	and.w	r3, r3, #7
 8007390:	4904      	ldr	r1, [pc, #16]	; (80073a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007392:	5ccb      	ldrb	r3, [r1, r3]
 8007394:	f003 031f 	and.w	r3, r3, #31
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800739c:	4618      	mov	r0, r3
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	58024400 	.word	0x58024400
 80073a4:	0800babc 	.word	0x0800babc

080073a8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b089      	sub	sp, #36	; 0x24
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073b0:	4ba1      	ldr	r3, [pc, #644]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b4:	f003 0303 	and.w	r3, r3, #3
 80073b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80073ba:	4b9f      	ldr	r3, [pc, #636]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073be:	0b1b      	lsrs	r3, r3, #12
 80073c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80073c6:	4b9c      	ldr	r3, [pc, #624]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	091b      	lsrs	r3, r3, #4
 80073cc:	f003 0301 	and.w	r3, r3, #1
 80073d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80073d2:	4b99      	ldr	r3, [pc, #612]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	08db      	lsrs	r3, r3, #3
 80073d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073dc:	693a      	ldr	r2, [r7, #16]
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	ee07 3a90 	vmov	s15, r3
 80073e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8111 	beq.w	8007618 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80073f6:	69bb      	ldr	r3, [r7, #24]
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	f000 8083 	beq.w	8007504 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	2b02      	cmp	r3, #2
 8007402:	f200 80a1 	bhi.w	8007548 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	2b01      	cmp	r3, #1
 8007410:	d056      	beq.n	80074c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007412:	e099      	b.n	8007548 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007414:	4b88      	ldr	r3, [pc, #544]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d02d      	beq.n	800747c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007420:	4b85      	ldr	r3, [pc, #532]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	08db      	lsrs	r3, r3, #3
 8007426:	f003 0303 	and.w	r3, r3, #3
 800742a:	4a84      	ldr	r2, [pc, #528]	; (800763c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800742c:	fa22 f303 	lsr.w	r3, r2, r3
 8007430:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	ee07 3a90 	vmov	s15, r3
 8007438:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	ee07 3a90 	vmov	s15, r3
 8007442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800744a:	4b7b      	ldr	r3, [pc, #492]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800744c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800744e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007452:	ee07 3a90 	vmov	s15, r3
 8007456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800745a:	ed97 6a03 	vldr	s12, [r7, #12]
 800745e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800746a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800746e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007476:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800747a:	e087      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007486:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007644 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800748a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800748e:	4b6a      	ldr	r3, [pc, #424]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007496:	ee07 3a90 	vmov	s15, r3
 800749a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800749e:	ed97 6a03 	vldr	s12, [r7, #12]
 80074a2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074be:	e065      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80074ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074d2:	4b59      	ldr	r3, [pc, #356]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074da:	ee07 3a90 	vmov	s15, r3
 80074de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80074e6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007502:	e043      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800764c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007516:	4b48      	ldr	r3, [pc, #288]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800751a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751e:	ee07 3a90 	vmov	s15, r3
 8007522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007526:	ed97 6a03 	vldr	s12, [r7, #12]
 800752a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800752e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800753a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007542:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007546:	e021      	b.n	800758c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007648 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800755a:	4b37      	ldr	r3, [pc, #220]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007562:	ee07 3a90 	vmov	s15, r3
 8007566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800756a:	ed97 6a03 	vldr	s12, [r7, #12]
 800756e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007640 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800757a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800758a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800758c:	4b2a      	ldr	r3, [pc, #168]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	0a5b      	lsrs	r3, r3, #9
 8007592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007596:	ee07 3a90 	vmov	s15, r3
 800759a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800759e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80075aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b2:	ee17 2a90 	vmov	r2, s15
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80075ba:	4b1f      	ldr	r3, [pc, #124]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	0c1b      	lsrs	r3, r3, #16
 80075c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075c4:	ee07 3a90 	vmov	s15, r3
 80075c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80075d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075e0:	ee17 2a90 	vmov	r2, s15
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80075e8:	4b13      	ldr	r3, [pc, #76]	; (8007638 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007602:	edd7 6a07 	vldr	s13, [r7, #28]
 8007606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800760a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800760e:	ee17 2a90 	vmov	r2, s15
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007616:	e008      	b.n	800762a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	609a      	str	r2, [r3, #8]
}
 800762a:	bf00      	nop
 800762c:	3724      	adds	r7, #36	; 0x24
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	58024400 	.word	0x58024400
 800763c:	03d09000 	.word	0x03d09000
 8007640:	46000000 	.word	0x46000000
 8007644:	4c742400 	.word	0x4c742400
 8007648:	4a742400 	.word	0x4a742400
 800764c:	4af42400 	.word	0x4af42400

08007650 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007650:	b480      	push	{r7}
 8007652:	b089      	sub	sp, #36	; 0x24
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007658:	4ba1      	ldr	r3, [pc, #644]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800765a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007662:	4b9f      	ldr	r3, [pc, #636]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007666:	0d1b      	lsrs	r3, r3, #20
 8007668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800766c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800766e:	4b9c      	ldr	r3, [pc, #624]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007672:	0a1b      	lsrs	r3, r3, #8
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800767a:	4b99      	ldr	r3, [pc, #612]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800767c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800767e:	08db      	lsrs	r3, r3, #3
 8007680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	fb02 f303 	mul.w	r3, r2, r3
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007692:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8111 	beq.w	80078c0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	f000 8083 	beq.w	80077ac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076a6:	69bb      	ldr	r3, [r7, #24]
 80076a8:	2b02      	cmp	r3, #2
 80076aa:	f200 80a1 	bhi.w	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d056      	beq.n	8007768 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076ba:	e099      	b.n	80077f0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076bc:	4b88      	ldr	r3, [pc, #544]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02d      	beq.n	8007724 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80076c8:	4b85      	ldr	r3, [pc, #532]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	08db      	lsrs	r3, r3, #3
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	4a84      	ldr	r2, [pc, #528]	; (80078e4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80076d4:	fa22 f303 	lsr.w	r3, r2, r3
 80076d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	ee07 3a90 	vmov	s15, r3
 80076e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	ee07 3a90 	vmov	s15, r3
 80076ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f2:	4b7b      	ldr	r3, [pc, #492]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fa:	ee07 3a90 	vmov	s15, r3
 80076fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007702:	ed97 6a03 	vldr	s12, [r7, #12]
 8007706:	eddf 5a78 	vldr	s11, [pc, #480]	; 80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800770a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007722:	e087      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80078ec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007736:	4b6a      	ldr	r3, [pc, #424]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800773a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800773e:	ee07 3a90 	vmov	s15, r3
 8007742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007746:	ed97 6a03 	vldr	s12, [r7, #12]
 800774a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800774e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800775a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800775e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007762:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007766:	e065      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	ee07 3a90 	vmov	s15, r3
 800776e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007772:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80078f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800777a:	4b59      	ldr	r3, [pc, #356]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007782:	ee07 3a90 	vmov	s15, r3
 8007786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800778a:	ed97 6a03 	vldr	s12, [r7, #12]
 800778e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800779a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800779e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077aa:	e043      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	ee07 3a90 	vmov	s15, r3
 80077b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077b6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80078f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077be:	4b48      	ldr	r3, [pc, #288]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c6:	ee07 3a90 	vmov	s15, r3
 80077ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80077d2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80077ee:	e021      	b.n	8007834 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80078f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007802:	4b37      	ldr	r3, [pc, #220]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800780a:	ee07 3a90 	vmov	s15, r3
 800780e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007812:	ed97 6a03 	vldr	s12, [r7, #12]
 8007816:	eddf 5a34 	vldr	s11, [pc, #208]	; 80078e8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800781a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800781e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007832:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007834:	4b2a      	ldr	r3, [pc, #168]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007838:	0a5b      	lsrs	r3, r3, #9
 800783a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783e:	ee07 3a90 	vmov	s15, r3
 8007842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007846:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800784a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800784e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007852:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800785a:	ee17 2a90 	vmov	r2, s15
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007862:	4b1f      	ldr	r3, [pc, #124]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007866:	0c1b      	lsrs	r3, r3, #16
 8007868:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800786c:	ee07 3a90 	vmov	s15, r3
 8007870:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007878:	ee37 7a87 	vadd.f32	s14, s15, s14
 800787c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007880:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007888:	ee17 2a90 	vmov	r2, s15
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007890:	4b13      	ldr	r3, [pc, #76]	; (80078e0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007894:	0e1b      	lsrs	r3, r3, #24
 8007896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078b6:	ee17 2a90 	vmov	r2, s15
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078be:	e008      	b.n	80078d2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	609a      	str	r2, [r3, #8]
}
 80078d2:	bf00      	nop
 80078d4:	3724      	adds	r7, #36	; 0x24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	58024400 	.word	0x58024400
 80078e4:	03d09000 	.word	0x03d09000
 80078e8:	46000000 	.word	0x46000000
 80078ec:	4c742400 	.word	0x4c742400
 80078f0:	4a742400 	.word	0x4a742400
 80078f4:	4af42400 	.word	0x4af42400

080078f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b084      	sub	sp, #16
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007906:	4b53      	ldr	r3, [pc, #332]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800790a:	f003 0303 	and.w	r3, r3, #3
 800790e:	2b03      	cmp	r3, #3
 8007910:	d101      	bne.n	8007916 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e099      	b.n	8007a4a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007916:	4b4f      	ldr	r3, [pc, #316]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a4e      	ldr	r2, [pc, #312]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 800791c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007922:	f7f9 fe79 	bl	8001618 <HAL_GetTick>
 8007926:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007928:	e008      	b.n	800793c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800792a:	f7f9 fe75 	bl	8001618 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e086      	b.n	8007a4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800793c:	4b45      	ldr	r3, [pc, #276]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007948:	4b42      	ldr	r3, [pc, #264]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 800794a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800794c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	031b      	lsls	r3, r3, #12
 8007956:	493f      	ldr	r1, [pc, #252]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007958:	4313      	orrs	r3, r2
 800795a:	628b      	str	r3, [r1, #40]	; 0x28
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	3b01      	subs	r3, #1
 8007962:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	3b01      	subs	r3, #1
 800796c:	025b      	lsls	r3, r3, #9
 800796e:	b29b      	uxth	r3, r3
 8007970:	431a      	orrs	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	3b01      	subs	r3, #1
 8007978:	041b      	lsls	r3, r3, #16
 800797a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	3b01      	subs	r3, #1
 8007986:	061b      	lsls	r3, r3, #24
 8007988:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800798c:	4931      	ldr	r1, [pc, #196]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 800798e:	4313      	orrs	r3, r2
 8007990:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007992:	4b30      	ldr	r3, [pc, #192]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007996:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	492d      	ldr	r1, [pc, #180]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079a4:	4b2b      	ldr	r3, [pc, #172]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	f023 0220 	bic.w	r2, r3, #32
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	4928      	ldr	r1, [pc, #160]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4a26      	ldr	r2, [pc, #152]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079bc:	f023 0310 	bic.w	r3, r3, #16
 80079c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079c2:	4b24      	ldr	r3, [pc, #144]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c6:	4b24      	ldr	r3, [pc, #144]	; (8007a58 <RCCEx_PLL2_Config+0x160>)
 80079c8:	4013      	ands	r3, r2
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	69d2      	ldr	r2, [r2, #28]
 80079ce:	00d2      	lsls	r2, r2, #3
 80079d0:	4920      	ldr	r1, [pc, #128]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80079d6:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	f043 0310 	orr.w	r3, r3, #16
 80079e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a19      	ldr	r2, [pc, #100]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80079f4:	e00f      	b.n	8007a16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d106      	bne.n	8007a0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80079fc:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	4a14      	ldr	r2, [pc, #80]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a08:	e005      	b.n	8007a16 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a0a:	4b12      	ldr	r3, [pc, #72]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	4a11      	ldr	r2, [pc, #68]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a14:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a16:	4b0f      	ldr	r3, [pc, #60]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0e      	ldr	r2, [pc, #56]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a1c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a22:	f7f9 fdf9 	bl	8001618 <HAL_GetTick>
 8007a26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a28:	e008      	b.n	8007a3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a2a:	f7f9 fdf5 	bl	8001618 <HAL_GetTick>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	1ad3      	subs	r3, r2, r3
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d901      	bls.n	8007a3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a38:	2303      	movs	r3, #3
 8007a3a:	e006      	b.n	8007a4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a3c:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d0f0      	beq.n	8007a2a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	ffff0007 	.word	0xffff0007

08007a5c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a66:	2300      	movs	r3, #0
 8007a68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a6a:	4b53      	ldr	r3, [pc, #332]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d101      	bne.n	8007a7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e099      	b.n	8007bae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007a7a:	4b4f      	ldr	r3, [pc, #316]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	4a4e      	ldr	r2, [pc, #312]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a86:	f7f9 fdc7 	bl	8001618 <HAL_GetTick>
 8007a8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a8c:	e008      	b.n	8007aa0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a8e:	f7f9 fdc3 	bl	8001618 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e086      	b.n	8007bae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007aa0:	4b45      	ldr	r3, [pc, #276]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007aac:	4b42      	ldr	r3, [pc, #264]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	051b      	lsls	r3, r3, #20
 8007aba:	493f      	ldr	r1, [pc, #252]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	628b      	str	r3, [r1, #40]	; 0x28
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	025b      	lsls	r3, r3, #9
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	061b      	lsls	r3, r3, #24
 8007aec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007af0:	4931      	ldr	r1, [pc, #196]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007af6:	4b30      	ldr	r3, [pc, #192]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	695b      	ldr	r3, [r3, #20]
 8007b02:	492d      	ldr	r1, [pc, #180]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b08:	4b2b      	ldr	r3, [pc, #172]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	699b      	ldr	r3, [r3, #24]
 8007b14:	4928      	ldr	r1, [pc, #160]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b1a:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1e:	4a26      	ldr	r2, [pc, #152]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b24:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b26:	4b24      	ldr	r3, [pc, #144]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2a:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <RCCEx_PLL3_Config+0x160>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	687a      	ldr	r2, [r7, #4]
 8007b30:	69d2      	ldr	r2, [r2, #28]
 8007b32:	00d2      	lsls	r2, r2, #3
 8007b34:	4920      	ldr	r1, [pc, #128]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b36:	4313      	orrs	r3, r2
 8007b38:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b3a:	4b1f      	ldr	r3, [pc, #124]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b3e:	4a1e      	ldr	r2, [pc, #120]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d106      	bne.n	8007b5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	4a19      	ldr	r2, [pc, #100]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b58:	e00f      	b.n	8007b7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d106      	bne.n	8007b6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b60:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	4a14      	ldr	r2, [pc, #80]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b6c:	e005      	b.n	8007b7a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007b6e:	4b12      	ldr	r3, [pc, #72]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	4a11      	ldr	r2, [pc, #68]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007b78:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007b7a:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007b80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b86:	f7f9 fd47 	bl	8001618 <HAL_GetTick>
 8007b8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007b8c:	e008      	b.n	8007ba0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b8e:	f7f9 fd43 	bl	8001618 <HAL_GetTick>
 8007b92:	4602      	mov	r2, r0
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	1ad3      	subs	r3, r2, r3
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d901      	bls.n	8007ba0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	e006      	b.n	8007bae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0f0      	beq.n	8007b8e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3710      	adds	r7, #16
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	58024400 	.word	0x58024400
 8007bbc:	ffff0007 	.word	0xffff0007

08007bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e049      	b.n	8007c66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7f9 f9b2 	bl	8000f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2202      	movs	r2, #2
 8007bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f000 fa66 	bl	80080d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c64:	2300      	movs	r3, #0
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}
	...

08007c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d109      	bne.n	8007c94 <HAL_TIM_PWM_Start+0x24>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	bf14      	ite	ne
 8007c8c:	2301      	movne	r3, #1
 8007c8e:	2300      	moveq	r3, #0
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	e03c      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	2b04      	cmp	r3, #4
 8007c98:	d109      	bne.n	8007cae <HAL_TIM_PWM_Start+0x3e>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	bf14      	ite	ne
 8007ca6:	2301      	movne	r3, #1
 8007ca8:	2300      	moveq	r3, #0
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	e02f      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d109      	bne.n	8007cc8 <HAL_TIM_PWM_Start+0x58>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	bf14      	ite	ne
 8007cc0:	2301      	movne	r3, #1
 8007cc2:	2300      	moveq	r3, #0
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	e022      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2b0c      	cmp	r3, #12
 8007ccc:	d109      	bne.n	8007ce2 <HAL_TIM_PWM_Start+0x72>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	e015      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b10      	cmp	r3, #16
 8007ce6:	d109      	bne.n	8007cfc <HAL_TIM_PWM_Start+0x8c>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	bf14      	ite	ne
 8007cf4:	2301      	movne	r3, #1
 8007cf6:	2300      	moveq	r3, #0
 8007cf8:	b2db      	uxtb	r3, r3
 8007cfa:	e008      	b.n	8007d0e <HAL_TIM_PWM_Start+0x9e>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	bf14      	ite	ne
 8007d08:	2301      	movne	r3, #1
 8007d0a:	2300      	moveq	r3, #0
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0ab      	b.n	8007e6e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d104      	bne.n	8007d26 <HAL_TIM_PWM_Start+0xb6>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2202      	movs	r2, #2
 8007d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d24:	e023      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b04      	cmp	r3, #4
 8007d2a:	d104      	bne.n	8007d36 <HAL_TIM_PWM_Start+0xc6>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d34:	e01b      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b08      	cmp	r3, #8
 8007d3a:	d104      	bne.n	8007d46 <HAL_TIM_PWM_Start+0xd6>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2202      	movs	r2, #2
 8007d40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d44:	e013      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b0c      	cmp	r3, #12
 8007d4a:	d104      	bne.n	8007d56 <HAL_TIM_PWM_Start+0xe6>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d54:	e00b      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	2b10      	cmp	r3, #16
 8007d5a:	d104      	bne.n	8007d66 <HAL_TIM_PWM_Start+0xf6>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d64:	e003      	b.n	8007d6e <HAL_TIM_PWM_Start+0xfe>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2202      	movs	r2, #2
 8007d6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2201      	movs	r2, #1
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f000 fd26 	bl	80087c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a3d      	ldr	r2, [pc, #244]	; (8007e78 <HAL_TIM_PWM_Start+0x208>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <HAL_TIM_PWM_Start+0x13e>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a3c      	ldr	r2, [pc, #240]	; (8007e7c <HAL_TIM_PWM_Start+0x20c>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00e      	beq.n	8007dae <HAL_TIM_PWM_Start+0x13e>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a3a      	ldr	r2, [pc, #232]	; (8007e80 <HAL_TIM_PWM_Start+0x210>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d009      	beq.n	8007dae <HAL_TIM_PWM_Start+0x13e>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a39      	ldr	r2, [pc, #228]	; (8007e84 <HAL_TIM_PWM_Start+0x214>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d004      	beq.n	8007dae <HAL_TIM_PWM_Start+0x13e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a37      	ldr	r2, [pc, #220]	; (8007e88 <HAL_TIM_PWM_Start+0x218>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d101      	bne.n	8007db2 <HAL_TIM_PWM_Start+0x142>
 8007dae:	2301      	movs	r3, #1
 8007db0:	e000      	b.n	8007db4 <HAL_TIM_PWM_Start+0x144>
 8007db2:	2300      	movs	r3, #0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d007      	beq.n	8007dc8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007dc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	4a2a      	ldr	r2, [pc, #168]	; (8007e78 <HAL_TIM_PWM_Start+0x208>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d02c      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dda:	d027      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a2a      	ldr	r2, [pc, #168]	; (8007e8c <HAL_TIM_PWM_Start+0x21c>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d022      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a29      	ldr	r2, [pc, #164]	; (8007e90 <HAL_TIM_PWM_Start+0x220>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d01d      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <HAL_TIM_PWM_Start+0x224>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d018      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	; (8007e7c <HAL_TIM_PWM_Start+0x20c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d013      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <HAL_TIM_PWM_Start+0x228>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00e      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a1b      	ldr	r2, [pc, #108]	; (8007e80 <HAL_TIM_PWM_Start+0x210>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d009      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a1f      	ldr	r2, [pc, #124]	; (8007e9c <HAL_TIM_PWM_Start+0x22c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d004      	beq.n	8007e2c <HAL_TIM_PWM_Start+0x1bc>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1e      	ldr	r2, [pc, #120]	; (8007ea0 <HAL_TIM_PWM_Start+0x230>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d115      	bne.n	8007e58 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <HAL_TIM_PWM_Start+0x234>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d015      	beq.n	8007e6a <HAL_TIM_PWM_Start+0x1fa>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e44:	d011      	beq.n	8007e6a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0201 	orr.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e56:	e008      	b.n	8007e6a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f042 0201 	orr.w	r2, r2, #1
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	e000      	b.n	8007e6c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40010000 	.word	0x40010000
 8007e7c:	40010400 	.word	0x40010400
 8007e80:	40014000 	.word	0x40014000
 8007e84:	40014400 	.word	0x40014400
 8007e88:	40014800 	.word	0x40014800
 8007e8c:	40000400 	.word	0x40000400
 8007e90:	40000800 	.word	0x40000800
 8007e94:	40000c00 	.word	0x40000c00
 8007e98:	40001800 	.word	0x40001800
 8007e9c:	4000e000 	.word	0x4000e000
 8007ea0:	4000e400 	.word	0x4000e400
 8007ea4:	00010007 	.word	0x00010007

08007ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e0ff      	b.n	80080c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b14      	cmp	r3, #20
 8007ed2:	f200 80f0 	bhi.w	80080b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007ed6:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007edc:	08007f31 	.word	0x08007f31
 8007ee0:	080080b7 	.word	0x080080b7
 8007ee4:	080080b7 	.word	0x080080b7
 8007ee8:	080080b7 	.word	0x080080b7
 8007eec:	08007f71 	.word	0x08007f71
 8007ef0:	080080b7 	.word	0x080080b7
 8007ef4:	080080b7 	.word	0x080080b7
 8007ef8:	080080b7 	.word	0x080080b7
 8007efc:	08007fb3 	.word	0x08007fb3
 8007f00:	080080b7 	.word	0x080080b7
 8007f04:	080080b7 	.word	0x080080b7
 8007f08:	080080b7 	.word	0x080080b7
 8007f0c:	08007ff3 	.word	0x08007ff3
 8007f10:	080080b7 	.word	0x080080b7
 8007f14:	080080b7 	.word	0x080080b7
 8007f18:	080080b7 	.word	0x080080b7
 8007f1c:	08008035 	.word	0x08008035
 8007f20:	080080b7 	.word	0x080080b7
 8007f24:	080080b7 	.word	0x080080b7
 8007f28:	080080b7 	.word	0x080080b7
 8007f2c:	08008075 	.word	0x08008075
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68b9      	ldr	r1, [r7, #8]
 8007f36:	4618      	mov	r0, r3
 8007f38:	f000 f970 	bl	800821c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0208 	orr.w	r2, r2, #8
 8007f4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	699a      	ldr	r2, [r3, #24]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 0204 	bic.w	r2, r2, #4
 8007f5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	6999      	ldr	r1, [r3, #24]
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	691a      	ldr	r2, [r3, #16]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	430a      	orrs	r2, r1
 8007f6c:	619a      	str	r2, [r3, #24]
      break;
 8007f6e:	e0a5      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68b9      	ldr	r1, [r7, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f9e0 	bl	800833c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	699a      	ldr	r2, [r3, #24]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699a      	ldr	r2, [r3, #24]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	6999      	ldr	r1, [r3, #24]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	021a      	lsls	r2, r3, #8
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	619a      	str	r2, [r3, #24]
      break;
 8007fb0:	e084      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68b9      	ldr	r1, [r7, #8]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f000 fa49 	bl	8008450 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69da      	ldr	r2, [r3, #28]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f042 0208 	orr.w	r2, r2, #8
 8007fcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69da      	ldr	r2, [r3, #28]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0204 	bic.w	r2, r2, #4
 8007fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	69d9      	ldr	r1, [r3, #28]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691a      	ldr	r2, [r3, #16]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	430a      	orrs	r2, r1
 8007fee:	61da      	str	r2, [r3, #28]
      break;
 8007ff0:	e064      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f000 fab1 	bl	8008560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	69da      	ldr	r2, [r3, #28]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800800c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	69da      	ldr	r2, [r3, #28]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800801c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	69d9      	ldr	r1, [r3, #28]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	021a      	lsls	r2, r3, #8
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	430a      	orrs	r2, r1
 8008030:	61da      	str	r2, [r3, #28]
      break;
 8008032:	e043      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68b9      	ldr	r1, [r7, #8]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fafa 	bl	8008634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0208 	orr.w	r2, r2, #8
 800804e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f022 0204 	bic.w	r2, r2, #4
 800805e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	430a      	orrs	r2, r1
 8008070:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008072:	e023      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68b9      	ldr	r1, [r7, #8]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 fb3e 	bl	80086fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800808e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	021a      	lsls	r2, r3, #8
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	430a      	orrs	r2, r1
 80080b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80080b4:	e002      	b.n	80080bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	75fb      	strb	r3, [r7, #23]
      break;
 80080ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a44      	ldr	r2, [pc, #272]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080ee:	d00f      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a41      	ldr	r2, [pc, #260]	; (80081f8 <TIM_Base_SetConfig+0x128>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d00b      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a40      	ldr	r2, [pc, #256]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d007      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	4a3f      	ldr	r2, [pc, #252]	; (8008200 <TIM_Base_SetConfig+0x130>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d003      	beq.n	8008110 <TIM_Base_SetConfig+0x40>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	4a3e      	ldr	r2, [pc, #248]	; (8008204 <TIM_Base_SetConfig+0x134>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d108      	bne.n	8008122 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a33      	ldr	r2, [pc, #204]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d027      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008130:	d023      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a30      	ldr	r2, [pc, #192]	; (80081f8 <TIM_Base_SetConfig+0x128>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01f      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <TIM_Base_SetConfig+0x12c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d01b      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a2e      	ldr	r2, [pc, #184]	; (8008200 <TIM_Base_SetConfig+0x130>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d017      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	4a2d      	ldr	r2, [pc, #180]	; (8008204 <TIM_Base_SetConfig+0x134>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d013      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a2c      	ldr	r2, [pc, #176]	; (8008208 <TIM_Base_SetConfig+0x138>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a2b      	ldr	r2, [pc, #172]	; (800820c <TIM_Base_SetConfig+0x13c>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2a      	ldr	r2, [pc, #168]	; (8008210 <TIM_Base_SetConfig+0x140>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a29      	ldr	r2, [pc, #164]	; (8008214 <TIM_Base_SetConfig+0x144>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_Base_SetConfig+0xaa>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a28      	ldr	r2, [pc, #160]	; (8008218 <TIM_Base_SetConfig+0x148>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d108      	bne.n	800818c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	4313      	orrs	r3, r2
 800818a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	695b      	ldr	r3, [r3, #20]
 8008196:	4313      	orrs	r3, r2
 8008198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	68fa      	ldr	r2, [r7, #12]
 800819e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <TIM_Base_SetConfig+0x124>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d00f      	beq.n	80081d8 <TIM_Base_SetConfig+0x108>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	4a12      	ldr	r2, [pc, #72]	; (8008204 <TIM_Base_SetConfig+0x134>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d00b      	beq.n	80081d8 <TIM_Base_SetConfig+0x108>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a11      	ldr	r2, [pc, #68]	; (8008208 <TIM_Base_SetConfig+0x138>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d007      	beq.n	80081d8 <TIM_Base_SetConfig+0x108>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	4a10      	ldr	r2, [pc, #64]	; (800820c <TIM_Base_SetConfig+0x13c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d003      	beq.n	80081d8 <TIM_Base_SetConfig+0x108>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a0f      	ldr	r2, [pc, #60]	; (8008210 <TIM_Base_SetConfig+0x140>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d103      	bne.n	80081e0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	691a      	ldr	r2, [r3, #16]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	615a      	str	r2, [r3, #20]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	40010000 	.word	0x40010000
 80081f8:	40000400 	.word	0x40000400
 80081fc:	40000800 	.word	0x40000800
 8008200:	40000c00 	.word	0x40000c00
 8008204:	40010400 	.word	0x40010400
 8008208:	40014000 	.word	0x40014000
 800820c:	40014400 	.word	0x40014400
 8008210:	40014800 	.word	0x40014800
 8008214:	4000e000 	.word	0x4000e000
 8008218:	4000e400 	.word	0x4000e400

0800821c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6a1b      	ldr	r3, [r3, #32]
 800822a:	f023 0201 	bic.w	r2, r3, #1
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4b37      	ldr	r3, [pc, #220]	; (8008324 <TIM_OC1_SetConfig+0x108>)
 8008248:	4013      	ands	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f023 0303 	bic.w	r3, r3, #3
 8008252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	4313      	orrs	r3, r2
 800825c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	f023 0302 	bic.w	r3, r3, #2
 8008264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4313      	orrs	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a2d      	ldr	r2, [pc, #180]	; (8008328 <TIM_OC1_SetConfig+0x10c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d00f      	beq.n	8008298 <TIM_OC1_SetConfig+0x7c>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a2c      	ldr	r2, [pc, #176]	; (800832c <TIM_OC1_SetConfig+0x110>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d00b      	beq.n	8008298 <TIM_OC1_SetConfig+0x7c>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	4a2b      	ldr	r2, [pc, #172]	; (8008330 <TIM_OC1_SetConfig+0x114>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d007      	beq.n	8008298 <TIM_OC1_SetConfig+0x7c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <TIM_OC1_SetConfig+0x118>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <TIM_OC1_SetConfig+0x7c>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a29      	ldr	r2, [pc, #164]	; (8008338 <TIM_OC1_SetConfig+0x11c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d10c      	bne.n	80082b2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	f023 0308 	bic.w	r3, r3, #8
 800829e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082aa:	697b      	ldr	r3, [r7, #20]
 80082ac:	f023 0304 	bic.w	r3, r3, #4
 80082b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a1c      	ldr	r2, [pc, #112]	; (8008328 <TIM_OC1_SetConfig+0x10c>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00f      	beq.n	80082da <TIM_OC1_SetConfig+0xbe>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a1b      	ldr	r2, [pc, #108]	; (800832c <TIM_OC1_SetConfig+0x110>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d00b      	beq.n	80082da <TIM_OC1_SetConfig+0xbe>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a1a      	ldr	r2, [pc, #104]	; (8008330 <TIM_OC1_SetConfig+0x114>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d007      	beq.n	80082da <TIM_OC1_SetConfig+0xbe>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <TIM_OC1_SetConfig+0x118>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d003      	beq.n	80082da <TIM_OC1_SetConfig+0xbe>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	4a18      	ldr	r2, [pc, #96]	; (8008338 <TIM_OC1_SetConfig+0x11c>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d111      	bne.n	80082fe <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	699b      	ldr	r3, [r3, #24]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	68fa      	ldr	r2, [r7, #12]
 8008308:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	697a      	ldr	r2, [r7, #20]
 8008316:	621a      	str	r2, [r3, #32]
}
 8008318:	bf00      	nop
 800831a:	371c      	adds	r7, #28
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr
 8008324:	fffeff8f 	.word	0xfffeff8f
 8008328:	40010000 	.word	0x40010000
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40014400 	.word	0x40014400
 8008338:	40014800 	.word	0x40014800

0800833c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800833c:	b480      	push	{r7}
 800833e:	b087      	sub	sp, #28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	f023 0210 	bic.w	r2, r3, #16
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	4b34      	ldr	r3, [pc, #208]	; (8008438 <TIM_OC2_SetConfig+0xfc>)
 8008368:	4013      	ands	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	4313      	orrs	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	f023 0320 	bic.w	r3, r3, #32
 8008386:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	011b      	lsls	r3, r3, #4
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	4313      	orrs	r3, r2
 8008392:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a29      	ldr	r2, [pc, #164]	; (800843c <TIM_OC2_SetConfig+0x100>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d003      	beq.n	80083a4 <TIM_OC2_SetConfig+0x68>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a28      	ldr	r2, [pc, #160]	; (8008440 <TIM_OC2_SetConfig+0x104>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10d      	bne.n	80083c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a1e      	ldr	r2, [pc, #120]	; (800843c <TIM_OC2_SetConfig+0x100>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00f      	beq.n	80083e8 <TIM_OC2_SetConfig+0xac>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a1d      	ldr	r2, [pc, #116]	; (8008440 <TIM_OC2_SetConfig+0x104>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00b      	beq.n	80083e8 <TIM_OC2_SetConfig+0xac>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a1c      	ldr	r2, [pc, #112]	; (8008444 <TIM_OC2_SetConfig+0x108>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d007      	beq.n	80083e8 <TIM_OC2_SetConfig+0xac>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <TIM_OC2_SetConfig+0x10c>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d003      	beq.n	80083e8 <TIM_OC2_SetConfig+0xac>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4a1a      	ldr	r2, [pc, #104]	; (800844c <TIM_OC2_SetConfig+0x110>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d113      	bne.n	8008410 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	009b      	lsls	r3, r3, #2
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	697a      	ldr	r2, [r7, #20]
 8008428:	621a      	str	r2, [r3, #32]
}
 800842a:	bf00      	nop
 800842c:	371c      	adds	r7, #28
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	feff8fff 	.word	0xfeff8fff
 800843c:	40010000 	.word	0x40010000
 8008440:	40010400 	.word	0x40010400
 8008444:	40014000 	.word	0x40014000
 8008448:	40014400 	.word	0x40014400
 800844c:	40014800 	.word	0x40014800

08008450 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008450:	b480      	push	{r7}
 8008452:	b087      	sub	sp, #28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	685b      	ldr	r3, [r3, #4]
 8008470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	4b33      	ldr	r3, [pc, #204]	; (8008548 <TIM_OC3_SetConfig+0xf8>)
 800847c:	4013      	ands	r3, r2
 800847e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f023 0303 	bic.w	r3, r3, #3
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008498:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	021b      	lsls	r3, r3, #8
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	4a28      	ldr	r2, [pc, #160]	; (800854c <TIM_OC3_SetConfig+0xfc>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d003      	beq.n	80084b6 <TIM_OC3_SetConfig+0x66>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a27      	ldr	r2, [pc, #156]	; (8008550 <TIM_OC3_SetConfig+0x100>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d10d      	bne.n	80084d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	021b      	lsls	r3, r3, #8
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	4a1d      	ldr	r2, [pc, #116]	; (800854c <TIM_OC3_SetConfig+0xfc>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d00f      	beq.n	80084fa <TIM_OC3_SetConfig+0xaa>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	4a1c      	ldr	r2, [pc, #112]	; (8008550 <TIM_OC3_SetConfig+0x100>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d00b      	beq.n	80084fa <TIM_OC3_SetConfig+0xaa>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	4a1b      	ldr	r2, [pc, #108]	; (8008554 <TIM_OC3_SetConfig+0x104>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d007      	beq.n	80084fa <TIM_OC3_SetConfig+0xaa>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4a1a      	ldr	r2, [pc, #104]	; (8008558 <TIM_OC3_SetConfig+0x108>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d003      	beq.n	80084fa <TIM_OC3_SetConfig+0xaa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	4a19      	ldr	r2, [pc, #100]	; (800855c <TIM_OC3_SetConfig+0x10c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d113      	bne.n	8008522 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008500:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	011b      	lsls	r3, r3, #4
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	68fa      	ldr	r2, [r7, #12]
 800852c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	621a      	str	r2, [r3, #32]
}
 800853c:	bf00      	nop
 800853e:	371c      	adds	r7, #28
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr
 8008548:	fffeff8f 	.word	0xfffeff8f
 800854c:	40010000 	.word	0x40010000
 8008550:	40010400 	.word	0x40010400
 8008554:	40014000 	.word	0x40014000
 8008558:	40014400 	.word	0x40014400
 800855c:	40014800 	.word	0x40014800

08008560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a1b      	ldr	r3, [r3, #32]
 800856e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1b      	ldr	r3, [r3, #32]
 800857a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	69db      	ldr	r3, [r3, #28]
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4b24      	ldr	r3, [pc, #144]	; (800861c <TIM_OC4_SetConfig+0xbc>)
 800858c:	4013      	ands	r3, r2
 800858e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	031b      	lsls	r3, r3, #12
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	4313      	orrs	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a19      	ldr	r2, [pc, #100]	; (8008620 <TIM_OC4_SetConfig+0xc0>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d00f      	beq.n	80085e0 <TIM_OC4_SetConfig+0x80>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	4a18      	ldr	r2, [pc, #96]	; (8008624 <TIM_OC4_SetConfig+0xc4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d00b      	beq.n	80085e0 <TIM_OC4_SetConfig+0x80>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	4a17      	ldr	r2, [pc, #92]	; (8008628 <TIM_OC4_SetConfig+0xc8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d007      	beq.n	80085e0 <TIM_OC4_SetConfig+0x80>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a16      	ldr	r2, [pc, #88]	; (800862c <TIM_OC4_SetConfig+0xcc>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d003      	beq.n	80085e0 <TIM_OC4_SetConfig+0x80>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a15      	ldr	r2, [pc, #84]	; (8008630 <TIM_OC4_SetConfig+0xd0>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d109      	bne.n	80085f4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80085e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	019b      	lsls	r3, r3, #6
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	4313      	orrs	r3, r2
 80085f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	693a      	ldr	r2, [r7, #16]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	feff8fff 	.word	0xfeff8fff
 8008620:	40010000 	.word	0x40010000
 8008624:	40010400 	.word	0x40010400
 8008628:	40014000 	.word	0x40014000
 800862c:	40014400 	.word	0x40014400
 8008630:	40014800 	.word	0x40014800

08008634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800865a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4b21      	ldr	r3, [pc, #132]	; (80086e4 <TIM_OC5_SetConfig+0xb0>)
 8008660:	4013      	ands	r3, r2
 8008662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	68fa      	ldr	r2, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008674:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	4313      	orrs	r3, r2
 8008680:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a18      	ldr	r2, [pc, #96]	; (80086e8 <TIM_OC5_SetConfig+0xb4>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00f      	beq.n	80086aa <TIM_OC5_SetConfig+0x76>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a17      	ldr	r2, [pc, #92]	; (80086ec <TIM_OC5_SetConfig+0xb8>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d00b      	beq.n	80086aa <TIM_OC5_SetConfig+0x76>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a16      	ldr	r2, [pc, #88]	; (80086f0 <TIM_OC5_SetConfig+0xbc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d007      	beq.n	80086aa <TIM_OC5_SetConfig+0x76>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a15      	ldr	r2, [pc, #84]	; (80086f4 <TIM_OC5_SetConfig+0xc0>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d003      	beq.n	80086aa <TIM_OC5_SetConfig+0x76>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a14      	ldr	r2, [pc, #80]	; (80086f8 <TIM_OC5_SetConfig+0xc4>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d109      	bne.n	80086be <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	021b      	lsls	r3, r3, #8
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	4313      	orrs	r3, r2
 80086bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	697a      	ldr	r2, [r7, #20]
 80086c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	685a      	ldr	r2, [r3, #4]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	693a      	ldr	r2, [r7, #16]
 80086d6:	621a      	str	r2, [r3, #32]
}
 80086d8:	bf00      	nop
 80086da:	371c      	adds	r7, #28
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	fffeff8f 	.word	0xfffeff8f
 80086e8:	40010000 	.word	0x40010000
 80086ec:	40010400 	.word	0x40010400
 80086f0:	40014000 	.word	0x40014000
 80086f4:	40014400 	.word	0x40014400
 80086f8:	40014800 	.word	0x40014800

080086fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b087      	sub	sp, #28
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <TIM_OC6_SetConfig+0xb4>)
 8008728:	4013      	ands	r3, r2
 800872a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	021b      	lsls	r3, r3, #8
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	4313      	orrs	r3, r2
 8008736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800873e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	051b      	lsls	r3, r3, #20
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a19      	ldr	r2, [pc, #100]	; (80087b4 <TIM_OC6_SetConfig+0xb8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d00f      	beq.n	8008774 <TIM_OC6_SetConfig+0x78>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a18      	ldr	r2, [pc, #96]	; (80087b8 <TIM_OC6_SetConfig+0xbc>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00b      	beq.n	8008774 <TIM_OC6_SetConfig+0x78>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a17      	ldr	r2, [pc, #92]	; (80087bc <TIM_OC6_SetConfig+0xc0>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d007      	beq.n	8008774 <TIM_OC6_SetConfig+0x78>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a16      	ldr	r2, [pc, #88]	; (80087c0 <TIM_OC6_SetConfig+0xc4>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d003      	beq.n	8008774 <TIM_OC6_SetConfig+0x78>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a15      	ldr	r2, [pc, #84]	; (80087c4 <TIM_OC6_SetConfig+0xc8>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d109      	bne.n	8008788 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800877a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	695b      	ldr	r3, [r3, #20]
 8008780:	029b      	lsls	r3, r3, #10
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	4313      	orrs	r3, r2
 8008786:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	685a      	ldr	r2, [r3, #4]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	693a      	ldr	r2, [r7, #16]
 80087a0:	621a      	str	r2, [r3, #32]
}
 80087a2:	bf00      	nop
 80087a4:	371c      	adds	r7, #28
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	feff8fff 	.word	0xfeff8fff
 80087b4:	40010000 	.word	0x40010000
 80087b8:	40010400 	.word	0x40010400
 80087bc:	40014000 	.word	0x40014000
 80087c0:	40014400 	.word	0x40014400
 80087c4:	40014800 	.word	0x40014800

080087c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b087      	sub	sp, #28
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	f003 031f 	and.w	r3, r3, #31
 80087da:	2201      	movs	r2, #1
 80087dc:	fa02 f303 	lsl.w	r3, r2, r3
 80087e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6a1a      	ldr	r2, [r3, #32]
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	43db      	mvns	r3, r3
 80087ea:	401a      	ands	r2, r3
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	6a1a      	ldr	r2, [r3, #32]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f003 031f 	and.w	r3, r3, #31
 80087fa:	6879      	ldr	r1, [r7, #4]
 80087fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008800:	431a      	orrs	r2, r3
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	621a      	str	r2, [r3, #32]
}
 8008806:	bf00      	nop
 8008808:	371c      	adds	r7, #28
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
	...

08008814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008824:	2b01      	cmp	r3, #1
 8008826:	d101      	bne.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008828:	2302      	movs	r3, #2
 800882a:	e077      	b.n	800891c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2202      	movs	r2, #2
 8008838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a35      	ldr	r2, [pc, #212]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d004      	beq.n	8008860 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a34      	ldr	r2, [pc, #208]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d108      	bne.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008866:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	4313      	orrs	r3, r2
 8008870:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008878:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68fa      	ldr	r2, [r7, #12]
 8008880:	4313      	orrs	r3, r2
 8008882:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a25      	ldr	r2, [pc, #148]	; (8008928 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d02c      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800889e:	d027      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a22      	ldr	r2, [pc, #136]	; (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d022      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a21      	ldr	r2, [pc, #132]	; (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d01d      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a1f      	ldr	r2, [pc, #124]	; (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d018      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a1a      	ldr	r2, [pc, #104]	; (800892c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d013      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a1b      	ldr	r2, [pc, #108]	; (800893c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00e      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a1a      	ldr	r2, [pc, #104]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d009      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a18      	ldr	r2, [pc, #96]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d10c      	bne.n	800890a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800891a:	2300      	movs	r3, #0
}
 800891c:	4618      	mov	r0, r3
 800891e:	3714      	adds	r7, #20
 8008920:	46bd      	mov	sp, r7
 8008922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008926:	4770      	bx	lr
 8008928:	40010000 	.word	0x40010000
 800892c:	40010400 	.word	0x40010400
 8008930:	40000400 	.word	0x40000400
 8008934:	40000800 	.word	0x40000800
 8008938:	40000c00 	.word	0x40000c00
 800893c:	40001800 	.word	0x40001800
 8008940:	40014000 	.word	0x40014000
 8008944:	4000e000 	.word	0x4000e000
 8008948:	4000e400 	.word	0x4000e400

0800894c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008964:	2302      	movs	r3, #2
 8008966:	e087      	b.n	8008a78 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a27      	ldr	r2, [pc, #156]	; (8008a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d004      	beq.n	80089f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a25      	ldr	r2, [pc, #148]	; (8008a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d106      	bne.n	8008a04 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	69db      	ldr	r3, [r3, #28]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1e      	ldr	r2, [pc, #120]	; (8008a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d004      	beq.n	8008a18 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a1d      	ldr	r2, [pc, #116]	; (8008a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d126      	bne.n	8008a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	051b      	lsls	r3, r3, #20
 8008a24:	4313      	orrs	r3, r2
 8008a26:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d004      	beq.n	8008a58 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a0d      	ldr	r2, [pc, #52]	; (8008a88 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d106      	bne.n	8008a66 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3714      	adds	r7, #20
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	40010000 	.word	0x40010000
 8008a88:	40010400 	.word	0x40010400

08008a8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d101      	bne.n	8008a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e042      	b.n	8008b24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7f8 faab 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2224      	movs	r2, #36	; 0x24
 8008aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	f022 0201 	bic.w	r2, r2, #1
 8008acc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fcea 	bl	80094a8 <UART_SetConfig>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d101      	bne.n	8008ade <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e022      	b.n	8008b24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f001 fb4a 	bl	800a180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	689a      	ldr	r2, [r3, #8]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f042 0201 	orr.w	r2, r2, #1
 8008b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 fbd1 	bl	800a2c4 <UART_CheckIdleState>
 8008b22:	4603      	mov	r3, r0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b08a      	sub	sp, #40	; 0x28
 8008b30:	af02      	add	r7, sp, #8
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	603b      	str	r3, [r7, #0]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	d17b      	bne.n	8008c3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <HAL_UART_Transmit+0x26>
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e074      	b.n	8008c40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	2221      	movs	r2, #33	; 0x21
 8008b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b66:	f7f8 fd57 	bl	8001618 <HAL_GetTick>
 8008b6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	88fa      	ldrh	r2, [r7, #6]
 8008b70:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	88fa      	ldrh	r2, [r7, #6]
 8008b78:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b84:	d108      	bne.n	8008b98 <HAL_UART_Transmit+0x6c>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d104      	bne.n	8008b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	e003      	b.n	8008ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ba0:	e030      	b.n	8008c04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	9300      	str	r3, [sp, #0]
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	2180      	movs	r1, #128	; 0x80
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f001 fc33 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d005      	beq.n	8008bc4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e03d      	b.n	8008c40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d10b      	bne.n	8008be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	881b      	ldrh	r3, [r3, #0]
 8008bce:	461a      	mov	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008bd8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	3302      	adds	r3, #2
 8008bde:	61bb      	str	r3, [r7, #24]
 8008be0:	e007      	b.n	8008bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	781a      	ldrb	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	3301      	adds	r3, #1
 8008bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3b01      	subs	r3, #1
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1c8      	bne.n	8008ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2200      	movs	r2, #0
 8008c18:	2140      	movs	r1, #64	; 0x40
 8008c1a:	68f8      	ldr	r0, [r7, #12]
 8008c1c:	f001 fbfc 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d005      	beq.n	8008c32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2220      	movs	r2, #32
 8008c2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e006      	b.n	8008c40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2220      	movs	r2, #32
 8008c36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	e000      	b.n	8008c40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008c3e:	2302      	movs	r3, #2
  }
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	3720      	adds	r7, #32
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b08a      	sub	sp, #40	; 0x28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	4613      	mov	r3, r2
 8008c54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	d137      	bne.n	8008cd0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <HAL_UART_Receive_DMA+0x24>
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e030      	b.n	8008cd2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a18      	ldr	r2, [pc, #96]	; (8008cdc <HAL_UART_Receive_DMA+0x94>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d01f      	beq.n	8008cc0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d018      	beq.n	8008cc0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cac:	623b      	str	r3, [r7, #32]
 8008cae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	69f9      	ldr	r1, [r7, #28]
 8008cb2:	6a3a      	ldr	r2, [r7, #32]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e6      	bne.n	8008c8e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008cc0:	88fb      	ldrh	r3, [r7, #6]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	68b9      	ldr	r1, [r7, #8]
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f001 fc0e 	bl	800a4e8 <UART_Start_Receive_DMA>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	e000      	b.n	8008cd2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008cd0:	2302      	movs	r3, #2
  }
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3728      	adds	r7, #40	; 0x28
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	58000c00 	.word	0x58000c00

08008ce0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b0ba      	sub	sp, #232	; 0xe8
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008d06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008d0a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008d0e:	4013      	ands	r3, r2
 8008d10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008d14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d11b      	bne.n	8008d54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d20:	f003 0320 	and.w	r3, r3, #32
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d015      	beq.n	8008d54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d105      	bne.n	8008d40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d009      	beq.n	8008d54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8377 	beq.w	8009438 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
      }
      return;
 8008d52:	e371      	b.n	8009438 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 8123 	beq.w	8008fa4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008d5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008d62:	4b8d      	ldr	r3, [pc, #564]	; (8008f98 <HAL_UART_IRQHandler+0x2b8>)
 8008d64:	4013      	ands	r3, r2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d106      	bne.n	8008d78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008d6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008d6e:	4b8b      	ldr	r3, [pc, #556]	; (8008f9c <HAL_UART_IRQHandler+0x2bc>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 8116 	beq.w	8008fa4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d011      	beq.n	8008da8 <HAL_UART_IRQHandler+0xc8>
 8008d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00b      	beq.n	8008da8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d9e:	f043 0201 	orr.w	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dac:	f003 0302 	and.w	r3, r3, #2
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d011      	beq.n	8008dd8 <HAL_UART_IRQHandler+0xf8>
 8008db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dce:	f043 0204 	orr.w	r2, r3, #4
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ddc:	f003 0304 	and.w	r3, r3, #4
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d011      	beq.n	8008e08 <HAL_UART_IRQHandler+0x128>
 8008de4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008de8:	f003 0301 	and.w	r3, r3, #1
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d00b      	beq.n	8008e08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	2204      	movs	r2, #4
 8008df6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dfe:	f043 0202 	orr.w	r2, r3, #2
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d017      	beq.n	8008e44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d105      	bne.n	8008e2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008e20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e24:	4b5c      	ldr	r3, [pc, #368]	; (8008f98 <HAL_UART_IRQHandler+0x2b8>)
 8008e26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d00b      	beq.n	8008e44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2208      	movs	r2, #8
 8008e32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3a:	f043 0208 	orr.w	r2, r3, #8
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d012      	beq.n	8008e76 <HAL_UART_IRQHandler+0x196>
 8008e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00c      	beq.n	8008e76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e6c:	f043 0220 	orr.w	r2, r3, #32
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 82dd 	beq.w	800943c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e86:	f003 0320 	and.w	r3, r3, #32
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d013      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e92:	f003 0320 	and.w	r3, r3, #32
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d105      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d007      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d003      	beq.n	8008eb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ebc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eca:	2b40      	cmp	r3, #64	; 0x40
 8008ecc:	d005      	beq.n	8008eda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008ed2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d054      	beq.n	8008f84 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fbec 	bl	800a6b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eea:	2b40      	cmp	r3, #64	; 0x40
 8008eec:	d146      	bne.n	8008f7c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008efc:	e853 3f00 	ldrex	r3, [r3]
 8008f00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008f04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3308      	adds	r3, #8
 8008f16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008f1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008f26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008f2a:	e841 2300 	strex	r3, r2, [r1]
 8008f2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1d9      	bne.n	8008eee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d017      	beq.n	8008f74 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f4a:	4a15      	ldr	r2, [pc, #84]	; (8008fa0 <HAL_UART_IRQHandler+0x2c0>)
 8008f4c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7f9 fd93 	bl	8002a80 <HAL_DMA_Abort_IT>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d019      	beq.n	8008f94 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8008f6e:	4610      	mov	r0, r2
 8008f70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f72:	e00f      	b.n	8008f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 fa81 	bl	800947c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f7a:	e00b      	b.n	8008f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fa7d 	bl	800947c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f82:	e007      	b.n	8008f94 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fa79 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008f92:	e253      	b.n	800943c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f94:	bf00      	nop
    return;
 8008f96:	e251      	b.n	800943c <HAL_UART_IRQHandler+0x75c>
 8008f98:	10000001 	.word	0x10000001
 8008f9c:	04000120 	.word	0x04000120
 8008fa0:	0800a96b 	.word	0x0800a96b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	f040 81e7 	bne.w	800937c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	f000 81e0 	beq.w	800937c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 81d9 	beq.w	800937c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2210      	movs	r2, #16
 8008fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fdc:	2b40      	cmp	r3, #64	; 0x40
 8008fde:	f040 8151 	bne.w	8009284 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a96      	ldr	r2, [pc, #600]	; (8009244 <HAL_UART_IRQHandler+0x564>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d068      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a93      	ldr	r2, [pc, #588]	; (8009248 <HAL_UART_IRQHandler+0x568>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d061      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a91      	ldr	r2, [pc, #580]	; (800924c <HAL_UART_IRQHandler+0x56c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d05a      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a8e      	ldr	r2, [pc, #568]	; (8009250 <HAL_UART_IRQHandler+0x570>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d053      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a8c      	ldr	r2, [pc, #560]	; (8009254 <HAL_UART_IRQHandler+0x574>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d04c      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a89      	ldr	r2, [pc, #548]	; (8009258 <HAL_UART_IRQHandler+0x578>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d045      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a87      	ldr	r2, [pc, #540]	; (800925c <HAL_UART_IRQHandler+0x57c>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d03e      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a84      	ldr	r2, [pc, #528]	; (8009260 <HAL_UART_IRQHandler+0x580>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d037      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a82      	ldr	r2, [pc, #520]	; (8009264 <HAL_UART_IRQHandler+0x584>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d030      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a7f      	ldr	r2, [pc, #508]	; (8009268 <HAL_UART_IRQHandler+0x588>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d029      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a7d      	ldr	r2, [pc, #500]	; (800926c <HAL_UART_IRQHandler+0x58c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d022      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a7a      	ldr	r2, [pc, #488]	; (8009270 <HAL_UART_IRQHandler+0x590>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d01b      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	4a78      	ldr	r2, [pc, #480]	; (8009274 <HAL_UART_IRQHandler+0x594>)
 8009094:	4293      	cmp	r3, r2
 8009096:	d014      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a75      	ldr	r2, [pc, #468]	; (8009278 <HAL_UART_IRQHandler+0x598>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d00d      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a73      	ldr	r2, [pc, #460]	; (800927c <HAL_UART_IRQHandler+0x59c>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d006      	beq.n	80090c2 <HAL_UART_IRQHandler+0x3e2>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a70      	ldr	r2, [pc, #448]	; (8009280 <HAL_UART_IRQHandler+0x5a0>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d106      	bne.n	80090d0 <HAL_UART_IRQHandler+0x3f0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	e005      	b.n	80090dc <HAL_UART_IRQHandler+0x3fc>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	f000 81ab 	beq.w	8009440 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80090f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80090f4:	429a      	cmp	r2, r3
 80090f6:	f080 81a3 	bcs.w	8009440 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009100:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009110:	f000 8087 	beq.w	8009222 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009120:	e853 3f00 	ldrex	r3, [r3]
 8009124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800912c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	461a      	mov	r2, r3
 800913a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800913e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009142:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800914a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009156:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1da      	bne.n	8009114 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800916e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009170:	f023 0301 	bic.w	r3, r3, #1
 8009174:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009182:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009186:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009188:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800918a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800918e:	e841 2300 	strex	r3, r2, [r1]
 8009192:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009196:	2b00      	cmp	r3, #0
 8009198:	d1e1      	bne.n	800915e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	3308      	adds	r3, #8
 80091a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80091a4:	e853 3f00 	ldrex	r3, [r3]
 80091a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80091aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	3308      	adds	r3, #8
 80091ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80091be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80091c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80091c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80091c6:	e841 2300 	strex	r3, r2, [r1]
 80091ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80091cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1e3      	bne.n	800919a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2220      	movs	r2, #32
 80091d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091e8:	e853 3f00 	ldrex	r3, [r3]
 80091ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091f0:	f023 0310 	bic.w	r3, r3, #16
 80091f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	461a      	mov	r2, r3
 80091fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009202:	65bb      	str	r3, [r7, #88]	; 0x58
 8009204:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009206:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009208:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1e4      	bne.n	80091e0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800921c:	4618      	mov	r0, r3
 800921e:	f7f9 f911 	bl	8002444 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2202      	movs	r2, #2
 8009226:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009234:	b29b      	uxth	r3, r3
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	b29b      	uxth	r3, r3
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f927 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009242:	e0fd      	b.n	8009440 <HAL_UART_IRQHandler+0x760>
 8009244:	40020010 	.word	0x40020010
 8009248:	40020028 	.word	0x40020028
 800924c:	40020040 	.word	0x40020040
 8009250:	40020058 	.word	0x40020058
 8009254:	40020070 	.word	0x40020070
 8009258:	40020088 	.word	0x40020088
 800925c:	400200a0 	.word	0x400200a0
 8009260:	400200b8 	.word	0x400200b8
 8009264:	40020410 	.word	0x40020410
 8009268:	40020428 	.word	0x40020428
 800926c:	40020440 	.word	0x40020440
 8009270:	40020458 	.word	0x40020458
 8009274:	40020470 	.word	0x40020470
 8009278:	40020488 	.word	0x40020488
 800927c:	400204a0 	.word	0x400204a0
 8009280:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009290:	b29b      	uxth	r3, r3
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 80cf 	beq.w	8009444 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80092a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 80ca 	beq.w	8009444 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	e853 3f00 	ldrex	r3, [r3]
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	461a      	mov	r2, r3
 80092ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80092d2:	647b      	str	r3, [r7, #68]	; 0x44
 80092d4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092da:	e841 2300 	strex	r3, r2, [r1]
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d1e4      	bne.n	80092b0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3308      	adds	r3, #8
 80092ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	623b      	str	r3, [r7, #32]
   return(result);
 80092f6:	6a3a      	ldr	r2, [r7, #32]
 80092f8:	4b55      	ldr	r3, [pc, #340]	; (8009450 <HAL_UART_IRQHandler+0x770>)
 80092fa:	4013      	ands	r3, r2
 80092fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800930a:	633a      	str	r2, [r7, #48]	; 0x30
 800930c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009310:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009312:	e841 2300 	strex	r3, r2, [r1]
 8009316:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1e3      	bne.n	80092e6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2220      	movs	r2, #32
 8009322:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	e853 3f00 	ldrex	r3, [r3]
 800933e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f023 0310 	bic.w	r3, r3, #16
 8009346:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	461a      	mov	r2, r3
 8009350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009354:	61fb      	str	r3, [r7, #28]
 8009356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	69b9      	ldr	r1, [r7, #24]
 800935a:	69fa      	ldr	r2, [r7, #28]
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	617b      	str	r3, [r7, #20]
   return(result);
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e4      	bne.n	8009332 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800936e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009372:	4619      	mov	r1, r3
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 f88b 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800937a:	e063      	b.n	8009444 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009380:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009384:	2b00      	cmp	r3, #0
 8009386:	d00e      	beq.n	80093a6 <HAL_UART_IRQHandler+0x6c6>
 8009388:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800938c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d008      	beq.n	80093a6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800939c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fb24 	bl	800a9ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80093a4:	e051      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80093a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d014      	beq.n	80093dc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d105      	bne.n	80093ca <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d03a      	beq.n	8009448 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	4798      	blx	r3
    }
    return;
 80093da:	e035      	b.n	8009448 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d009      	beq.n	80093fc <HAL_UART_IRQHandler+0x71c>
 80093e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d003      	beq.n	80093fc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f001 face 	bl	800a996 <UART_EndTransmit_IT>
    return;
 80093fa:	e026      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009404:	2b00      	cmp	r3, #0
 8009406:	d009      	beq.n	800941c <HAL_UART_IRQHandler+0x73c>
 8009408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800940c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f001 fafd 	bl	800aa14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800941a:	e016      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800941c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d010      	beq.n	800944a <HAL_UART_IRQHandler+0x76a>
 8009428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800942c:	2b00      	cmp	r3, #0
 800942e:	da0c      	bge.n	800944a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f001 fae5 	bl	800aa00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009436:	e008      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
      return;
 8009438:	bf00      	nop
 800943a:	e006      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
    return;
 800943c:	bf00      	nop
 800943e:	e004      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
      return;
 8009440:	bf00      	nop
 8009442:	e002      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
      return;
 8009444:	bf00      	nop
 8009446:	e000      	b.n	800944a <HAL_UART_IRQHandler+0x76a>
    return;
 8009448:	bf00      	nop
  }
}
 800944a:	37e8      	adds	r7, #232	; 0xe8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}
 8009450:	effffffe 	.word	0xeffffffe

08009454 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009468:	b480      	push	{r7}
 800946a:	b083      	sub	sp, #12
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009470:	bf00      	nop
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009484:	bf00      	nop
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009490:	b480      	push	{r7}
 8009492:	b083      	sub	sp, #12
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	460b      	mov	r3, r1
 800949a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80094a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80094ac:	b092      	sub	sp, #72	; 0x48
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	689a      	ldr	r2, [r3, #8]
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	431a      	orrs	r2, r3
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	695b      	ldr	r3, [r3, #20]
 80094c6:	431a      	orrs	r2, r3
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	69db      	ldr	r3, [r3, #28]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	4bbe      	ldr	r3, [pc, #760]	; (80097d0 <UART_SetConfig+0x328>)
 80094d8:	4013      	ands	r3, r2
 80094da:	697a      	ldr	r2, [r7, #20]
 80094dc:	6812      	ldr	r2, [r2, #0]
 80094de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	68da      	ldr	r2, [r3, #12]
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	699b      	ldr	r3, [r3, #24]
 80094fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4ab3      	ldr	r2, [pc, #716]	; (80097d4 <UART_SetConfig+0x32c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d004      	beq.n	8009514 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	6a1b      	ldr	r3, [r3, #32]
 800950e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009510:	4313      	orrs	r3, r2
 8009512:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	689a      	ldr	r2, [r3, #8]
 800951a:	4baf      	ldr	r3, [pc, #700]	; (80097d8 <UART_SetConfig+0x330>)
 800951c:	4013      	ands	r3, r2
 800951e:	697a      	ldr	r2, [r7, #20]
 8009520:	6812      	ldr	r2, [r2, #0]
 8009522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009524:	430b      	orrs	r3, r1
 8009526:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952e:	f023 010f 	bic.w	r1, r3, #15
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	4aa6      	ldr	r2, [pc, #664]	; (80097dc <UART_SetConfig+0x334>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d177      	bne.n	8009638 <UART_SetConfig+0x190>
 8009548:	4ba5      	ldr	r3, [pc, #660]	; (80097e0 <UART_SetConfig+0x338>)
 800954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009550:	2b28      	cmp	r3, #40	; 0x28
 8009552:	d86d      	bhi.n	8009630 <UART_SetConfig+0x188>
 8009554:	a201      	add	r2, pc, #4	; (adr r2, 800955c <UART_SetConfig+0xb4>)
 8009556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955a:	bf00      	nop
 800955c:	08009601 	.word	0x08009601
 8009560:	08009631 	.word	0x08009631
 8009564:	08009631 	.word	0x08009631
 8009568:	08009631 	.word	0x08009631
 800956c:	08009631 	.word	0x08009631
 8009570:	08009631 	.word	0x08009631
 8009574:	08009631 	.word	0x08009631
 8009578:	08009631 	.word	0x08009631
 800957c:	08009609 	.word	0x08009609
 8009580:	08009631 	.word	0x08009631
 8009584:	08009631 	.word	0x08009631
 8009588:	08009631 	.word	0x08009631
 800958c:	08009631 	.word	0x08009631
 8009590:	08009631 	.word	0x08009631
 8009594:	08009631 	.word	0x08009631
 8009598:	08009631 	.word	0x08009631
 800959c:	08009611 	.word	0x08009611
 80095a0:	08009631 	.word	0x08009631
 80095a4:	08009631 	.word	0x08009631
 80095a8:	08009631 	.word	0x08009631
 80095ac:	08009631 	.word	0x08009631
 80095b0:	08009631 	.word	0x08009631
 80095b4:	08009631 	.word	0x08009631
 80095b8:	08009631 	.word	0x08009631
 80095bc:	08009619 	.word	0x08009619
 80095c0:	08009631 	.word	0x08009631
 80095c4:	08009631 	.word	0x08009631
 80095c8:	08009631 	.word	0x08009631
 80095cc:	08009631 	.word	0x08009631
 80095d0:	08009631 	.word	0x08009631
 80095d4:	08009631 	.word	0x08009631
 80095d8:	08009631 	.word	0x08009631
 80095dc:	08009621 	.word	0x08009621
 80095e0:	08009631 	.word	0x08009631
 80095e4:	08009631 	.word	0x08009631
 80095e8:	08009631 	.word	0x08009631
 80095ec:	08009631 	.word	0x08009631
 80095f0:	08009631 	.word	0x08009631
 80095f4:	08009631 	.word	0x08009631
 80095f8:	08009631 	.word	0x08009631
 80095fc:	08009629 	.word	0x08009629
 8009600:	2301      	movs	r3, #1
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009606:	e326      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800960e:	e322      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e31e      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e31a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e316      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009628:	2340      	movs	r3, #64	; 0x40
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e312      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009630:	2380      	movs	r3, #128	; 0x80
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009636:	e30e      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a69      	ldr	r2, [pc, #420]	; (80097e4 <UART_SetConfig+0x33c>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d130      	bne.n	80096a4 <UART_SetConfig+0x1fc>
 8009642:	4b67      	ldr	r3, [pc, #412]	; (80097e0 <UART_SetConfig+0x338>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b05      	cmp	r3, #5
 800964c:	d826      	bhi.n	800969c <UART_SetConfig+0x1f4>
 800964e:	a201      	add	r2, pc, #4	; (adr r2, 8009654 <UART_SetConfig+0x1ac>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	0800966d 	.word	0x0800966d
 8009658:	08009675 	.word	0x08009675
 800965c:	0800967d 	.word	0x0800967d
 8009660:	08009685 	.word	0x08009685
 8009664:	0800968d 	.word	0x0800968d
 8009668:	08009695 	.word	0x08009695
 800966c:	2300      	movs	r3, #0
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009672:	e2f0      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800967a:	e2ec      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009682:	e2e8      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800968a:	e2e4      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800968c:	2320      	movs	r3, #32
 800968e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009692:	e2e0      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009694:	2340      	movs	r3, #64	; 0x40
 8009696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800969a:	e2dc      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800969c:	2380      	movs	r3, #128	; 0x80
 800969e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096a2:	e2d8      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a4f      	ldr	r2, [pc, #316]	; (80097e8 <UART_SetConfig+0x340>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d130      	bne.n	8009710 <UART_SetConfig+0x268>
 80096ae:	4b4c      	ldr	r3, [pc, #304]	; (80097e0 <UART_SetConfig+0x338>)
 80096b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096b2:	f003 0307 	and.w	r3, r3, #7
 80096b6:	2b05      	cmp	r3, #5
 80096b8:	d826      	bhi.n	8009708 <UART_SetConfig+0x260>
 80096ba:	a201      	add	r2, pc, #4	; (adr r2, 80096c0 <UART_SetConfig+0x218>)
 80096bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096c0:	080096d9 	.word	0x080096d9
 80096c4:	080096e1 	.word	0x080096e1
 80096c8:	080096e9 	.word	0x080096e9
 80096cc:	080096f1 	.word	0x080096f1
 80096d0:	080096f9 	.word	0x080096f9
 80096d4:	08009701 	.word	0x08009701
 80096d8:	2300      	movs	r3, #0
 80096da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096de:	e2ba      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80096e0:	2304      	movs	r3, #4
 80096e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096e6:	e2b6      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80096e8:	2308      	movs	r3, #8
 80096ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ee:	e2b2      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80096f0:	2310      	movs	r3, #16
 80096f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f6:	e2ae      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80096f8:	2320      	movs	r3, #32
 80096fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fe:	e2aa      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009700:	2340      	movs	r3, #64	; 0x40
 8009702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009706:	e2a6      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009708:	2380      	movs	r3, #128	; 0x80
 800970a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970e:	e2a2      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a35      	ldr	r2, [pc, #212]	; (80097ec <UART_SetConfig+0x344>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d130      	bne.n	800977c <UART_SetConfig+0x2d4>
 800971a:	4b31      	ldr	r3, [pc, #196]	; (80097e0 <UART_SetConfig+0x338>)
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f003 0307 	and.w	r3, r3, #7
 8009722:	2b05      	cmp	r3, #5
 8009724:	d826      	bhi.n	8009774 <UART_SetConfig+0x2cc>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <UART_SetConfig+0x284>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	08009745 	.word	0x08009745
 8009730:	0800974d 	.word	0x0800974d
 8009734:	08009755 	.word	0x08009755
 8009738:	0800975d 	.word	0x0800975d
 800973c:	08009765 	.word	0x08009765
 8009740:	0800976d 	.word	0x0800976d
 8009744:	2300      	movs	r3, #0
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e284      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800974c:	2304      	movs	r3, #4
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009752:	e280      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009754:	2308      	movs	r3, #8
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975a:	e27c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800975c:	2310      	movs	r3, #16
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e278      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009764:	2320      	movs	r3, #32
 8009766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976a:	e274      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800976c:	2340      	movs	r3, #64	; 0x40
 800976e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009772:	e270      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009774:	2380      	movs	r3, #128	; 0x80
 8009776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977a:	e26c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <UART_SetConfig+0x348>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d142      	bne.n	800980c <UART_SetConfig+0x364>
 8009786:	4b16      	ldr	r3, [pc, #88]	; (80097e0 <UART_SetConfig+0x338>)
 8009788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800978a:	f003 0307 	and.w	r3, r3, #7
 800978e:	2b05      	cmp	r3, #5
 8009790:	d838      	bhi.n	8009804 <UART_SetConfig+0x35c>
 8009792:	a201      	add	r2, pc, #4	; (adr r2, 8009798 <UART_SetConfig+0x2f0>)
 8009794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009798:	080097b1 	.word	0x080097b1
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097c1 	.word	0x080097c1
 80097a4:	080097c9 	.word	0x080097c9
 80097a8:	080097f5 	.word	0x080097f5
 80097ac:	080097fd 	.word	0x080097fd
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e24e      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80097b8:	2304      	movs	r3, #4
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e24a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80097c0:	2308      	movs	r3, #8
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e246      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80097c8:	2310      	movs	r3, #16
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e242      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80097d0:	cfff69f3 	.word	0xcfff69f3
 80097d4:	58000c00 	.word	0x58000c00
 80097d8:	11fff4ff 	.word	0x11fff4ff
 80097dc:	40011000 	.word	0x40011000
 80097e0:	58024400 	.word	0x58024400
 80097e4:	40004400 	.word	0x40004400
 80097e8:	40004800 	.word	0x40004800
 80097ec:	40004c00 	.word	0x40004c00
 80097f0:	40005000 	.word	0x40005000
 80097f4:	2320      	movs	r3, #32
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097fa:	e22c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80097fc:	2340      	movs	r3, #64	; 0x40
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009802:	e228      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e224      	b.n	8009c56 <UART_SetConfig+0x7ae>
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4ab1      	ldr	r2, [pc, #708]	; (8009ad8 <UART_SetConfig+0x630>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d176      	bne.n	8009904 <UART_SetConfig+0x45c>
 8009816:	4bb1      	ldr	r3, [pc, #708]	; (8009adc <UART_SetConfig+0x634>)
 8009818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800981e:	2b28      	cmp	r3, #40	; 0x28
 8009820:	d86c      	bhi.n	80098fc <UART_SetConfig+0x454>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <UART_SetConfig+0x380>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	080098cd 	.word	0x080098cd
 800982c:	080098fd 	.word	0x080098fd
 8009830:	080098fd 	.word	0x080098fd
 8009834:	080098fd 	.word	0x080098fd
 8009838:	080098fd 	.word	0x080098fd
 800983c:	080098fd 	.word	0x080098fd
 8009840:	080098fd 	.word	0x080098fd
 8009844:	080098fd 	.word	0x080098fd
 8009848:	080098d5 	.word	0x080098d5
 800984c:	080098fd 	.word	0x080098fd
 8009850:	080098fd 	.word	0x080098fd
 8009854:	080098fd 	.word	0x080098fd
 8009858:	080098fd 	.word	0x080098fd
 800985c:	080098fd 	.word	0x080098fd
 8009860:	080098fd 	.word	0x080098fd
 8009864:	080098fd 	.word	0x080098fd
 8009868:	080098dd 	.word	0x080098dd
 800986c:	080098fd 	.word	0x080098fd
 8009870:	080098fd 	.word	0x080098fd
 8009874:	080098fd 	.word	0x080098fd
 8009878:	080098fd 	.word	0x080098fd
 800987c:	080098fd 	.word	0x080098fd
 8009880:	080098fd 	.word	0x080098fd
 8009884:	080098fd 	.word	0x080098fd
 8009888:	080098e5 	.word	0x080098e5
 800988c:	080098fd 	.word	0x080098fd
 8009890:	080098fd 	.word	0x080098fd
 8009894:	080098fd 	.word	0x080098fd
 8009898:	080098fd 	.word	0x080098fd
 800989c:	080098fd 	.word	0x080098fd
 80098a0:	080098fd 	.word	0x080098fd
 80098a4:	080098fd 	.word	0x080098fd
 80098a8:	080098ed 	.word	0x080098ed
 80098ac:	080098fd 	.word	0x080098fd
 80098b0:	080098fd 	.word	0x080098fd
 80098b4:	080098fd 	.word	0x080098fd
 80098b8:	080098fd 	.word	0x080098fd
 80098bc:	080098fd 	.word	0x080098fd
 80098c0:	080098fd 	.word	0x080098fd
 80098c4:	080098fd 	.word	0x080098fd
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	2301      	movs	r3, #1
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098d2:	e1c0      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098da:	e1bc      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e2:	e1b8      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ea:	e1b4      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098ec:	2320      	movs	r3, #32
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098f2:	e1b0      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098f4:	2340      	movs	r3, #64	; 0x40
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098fa:	e1ac      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80098fc:	2380      	movs	r3, #128	; 0x80
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009902:	e1a8      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4a75      	ldr	r2, [pc, #468]	; (8009ae0 <UART_SetConfig+0x638>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d130      	bne.n	8009970 <UART_SetConfig+0x4c8>
 800990e:	4b73      	ldr	r3, [pc, #460]	; (8009adc <UART_SetConfig+0x634>)
 8009910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009912:	f003 0307 	and.w	r3, r3, #7
 8009916:	2b05      	cmp	r3, #5
 8009918:	d826      	bhi.n	8009968 <UART_SetConfig+0x4c0>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <UART_SetConfig+0x478>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009939 	.word	0x08009939
 8009924:	08009941 	.word	0x08009941
 8009928:	08009949 	.word	0x08009949
 800992c:	08009951 	.word	0x08009951
 8009930:	08009959 	.word	0x08009959
 8009934:	08009961 	.word	0x08009961
 8009938:	2300      	movs	r3, #0
 800993a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800993e:	e18a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009940:	2304      	movs	r3, #4
 8009942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009946:	e186      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009948:	2308      	movs	r3, #8
 800994a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800994e:	e182      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009950:	2310      	movs	r3, #16
 8009952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009956:	e17e      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009958:	2320      	movs	r3, #32
 800995a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800995e:	e17a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009960:	2340      	movs	r3, #64	; 0x40
 8009962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009966:	e176      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009968:	2380      	movs	r3, #128	; 0x80
 800996a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800996e:	e172      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a5b      	ldr	r2, [pc, #364]	; (8009ae4 <UART_SetConfig+0x63c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d130      	bne.n	80099dc <UART_SetConfig+0x534>
 800997a:	4b58      	ldr	r3, [pc, #352]	; (8009adc <UART_SetConfig+0x634>)
 800997c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	2b05      	cmp	r3, #5
 8009984:	d826      	bhi.n	80099d4 <UART_SetConfig+0x52c>
 8009986:	a201      	add	r2, pc, #4	; (adr r2, 800998c <UART_SetConfig+0x4e4>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099a5 	.word	0x080099a5
 8009990:	080099ad 	.word	0x080099ad
 8009994:	080099b5 	.word	0x080099b5
 8009998:	080099bd 	.word	0x080099bd
 800999c:	080099c5 	.word	0x080099c5
 80099a0:	080099cd 	.word	0x080099cd
 80099a4:	2300      	movs	r3, #0
 80099a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099aa:	e154      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099ac:	2304      	movs	r3, #4
 80099ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b2:	e150      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099b4:	2308      	movs	r3, #8
 80099b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ba:	e14c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099bc:	2310      	movs	r3, #16
 80099be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c2:	e148      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099c4:	2320      	movs	r3, #32
 80099c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ca:	e144      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099cc:	2340      	movs	r3, #64	; 0x40
 80099ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d2:	e140      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099d4:	2380      	movs	r3, #128	; 0x80
 80099d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099da:	e13c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a41      	ldr	r2, [pc, #260]	; (8009ae8 <UART_SetConfig+0x640>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	f040 8082 	bne.w	8009aec <UART_SetConfig+0x644>
 80099e8:	4b3c      	ldr	r3, [pc, #240]	; (8009adc <UART_SetConfig+0x634>)
 80099ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099f0:	2b28      	cmp	r3, #40	; 0x28
 80099f2:	d86d      	bhi.n	8009ad0 <UART_SetConfig+0x628>
 80099f4:	a201      	add	r2, pc, #4	; (adr r2, 80099fc <UART_SetConfig+0x554>)
 80099f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099fa:	bf00      	nop
 80099fc:	08009aa1 	.word	0x08009aa1
 8009a00:	08009ad1 	.word	0x08009ad1
 8009a04:	08009ad1 	.word	0x08009ad1
 8009a08:	08009ad1 	.word	0x08009ad1
 8009a0c:	08009ad1 	.word	0x08009ad1
 8009a10:	08009ad1 	.word	0x08009ad1
 8009a14:	08009ad1 	.word	0x08009ad1
 8009a18:	08009ad1 	.word	0x08009ad1
 8009a1c:	08009aa9 	.word	0x08009aa9
 8009a20:	08009ad1 	.word	0x08009ad1
 8009a24:	08009ad1 	.word	0x08009ad1
 8009a28:	08009ad1 	.word	0x08009ad1
 8009a2c:	08009ad1 	.word	0x08009ad1
 8009a30:	08009ad1 	.word	0x08009ad1
 8009a34:	08009ad1 	.word	0x08009ad1
 8009a38:	08009ad1 	.word	0x08009ad1
 8009a3c:	08009ab1 	.word	0x08009ab1
 8009a40:	08009ad1 	.word	0x08009ad1
 8009a44:	08009ad1 	.word	0x08009ad1
 8009a48:	08009ad1 	.word	0x08009ad1
 8009a4c:	08009ad1 	.word	0x08009ad1
 8009a50:	08009ad1 	.word	0x08009ad1
 8009a54:	08009ad1 	.word	0x08009ad1
 8009a58:	08009ad1 	.word	0x08009ad1
 8009a5c:	08009ab9 	.word	0x08009ab9
 8009a60:	08009ad1 	.word	0x08009ad1
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009ad1 	.word	0x08009ad1
 8009a6c:	08009ad1 	.word	0x08009ad1
 8009a70:	08009ad1 	.word	0x08009ad1
 8009a74:	08009ad1 	.word	0x08009ad1
 8009a78:	08009ad1 	.word	0x08009ad1
 8009a7c:	08009ac1 	.word	0x08009ac1
 8009a80:	08009ad1 	.word	0x08009ad1
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad1 	.word	0x08009ad1
 8009a8c:	08009ad1 	.word	0x08009ad1
 8009a90:	08009ad1 	.word	0x08009ad1
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009ac9 	.word	0x08009ac9
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e0d6      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009aa8:	2304      	movs	r3, #4
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e0d2      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e0ce      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ab8:	2310      	movs	r3, #16
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e0ca      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ac6:	e0c6      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ac8:	2340      	movs	r3, #64	; 0x40
 8009aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ace:	e0c2      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ad0:	2380      	movs	r3, #128	; 0x80
 8009ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ad6:	e0be      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009ad8:	40011400 	.word	0x40011400
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	40007800 	.word	0x40007800
 8009ae4:	40007c00 	.word	0x40007c00
 8009ae8:	40011800 	.word	0x40011800
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4aad      	ldr	r2, [pc, #692]	; (8009da8 <UART_SetConfig+0x900>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d176      	bne.n	8009be4 <UART_SetConfig+0x73c>
 8009af6:	4bad      	ldr	r3, [pc, #692]	; (8009dac <UART_SetConfig+0x904>)
 8009af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009afe:	2b28      	cmp	r3, #40	; 0x28
 8009b00:	d86c      	bhi.n	8009bdc <UART_SetConfig+0x734>
 8009b02:	a201      	add	r2, pc, #4	; (adr r2, 8009b08 <UART_SetConfig+0x660>)
 8009b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b08:	08009bad 	.word	0x08009bad
 8009b0c:	08009bdd 	.word	0x08009bdd
 8009b10:	08009bdd 	.word	0x08009bdd
 8009b14:	08009bdd 	.word	0x08009bdd
 8009b18:	08009bdd 	.word	0x08009bdd
 8009b1c:	08009bdd 	.word	0x08009bdd
 8009b20:	08009bdd 	.word	0x08009bdd
 8009b24:	08009bdd 	.word	0x08009bdd
 8009b28:	08009bb5 	.word	0x08009bb5
 8009b2c:	08009bdd 	.word	0x08009bdd
 8009b30:	08009bdd 	.word	0x08009bdd
 8009b34:	08009bdd 	.word	0x08009bdd
 8009b38:	08009bdd 	.word	0x08009bdd
 8009b3c:	08009bdd 	.word	0x08009bdd
 8009b40:	08009bdd 	.word	0x08009bdd
 8009b44:	08009bdd 	.word	0x08009bdd
 8009b48:	08009bbd 	.word	0x08009bbd
 8009b4c:	08009bdd 	.word	0x08009bdd
 8009b50:	08009bdd 	.word	0x08009bdd
 8009b54:	08009bdd 	.word	0x08009bdd
 8009b58:	08009bdd 	.word	0x08009bdd
 8009b5c:	08009bdd 	.word	0x08009bdd
 8009b60:	08009bdd 	.word	0x08009bdd
 8009b64:	08009bdd 	.word	0x08009bdd
 8009b68:	08009bc5 	.word	0x08009bc5
 8009b6c:	08009bdd 	.word	0x08009bdd
 8009b70:	08009bdd 	.word	0x08009bdd
 8009b74:	08009bdd 	.word	0x08009bdd
 8009b78:	08009bdd 	.word	0x08009bdd
 8009b7c:	08009bdd 	.word	0x08009bdd
 8009b80:	08009bdd 	.word	0x08009bdd
 8009b84:	08009bdd 	.word	0x08009bdd
 8009b88:	08009bcd 	.word	0x08009bcd
 8009b8c:	08009bdd 	.word	0x08009bdd
 8009b90:	08009bdd 	.word	0x08009bdd
 8009b94:	08009bdd 	.word	0x08009bdd
 8009b98:	08009bdd 	.word	0x08009bdd
 8009b9c:	08009bdd 	.word	0x08009bdd
 8009ba0:	08009bdd 	.word	0x08009bdd
 8009ba4:	08009bdd 	.word	0x08009bdd
 8009ba8:	08009bd5 	.word	0x08009bd5
 8009bac:	2301      	movs	r3, #1
 8009bae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bb2:	e050      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bb4:	2304      	movs	r3, #4
 8009bb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bba:	e04c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bbc:	2308      	movs	r3, #8
 8009bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bc2:	e048      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bc4:	2310      	movs	r3, #16
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e044      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bcc:	2320      	movs	r3, #32
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e040      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bd4:	2340      	movs	r3, #64	; 0x40
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e03c      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009bdc:	2380      	movs	r3, #128	; 0x80
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e038      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a71      	ldr	r2, [pc, #452]	; (8009db0 <UART_SetConfig+0x908>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d130      	bne.n	8009c50 <UART_SetConfig+0x7a8>
 8009bee:	4b6f      	ldr	r3, [pc, #444]	; (8009dac <UART_SetConfig+0x904>)
 8009bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bf2:	f003 0307 	and.w	r3, r3, #7
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d826      	bhi.n	8009c48 <UART_SetConfig+0x7a0>
 8009bfa:	a201      	add	r2, pc, #4	; (adr r2, 8009c00 <UART_SetConfig+0x758>)
 8009bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c00:	08009c19 	.word	0x08009c19
 8009c04:	08009c21 	.word	0x08009c21
 8009c08:	08009c29 	.word	0x08009c29
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c39 	.word	0x08009c39
 8009c14:	08009c41 	.word	0x08009c41
 8009c18:	2302      	movs	r3, #2
 8009c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c1e:	e01a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c20:	2304      	movs	r3, #4
 8009c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c26:	e016      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c28:	2308      	movs	r3, #8
 8009c2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c2e:	e012      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c30:	2310      	movs	r3, #16
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e00e      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c38:	2320      	movs	r3, #32
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e00a      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c40:	2340      	movs	r3, #64	; 0x40
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e006      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c48:	2380      	movs	r3, #128	; 0x80
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e002      	b.n	8009c56 <UART_SetConfig+0x7ae>
 8009c50:	2380      	movs	r3, #128	; 0x80
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	4a55      	ldr	r2, [pc, #340]	; (8009db0 <UART_SetConfig+0x908>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	f040 80f8 	bne.w	8009e52 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c62:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	dc46      	bgt.n	8009cf8 <UART_SetConfig+0x850>
 8009c6a:	2b02      	cmp	r3, #2
 8009c6c:	db75      	blt.n	8009d5a <UART_SetConfig+0x8b2>
 8009c6e:	3b02      	subs	r3, #2
 8009c70:	2b1e      	cmp	r3, #30
 8009c72:	d872      	bhi.n	8009d5a <UART_SetConfig+0x8b2>
 8009c74:	a201      	add	r2, pc, #4	; (adr r2, 8009c7c <UART_SetConfig+0x7d4>)
 8009c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c7a:	bf00      	nop
 8009c7c:	08009cff 	.word	0x08009cff
 8009c80:	08009d5b 	.word	0x08009d5b
 8009c84:	08009d07 	.word	0x08009d07
 8009c88:	08009d5b 	.word	0x08009d5b
 8009c8c:	08009d5b 	.word	0x08009d5b
 8009c90:	08009d5b 	.word	0x08009d5b
 8009c94:	08009d17 	.word	0x08009d17
 8009c98:	08009d5b 	.word	0x08009d5b
 8009c9c:	08009d5b 	.word	0x08009d5b
 8009ca0:	08009d5b 	.word	0x08009d5b
 8009ca4:	08009d5b 	.word	0x08009d5b
 8009ca8:	08009d5b 	.word	0x08009d5b
 8009cac:	08009d5b 	.word	0x08009d5b
 8009cb0:	08009d5b 	.word	0x08009d5b
 8009cb4:	08009d27 	.word	0x08009d27
 8009cb8:	08009d5b 	.word	0x08009d5b
 8009cbc:	08009d5b 	.word	0x08009d5b
 8009cc0:	08009d5b 	.word	0x08009d5b
 8009cc4:	08009d5b 	.word	0x08009d5b
 8009cc8:	08009d5b 	.word	0x08009d5b
 8009ccc:	08009d5b 	.word	0x08009d5b
 8009cd0:	08009d5b 	.word	0x08009d5b
 8009cd4:	08009d5b 	.word	0x08009d5b
 8009cd8:	08009d5b 	.word	0x08009d5b
 8009cdc:	08009d5b 	.word	0x08009d5b
 8009ce0:	08009d5b 	.word	0x08009d5b
 8009ce4:	08009d5b 	.word	0x08009d5b
 8009ce8:	08009d5b 	.word	0x08009d5b
 8009cec:	08009d5b 	.word	0x08009d5b
 8009cf0:	08009d5b 	.word	0x08009d5b
 8009cf4:	08009d4d 	.word	0x08009d4d
 8009cf8:	2b40      	cmp	r3, #64	; 0x40
 8009cfa:	d02a      	beq.n	8009d52 <UART_SetConfig+0x8aa>
 8009cfc:	e02d      	b.n	8009d5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cfe:	f7fd fb3d 	bl	800737c <HAL_RCCEx_GetD3PCLK1Freq>
 8009d02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009d04:	e02f      	b.n	8009d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7fd fb4c 	bl	80073a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d14:	e027      	b.n	8009d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d16:	f107 0318 	add.w	r3, r7, #24
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f7fd fc98 	bl	8007650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d24:	e01f      	b.n	8009d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d26:	4b21      	ldr	r3, [pc, #132]	; (8009dac <UART_SetConfig+0x904>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f003 0320 	and.w	r3, r3, #32
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d32:	4b1e      	ldr	r3, [pc, #120]	; (8009dac <UART_SetConfig+0x904>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	08db      	lsrs	r3, r3, #3
 8009d38:	f003 0303 	and.w	r3, r3, #3
 8009d3c:	4a1d      	ldr	r2, [pc, #116]	; (8009db4 <UART_SetConfig+0x90c>)
 8009d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d44:	e00f      	b.n	8009d66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009d46:	4b1b      	ldr	r3, [pc, #108]	; (8009db4 <UART_SetConfig+0x90c>)
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d4a:	e00c      	b.n	8009d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d4c:	4b1a      	ldr	r3, [pc, #104]	; (8009db8 <UART_SetConfig+0x910>)
 8009d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d50:	e009      	b.n	8009d66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d58:	e005      	b.n	8009d66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 81ee 	beq.w	800a14a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	4a12      	ldr	r2, [pc, #72]	; (8009dbc <UART_SetConfig+0x914>)
 8009d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d80:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	4613      	mov	r3, r2
 8009d88:	005b      	lsls	r3, r3, #1
 8009d8a:	4413      	add	r3, r2
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d305      	bcc.n	8009d9e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d910      	bls.n	8009dc0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009da4:	e1d1      	b.n	800a14a <UART_SetConfig+0xca2>
 8009da6:	bf00      	nop
 8009da8:	40011c00 	.word	0x40011c00
 8009dac:	58024400 	.word	0x58024400
 8009db0:	58000c00 	.word	0x58000c00
 8009db4:	03d09000 	.word	0x03d09000
 8009db8:	003d0900 	.word	0x003d0900
 8009dbc:	0800bad4 	.word	0x0800bad4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	60bb      	str	r3, [r7, #8]
 8009dc6:	60fa      	str	r2, [r7, #12]
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dcc:	4ac0      	ldr	r2, [pc, #768]	; (800a0d0 <UART_SetConfig+0xc28>)
 8009dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009de2:	f7f6 fae5 	bl	80003b0 <__aeabi_uldivmod>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4610      	mov	r0, r2
 8009dec:	4619      	mov	r1, r3
 8009dee:	f04f 0200 	mov.w	r2, #0
 8009df2:	f04f 0300 	mov.w	r3, #0
 8009df6:	020b      	lsls	r3, r1, #8
 8009df8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dfc:	0202      	lsls	r2, r0, #8
 8009dfe:	6979      	ldr	r1, [r7, #20]
 8009e00:	6849      	ldr	r1, [r1, #4]
 8009e02:	0849      	lsrs	r1, r1, #1
 8009e04:	2000      	movs	r0, #0
 8009e06:	460c      	mov	r4, r1
 8009e08:	4605      	mov	r5, r0
 8009e0a:	eb12 0804 	adds.w	r8, r2, r4
 8009e0e:	eb43 0905 	adc.w	r9, r3, r5
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	469a      	mov	sl, r3
 8009e1a:	4693      	mov	fp, r2
 8009e1c:	4652      	mov	r2, sl
 8009e1e:	465b      	mov	r3, fp
 8009e20:	4640      	mov	r0, r8
 8009e22:	4649      	mov	r1, r9
 8009e24:	f7f6 fac4 	bl	80003b0 <__aeabi_uldivmod>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	460b      	mov	r3, r1
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e36:	d308      	bcc.n	8009e4a <UART_SetConfig+0x9a2>
 8009e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e3e:	d204      	bcs.n	8009e4a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e46:	60da      	str	r2, [r3, #12]
 8009e48:	e17f      	b.n	800a14a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009e50:	e17b      	b.n	800a14a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e5a:	f040 80bd 	bne.w	8009fd8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8009e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009e62:	2b20      	cmp	r3, #32
 8009e64:	dc48      	bgt.n	8009ef8 <UART_SetConfig+0xa50>
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	db7b      	blt.n	8009f62 <UART_SetConfig+0xaba>
 8009e6a:	2b20      	cmp	r3, #32
 8009e6c:	d879      	bhi.n	8009f62 <UART_SetConfig+0xaba>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <UART_SetConfig+0x9cc>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009eff 	.word	0x08009eff
 8009e78:	08009f07 	.word	0x08009f07
 8009e7c:	08009f63 	.word	0x08009f63
 8009e80:	08009f63 	.word	0x08009f63
 8009e84:	08009f0f 	.word	0x08009f0f
 8009e88:	08009f63 	.word	0x08009f63
 8009e8c:	08009f63 	.word	0x08009f63
 8009e90:	08009f63 	.word	0x08009f63
 8009e94:	08009f1f 	.word	0x08009f1f
 8009e98:	08009f63 	.word	0x08009f63
 8009e9c:	08009f63 	.word	0x08009f63
 8009ea0:	08009f63 	.word	0x08009f63
 8009ea4:	08009f63 	.word	0x08009f63
 8009ea8:	08009f63 	.word	0x08009f63
 8009eac:	08009f63 	.word	0x08009f63
 8009eb0:	08009f63 	.word	0x08009f63
 8009eb4:	08009f2f 	.word	0x08009f2f
 8009eb8:	08009f63 	.word	0x08009f63
 8009ebc:	08009f63 	.word	0x08009f63
 8009ec0:	08009f63 	.word	0x08009f63
 8009ec4:	08009f63 	.word	0x08009f63
 8009ec8:	08009f63 	.word	0x08009f63
 8009ecc:	08009f63 	.word	0x08009f63
 8009ed0:	08009f63 	.word	0x08009f63
 8009ed4:	08009f63 	.word	0x08009f63
 8009ed8:	08009f63 	.word	0x08009f63
 8009edc:	08009f63 	.word	0x08009f63
 8009ee0:	08009f63 	.word	0x08009f63
 8009ee4:	08009f63 	.word	0x08009f63
 8009ee8:	08009f63 	.word	0x08009f63
 8009eec:	08009f63 	.word	0x08009f63
 8009ef0:	08009f63 	.word	0x08009f63
 8009ef4:	08009f55 	.word	0x08009f55
 8009ef8:	2b40      	cmp	r3, #64	; 0x40
 8009efa:	d02e      	beq.n	8009f5a <UART_SetConfig+0xab2>
 8009efc:	e031      	b.n	8009f62 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009efe:	f7fc f871 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 8009f02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f04:	e033      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f06:	f7fc f883 	bl	8006010 <HAL_RCC_GetPCLK2Freq>
 8009f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f0c:	e02f      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7fd fa48 	bl	80073a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f1c:	e027      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f1e:	f107 0318 	add.w	r3, r7, #24
 8009f22:	4618      	mov	r0, r3
 8009f24:	f7fd fb94 	bl	8007650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f2c:	e01f      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f2e:	4b69      	ldr	r3, [pc, #420]	; (800a0d4 <UART_SetConfig+0xc2c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0320 	and.w	r3, r3, #32
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d009      	beq.n	8009f4e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f3a:	4b66      	ldr	r3, [pc, #408]	; (800a0d4 <UART_SetConfig+0xc2c>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	08db      	lsrs	r3, r3, #3
 8009f40:	f003 0303 	and.w	r3, r3, #3
 8009f44:	4a64      	ldr	r2, [pc, #400]	; (800a0d8 <UART_SetConfig+0xc30>)
 8009f46:	fa22 f303 	lsr.w	r3, r2, r3
 8009f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f4c:	e00f      	b.n	8009f6e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8009f4e:	4b62      	ldr	r3, [pc, #392]	; (800a0d8 <UART_SetConfig+0xc30>)
 8009f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f52:	e00c      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f54:	4b61      	ldr	r3, [pc, #388]	; (800a0dc <UART_SetConfig+0xc34>)
 8009f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f58:	e009      	b.n	8009f6e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f60:	e005      	b.n	8009f6e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8009f62:	2300      	movs	r3, #0
 8009f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	f000 80ea 	beq.w	800a14a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f7a:	4a55      	ldr	r2, [pc, #340]	; (800a0d0 <UART_SetConfig+0xc28>)
 8009f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f80:	461a      	mov	r2, r3
 8009f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f88:	005a      	lsls	r2, r3, #1
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	085b      	lsrs	r3, r3, #1
 8009f90:	441a      	add	r2, r3
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f9a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	2b0f      	cmp	r3, #15
 8009fa0:	d916      	bls.n	8009fd0 <UART_SetConfig+0xb28>
 8009fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fa8:	d212      	bcs.n	8009fd0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fac:	b29b      	uxth	r3, r3
 8009fae:	f023 030f 	bic.w	r3, r3, #15
 8009fb2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fb6:	085b      	lsrs	r3, r3, #1
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009fcc:	60da      	str	r2, [r3, #12]
 8009fce:	e0bc      	b.n	800a14a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009fd6:	e0b8      	b.n	800a14a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fd8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009fdc:	2b20      	cmp	r3, #32
 8009fde:	dc4b      	bgt.n	800a078 <UART_SetConfig+0xbd0>
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	f2c0 8087 	blt.w	800a0f4 <UART_SetConfig+0xc4c>
 8009fe6:	2b20      	cmp	r3, #32
 8009fe8:	f200 8084 	bhi.w	800a0f4 <UART_SetConfig+0xc4c>
 8009fec:	a201      	add	r2, pc, #4	; (adr r2, 8009ff4 <UART_SetConfig+0xb4c>)
 8009fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff2:	bf00      	nop
 8009ff4:	0800a07f 	.word	0x0800a07f
 8009ff8:	0800a087 	.word	0x0800a087
 8009ffc:	0800a0f5 	.word	0x0800a0f5
 800a000:	0800a0f5 	.word	0x0800a0f5
 800a004:	0800a08f 	.word	0x0800a08f
 800a008:	0800a0f5 	.word	0x0800a0f5
 800a00c:	0800a0f5 	.word	0x0800a0f5
 800a010:	0800a0f5 	.word	0x0800a0f5
 800a014:	0800a09f 	.word	0x0800a09f
 800a018:	0800a0f5 	.word	0x0800a0f5
 800a01c:	0800a0f5 	.word	0x0800a0f5
 800a020:	0800a0f5 	.word	0x0800a0f5
 800a024:	0800a0f5 	.word	0x0800a0f5
 800a028:	0800a0f5 	.word	0x0800a0f5
 800a02c:	0800a0f5 	.word	0x0800a0f5
 800a030:	0800a0f5 	.word	0x0800a0f5
 800a034:	0800a0af 	.word	0x0800a0af
 800a038:	0800a0f5 	.word	0x0800a0f5
 800a03c:	0800a0f5 	.word	0x0800a0f5
 800a040:	0800a0f5 	.word	0x0800a0f5
 800a044:	0800a0f5 	.word	0x0800a0f5
 800a048:	0800a0f5 	.word	0x0800a0f5
 800a04c:	0800a0f5 	.word	0x0800a0f5
 800a050:	0800a0f5 	.word	0x0800a0f5
 800a054:	0800a0f5 	.word	0x0800a0f5
 800a058:	0800a0f5 	.word	0x0800a0f5
 800a05c:	0800a0f5 	.word	0x0800a0f5
 800a060:	0800a0f5 	.word	0x0800a0f5
 800a064:	0800a0f5 	.word	0x0800a0f5
 800a068:	0800a0f5 	.word	0x0800a0f5
 800a06c:	0800a0f5 	.word	0x0800a0f5
 800a070:	0800a0f5 	.word	0x0800a0f5
 800a074:	0800a0e7 	.word	0x0800a0e7
 800a078:	2b40      	cmp	r3, #64	; 0x40
 800a07a:	d037      	beq.n	800a0ec <UART_SetConfig+0xc44>
 800a07c:	e03a      	b.n	800a0f4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a07e:	f7fb ffb1 	bl	8005fe4 <HAL_RCC_GetPCLK1Freq>
 800a082:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a084:	e03c      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a086:	f7fb ffc3 	bl	8006010 <HAL_RCC_GetPCLK2Freq>
 800a08a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a08c:	e038      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a08e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a092:	4618      	mov	r0, r3
 800a094:	f7fd f988 	bl	80073a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a09c:	e030      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a09e:	f107 0318 	add.w	r3, r7, #24
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7fd fad4 	bl	8007650 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ac:	e028      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <UART_SetConfig+0xc2c>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f003 0320 	and.w	r3, r3, #32
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d012      	beq.n	800a0e0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a0ba:	4b06      	ldr	r3, [pc, #24]	; (800a0d4 <UART_SetConfig+0xc2c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	08db      	lsrs	r3, r3, #3
 800a0c0:	f003 0303 	and.w	r3, r3, #3
 800a0c4:	4a04      	ldr	r2, [pc, #16]	; (800a0d8 <UART_SetConfig+0xc30>)
 800a0c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a0cc:	e018      	b.n	800a100 <UART_SetConfig+0xc58>
 800a0ce:	bf00      	nop
 800a0d0:	0800bad4 	.word	0x0800bad4
 800a0d4:	58024400 	.word	0x58024400
 800a0d8:	03d09000 	.word	0x03d09000
 800a0dc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800a0e0:	4b24      	ldr	r3, [pc, #144]	; (800a174 <UART_SetConfig+0xccc>)
 800a0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0e4:	e00c      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0e6:	4b24      	ldr	r3, [pc, #144]	; (800a178 <UART_SetConfig+0xcd0>)
 800a0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0ea:	e009      	b.n	800a100 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0f2:	e005      	b.n	800a100 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a0fe:	bf00      	nop
    }

    if (pclk != 0U)
 800a100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a102:	2b00      	cmp	r3, #0
 800a104:	d021      	beq.n	800a14a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10a:	4a1c      	ldr	r2, [pc, #112]	; (800a17c <UART_SetConfig+0xcd4>)
 800a10c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a110:	461a      	mov	r2, r3
 800a112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a114:	fbb3 f2f2 	udiv	r2, r3, r2
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	441a      	add	r2, r3
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	fbb2 f3f3 	udiv	r3, r2, r3
 800a128:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a12c:	2b0f      	cmp	r3, #15
 800a12e:	d909      	bls.n	800a144 <UART_SetConfig+0xc9c>
 800a130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a136:	d205      	bcs.n	800a144 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a13a:	b29a      	uxth	r2, r3
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	60da      	str	r2, [r3, #12]
 800a142:	e002      	b.n	800a14a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	2201      	movs	r2, #1
 800a156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	2200      	movs	r2, #0
 800a15e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2200      	movs	r2, #0
 800a164:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a166:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3748      	adds	r7, #72	; 0x48
 800a16e:	46bd      	mov	sp, r7
 800a170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a174:	03d09000 	.word	0x03d09000
 800a178:	003d0900 	.word	0x003d0900
 800a17c:	0800bad4 	.word	0x0800bad4

0800a180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00a      	beq.n	800a1aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	430a      	orrs	r2, r1
 800a1a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ae:	f003 0302 	and.w	r3, r3, #2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d0:	f003 0304 	and.w	r3, r3, #4
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00a      	beq.n	800a1ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	430a      	orrs	r2, r1
 800a1ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d00a      	beq.n	800a210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	430a      	orrs	r2, r1
 800a20e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f003 0310 	and.w	r3, r3, #16
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00a      	beq.n	800a232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a236:	f003 0320 	and.w	r3, r3, #32
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d00a      	beq.n	800a254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	430a      	orrs	r2, r1
 800a252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d01a      	beq.n	800a296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	685b      	ldr	r3, [r3, #4]
 800a266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	430a      	orrs	r2, r1
 800a274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a27e:	d10a      	bne.n	800a296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d00a      	beq.n	800a2b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	430a      	orrs	r2, r1
 800a2b6:	605a      	str	r2, [r3, #4]
  }
}
 800a2b8:	bf00      	nop
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b098      	sub	sp, #96	; 0x60
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2d4:	f7f7 f9a0 	bl	8001618 <HAL_GetTick>
 800a2d8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b08      	cmp	r3, #8
 800a2e6:	d12f      	bne.n	800a348 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2ec:	9300      	str	r3, [sp, #0]
 800a2ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f88e 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d022      	beq.n	800a348 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a30a:	e853 3f00 	ldrex	r3, [r3]
 800a30e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a312:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a316:	653b      	str	r3, [r7, #80]	; 0x50
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	461a      	mov	r2, r3
 800a31e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a320:	647b      	str	r3, [r7, #68]	; 0x44
 800a322:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a328:	e841 2300 	strex	r3, r2, [r1]
 800a32c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a330:	2b00      	cmp	r3, #0
 800a332:	d1e6      	bne.n	800a302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2220      	movs	r2, #32
 800a338:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2200      	movs	r2, #0
 800a340:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a344:	2303      	movs	r3, #3
 800a346:	e063      	b.n	800a410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 0304 	and.w	r3, r3, #4
 800a352:	2b04      	cmp	r3, #4
 800a354:	d149      	bne.n	800a3ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a35e:	2200      	movs	r2, #0
 800a360:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f857 	bl	800a418 <UART_WaitOnFlagUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d03c      	beq.n	800a3ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a378:	e853 3f00 	ldrex	r3, [r3]
 800a37c:	623b      	str	r3, [r7, #32]
   return(result);
 800a37e:	6a3b      	ldr	r3, [r7, #32]
 800a380:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a384:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a38e:	633b      	str	r3, [r7, #48]	; 0x30
 800a390:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a396:	e841 2300 	strex	r3, r2, [r1]
 800a39a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1e6      	bne.n	800a370 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	3308      	adds	r3, #8
 800a3a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	e853 3f00 	ldrex	r3, [r3]
 800a3b0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f023 0301 	bic.w	r3, r3, #1
 800a3b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	3308      	adds	r3, #8
 800a3c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3c2:	61fa      	str	r2, [r7, #28]
 800a3c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c6:	69b9      	ldr	r1, [r7, #24]
 800a3c8:	69fa      	ldr	r2, [r7, #28]
 800a3ca:	e841 2300 	strex	r3, r2, [r1]
 800a3ce:	617b      	str	r3, [r7, #20]
   return(result);
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1e5      	bne.n	800a3a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2220      	movs	r2, #32
 800a3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e012      	b.n	800a410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2220      	movs	r2, #32
 800a3ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2220      	movs	r2, #32
 800a3f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3758      	adds	r7, #88	; 0x58
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	60f8      	str	r0, [r7, #12]
 800a420:	60b9      	str	r1, [r7, #8]
 800a422:	603b      	str	r3, [r7, #0]
 800a424:	4613      	mov	r3, r2
 800a426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a428:	e049      	b.n	800a4be <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a430:	d045      	beq.n	800a4be <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a432:	f7f7 f8f1 	bl	8001618 <HAL_GetTick>
 800a436:	4602      	mov	r2, r0
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	1ad3      	subs	r3, r2, r3
 800a43c:	69ba      	ldr	r2, [r7, #24]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d302      	bcc.n	800a448 <UART_WaitOnFlagUntilTimeout+0x30>
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a448:	2303      	movs	r3, #3
 800a44a:	e048      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	d031      	beq.n	800a4be <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69db      	ldr	r3, [r3, #28]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b08      	cmp	r3, #8
 800a466:	d110      	bne.n	800a48a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	2208      	movs	r2, #8
 800a46e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 f921 	bl	800a6b8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2208      	movs	r2, #8
 800a47a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800a486:	2301      	movs	r3, #1
 800a488:	e029      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	69db      	ldr	r3, [r3, #28]
 800a490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a494:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a498:	d111      	bne.n	800a4be <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a4a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f000 f907 	bl	800a6b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e00f      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	69da      	ldr	r2, [r3, #28]
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	68ba      	ldr	r2, [r7, #8]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	bf0c      	ite	eq
 800a4ce:	2301      	moveq	r3, #1
 800a4d0:	2300      	movne	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	79fb      	ldrb	r3, [r7, #7]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d0a6      	beq.n	800a42a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b096      	sub	sp, #88	; 0x58
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	4613      	mov	r3, r2
 800a4f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	68ba      	ldr	r2, [r7, #8]
 800a4fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	88fa      	ldrh	r2, [r7, #6]
 800a500:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	2200      	movs	r2, #0
 800a508:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	2222      	movs	r2, #34	; 0x22
 800a510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d02d      	beq.n	800a57a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a524:	4a40      	ldr	r2, [pc, #256]	; (800a628 <UART_Start_Receive_DMA+0x140>)
 800a526:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a52e:	4a3f      	ldr	r2, [pc, #252]	; (800a62c <UART_Start_Receive_DMA+0x144>)
 800a530:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a538:	4a3d      	ldr	r2, [pc, #244]	; (800a630 <UART_Start_Receive_DMA+0x148>)
 800a53a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a542:	2200      	movs	r2, #0
 800a544:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	3324      	adds	r3, #36	; 0x24
 800a552:	4619      	mov	r1, r3
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a558:	461a      	mov	r2, r3
 800a55a:	88fb      	ldrh	r3, [r7, #6]
 800a55c:	f7f7 fd08 	bl	8001f70 <HAL_DMA_Start_IT>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d009      	beq.n	800a57a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2210      	movs	r2, #16
 800a56a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2220      	movs	r2, #32
 800a572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800a576:	2301      	movs	r3, #1
 800a578:	e051      	b.n	800a61e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d018      	beq.n	800a5b4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a58a:	e853 3f00 	ldrex	r3, [r3]
 800a58e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a596:	657b      	str	r3, [r7, #84]	; 0x54
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5a2:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5a4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5a8:	e841 2300 	strex	r3, r2, [r1]
 800a5ac:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d1e6      	bne.n	800a582 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	3308      	adds	r3, #8
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	e853 3f00 	ldrex	r3, [r3]
 800a5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c6:	f043 0301 	orr.w	r3, r3, #1
 800a5ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a5d4:	637a      	str	r2, [r7, #52]	; 0x34
 800a5d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5dc:	e841 2300 	strex	r3, r2, [r1]
 800a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d1e5      	bne.n	800a5b4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a608:	623a      	str	r2, [r7, #32]
 800a60a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	69f9      	ldr	r1, [r7, #28]
 800a60e:	6a3a      	ldr	r2, [r7, #32]
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	61bb      	str	r3, [r7, #24]
   return(result);
 800a616:	69bb      	ldr	r3, [r7, #24]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e5      	bne.n	800a5e8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3758      	adds	r7, #88	; 0x58
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	0800a785 	.word	0x0800a785
 800a62c:	0800a8ad 	.word	0x0800a8ad
 800a630:	0800a8eb 	.word	0x0800a8eb

0800a634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a634:	b480      	push	{r7}
 800a636:	b08f      	sub	sp, #60	; 0x3c
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a642:	6a3b      	ldr	r3, [r7, #32]
 800a644:	e853 3f00 	ldrex	r3, [r3]
 800a648:	61fb      	str	r3, [r7, #28]
   return(result);
 800a64a:	69fb      	ldr	r3, [r7, #28]
 800a64c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a650:	637b      	str	r3, [r7, #52]	; 0x34
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a65a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a65c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a65e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a662:	e841 2300 	strex	r3, r2, [r1]
 800a666:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d1e6      	bne.n	800a63c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	3308      	adds	r3, #8
 800a674:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a684:	633b      	str	r3, [r7, #48]	; 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	3308      	adds	r3, #8
 800a68c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a68e:	61ba      	str	r2, [r7, #24]
 800a690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	6979      	ldr	r1, [r7, #20]
 800a694:	69ba      	ldr	r2, [r7, #24]
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	613b      	str	r3, [r7, #16]
   return(result);
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e5      	bne.n	800a66e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2220      	movs	r2, #32
 800a6a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a6aa:	bf00      	nop
 800a6ac:	373c      	adds	r7, #60	; 0x3c
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr
	...

0800a6b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b095      	sub	sp, #84	; 0x54
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6de:	643b      	str	r3, [r7, #64]	; 0x40
 800a6e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e6      	bne.n	800a6c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	61fb      	str	r3, [r7, #28]
   return(result);
 800a702:	69fa      	ldr	r2, [r7, #28]
 800a704:	4b1e      	ldr	r3, [pc, #120]	; (800a780 <UART_EndRxTransfer+0xc8>)
 800a706:	4013      	ands	r3, r2
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a712:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d118      	bne.n	800a760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f023 0310 	bic.w	r3, r3, #16
 800a742:	647b      	str	r3, [r7, #68]	; 0x44
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	613b      	str	r3, [r7, #16]
   return(result);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e6      	bne.n	800a72e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2200      	movs	r2, #0
 800a76c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a774:	bf00      	nop
 800a776:	3754      	adds	r7, #84	; 0x54
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	effffffe 	.word	0xeffffffe

0800a784 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b09c      	sub	sp, #112	; 0x70
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69db      	ldr	r3, [r3, #28]
 800a796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a79a:	d071      	beq.n	800a880 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a79c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a7a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a7b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a7c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e6      	bne.n	800a7a4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3308      	adds	r3, #8
 800a7dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e8:	f023 0301 	bic.w	r3, r3, #1
 800a7ec:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	3308      	adds	r3, #8
 800a7f4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7f6:	647a      	str	r2, [r7, #68]	; 0x44
 800a7f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a7fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e5      	bne.n	800a7d6 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a80a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	623b      	str	r3, [r7, #32]
   return(result);
 800a81a:	6a3b      	ldr	r3, [r7, #32]
 800a81c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a820:	663b      	str	r3, [r7, #96]	; 0x60
 800a822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a82a:	633a      	str	r2, [r7, #48]	; 0x30
 800a82c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e5      	bne.n	800a80a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a840:	2220      	movs	r2, #32
 800a842:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a848:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d118      	bne.n	800a880 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a84e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	e853 3f00 	ldrex	r3, [r3]
 800a85a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0310 	bic.w	r3, r3, #16
 800a862:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a86c:	61fb      	str	r3, [r7, #28]
 800a86e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a870:	69b9      	ldr	r1, [r7, #24]
 800a872:	69fa      	ldr	r2, [r7, #28]
 800a874:	e841 2300 	strex	r3, r2, [r1]
 800a878:	617b      	str	r3, [r7, #20]
   return(result);
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e6      	bne.n	800a84e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a880:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a882:	2200      	movs	r2, #0
 800a884:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a886:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a888:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d107      	bne.n	800a89e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a88e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a894:	4619      	mov	r1, r3
 800a896:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a898:	f7fe fdfa 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a89c:	e002      	b.n	800a8a4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800a89e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8a0:	f7f6 fa5e 	bl	8000d60 <HAL_UART_RxCpltCallback>
}
 800a8a4:	bf00      	nop
 800a8a6:	3770      	adds	r7, #112	; 0x70
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d109      	bne.n	800a8dc <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a8ce:	085b      	lsrs	r3, r3, #1
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	68f8      	ldr	r0, [r7, #12]
 800a8d6:	f7fe fddb 	bl	8009490 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a8da:	e002      	b.n	800a8e2 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f7fe fdc3 	bl	8009468 <HAL_UART_RxHalfCpltCallback>
}
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}

0800a8ea <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b086      	sub	sp, #24
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fe:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a906:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	689b      	ldr	r3, [r3, #8]
 800a90e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a912:	2b80      	cmp	r3, #128	; 0x80
 800a914:	d109      	bne.n	800a92a <UART_DMAError+0x40>
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b21      	cmp	r3, #33	; 0x21
 800a91a:	d106      	bne.n	800a92a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	2200      	movs	r2, #0
 800a920:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a924:	6978      	ldr	r0, [r7, #20]
 800a926:	f7ff fe85 	bl	800a634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a934:	2b40      	cmp	r3, #64	; 0x40
 800a936:	d109      	bne.n	800a94c <UART_DMAError+0x62>
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2b22      	cmp	r3, #34	; 0x22
 800a93c:	d106      	bne.n	800a94c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2200      	movs	r2, #0
 800a942:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a946:	6978      	ldr	r0, [r7, #20]
 800a948:	f7ff feb6 	bl	800a6b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a94c:	697b      	ldr	r3, [r7, #20]
 800a94e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a952:	f043 0210 	orr.w	r2, r3, #16
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a95c:	6978      	ldr	r0, [r7, #20]
 800a95e:	f7fe fd8d 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a962:	bf00      	nop
 800a964:	3718      	adds	r7, #24
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}

0800a96a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a96a:	b580      	push	{r7, lr}
 800a96c:	b084      	sub	sp, #16
 800a96e:	af00      	add	r7, sp, #0
 800a970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	2200      	movs	r2, #0
 800a984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a988:	68f8      	ldr	r0, [r7, #12]
 800a98a:	f7fe fd77 	bl	800947c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a98e:	bf00      	nop
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a996:	b580      	push	{r7, lr}
 800a998:	b088      	sub	sp, #32
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	e853 3f00 	ldrex	r3, [r3]
 800a9aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b2:	61fb      	str	r3, [r7, #28]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	61bb      	str	r3, [r7, #24]
 800a9be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	6979      	ldr	r1, [r7, #20]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	e841 2300 	strex	r3, r2, [r1]
 800a9c8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e6      	bne.n	800a99e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	2220      	movs	r2, #32
 800a9d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7fe fd38 	bl	8009454 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9e4:	bf00      	nop
 800a9e6:	3720      	adds	r7, #32
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}

0800a9ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a9f4:	bf00      	nop
 800a9f6:	370c      	adds	r7, #12
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr

0800aa00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aa08:	bf00      	nop
 800aa0a:	370c      	adds	r7, #12
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa12:	4770      	bx	lr

0800aa14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aa1c:	bf00      	nop
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d101      	bne.n	800aa3e <HAL_UARTEx_DisableFifoMode+0x16>
 800aa3a:	2302      	movs	r3, #2
 800aa3c:	e027      	b.n	800aa8e <HAL_UARTEx_DisableFifoMode+0x66>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2201      	movs	r2, #1
 800aa42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2224      	movs	r2, #36	; 0x24
 800aa4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f022 0201 	bic.w	r2, r2, #1
 800aa64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aa6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2220      	movs	r2, #32
 800aa80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800aa8c:	2300      	movs	r3, #0
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3714      	adds	r7, #20
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d101      	bne.n	800aab2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaae:	2302      	movs	r3, #2
 800aab0:	e02d      	b.n	800ab0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2201      	movs	r2, #1
 800aab6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2224      	movs	r2, #36	; 0x24
 800aabe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f022 0201 	bic.w	r2, r2, #1
 800aad8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	430a      	orrs	r2, r1
 800aaec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aaee:	6878      	ldr	r0, [r7, #4]
 800aaf0:	f000 f850 	bl	800ab94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2220      	movs	r2, #32
 800ab00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2200      	movs	r2, #0
 800ab08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab0c:	2300      	movs	r3, #0
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d101      	bne.n	800ab2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab2a:	2302      	movs	r3, #2
 800ab2c:	e02d      	b.n	800ab8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2201      	movs	r2, #1
 800ab32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2224      	movs	r2, #36	; 0x24
 800ab3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681a      	ldr	r2, [r3, #0]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	f022 0201 	bic.w	r2, r2, #1
 800ab54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	689b      	ldr	r3, [r3, #8]
 800ab5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 f812 	bl	800ab94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	68fa      	ldr	r2, [r7, #12]
 800ab76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2220      	movs	r2, #32
 800ab7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3710      	adds	r7, #16
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
	...

0800ab94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d108      	bne.n	800abb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abb4:	e031      	b.n	800ac1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abb6:	2310      	movs	r3, #16
 800abb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abba:	2310      	movs	r3, #16
 800abbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	0e5b      	lsrs	r3, r3, #25
 800abc6:	b2db      	uxtb	r3, r3
 800abc8:	f003 0307 	and.w	r3, r3, #7
 800abcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	0f5b      	lsrs	r3, r3, #29
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	f003 0307 	and.w	r3, r3, #7
 800abdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	7b3a      	ldrb	r2, [r7, #12]
 800abe2:	4911      	ldr	r1, [pc, #68]	; (800ac28 <UARTEx_SetNbDataToProcess+0x94>)
 800abe4:	5c8a      	ldrb	r2, [r1, r2]
 800abe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800abea:	7b3a      	ldrb	r2, [r7, #12]
 800abec:	490f      	ldr	r1, [pc, #60]	; (800ac2c <UARTEx_SetNbDataToProcess+0x98>)
 800abee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800abf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	7b7a      	ldrb	r2, [r7, #13]
 800ac00:	4909      	ldr	r1, [pc, #36]	; (800ac28 <UARTEx_SetNbDataToProcess+0x94>)
 800ac02:	5c8a      	ldrb	r2, [r1, r2]
 800ac04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac08:	7b7a      	ldrb	r2, [r7, #13]
 800ac0a:	4908      	ldr	r1, [pc, #32]	; (800ac2c <UARTEx_SetNbDataToProcess+0x98>)
 800ac0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac1a:	bf00      	nop
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop
 800ac28:	0800baec 	.word	0x0800baec
 800ac2c:	0800baf4 	.word	0x0800baf4

0800ac30 <std>:
 800ac30:	2300      	movs	r3, #0
 800ac32:	b510      	push	{r4, lr}
 800ac34:	4604      	mov	r4, r0
 800ac36:	e9c0 3300 	strd	r3, r3, [r0]
 800ac3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ac3e:	6083      	str	r3, [r0, #8]
 800ac40:	8181      	strh	r1, [r0, #12]
 800ac42:	6643      	str	r3, [r0, #100]	; 0x64
 800ac44:	81c2      	strh	r2, [r0, #14]
 800ac46:	6183      	str	r3, [r0, #24]
 800ac48:	4619      	mov	r1, r3
 800ac4a:	2208      	movs	r2, #8
 800ac4c:	305c      	adds	r0, #92	; 0x5c
 800ac4e:	f000 f906 	bl	800ae5e <memset>
 800ac52:	4b0d      	ldr	r3, [pc, #52]	; (800ac88 <std+0x58>)
 800ac54:	6263      	str	r3, [r4, #36]	; 0x24
 800ac56:	4b0d      	ldr	r3, [pc, #52]	; (800ac8c <std+0x5c>)
 800ac58:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac5a:	4b0d      	ldr	r3, [pc, #52]	; (800ac90 <std+0x60>)
 800ac5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac5e:	4b0d      	ldr	r3, [pc, #52]	; (800ac94 <std+0x64>)
 800ac60:	6323      	str	r3, [r4, #48]	; 0x30
 800ac62:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <std+0x68>)
 800ac64:	6224      	str	r4, [r4, #32]
 800ac66:	429c      	cmp	r4, r3
 800ac68:	d006      	beq.n	800ac78 <std+0x48>
 800ac6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ac6e:	4294      	cmp	r4, r2
 800ac70:	d002      	beq.n	800ac78 <std+0x48>
 800ac72:	33d0      	adds	r3, #208	; 0xd0
 800ac74:	429c      	cmp	r4, r3
 800ac76:	d105      	bne.n	800ac84 <std+0x54>
 800ac78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac80:	f000 b966 	b.w	800af50 <__retarget_lock_init_recursive>
 800ac84:	bd10      	pop	{r4, pc}
 800ac86:	bf00      	nop
 800ac88:	0800add9 	.word	0x0800add9
 800ac8c:	0800adfb 	.word	0x0800adfb
 800ac90:	0800ae33 	.word	0x0800ae33
 800ac94:	0800ae57 	.word	0x0800ae57
 800ac98:	2400045c 	.word	0x2400045c

0800ac9c <stdio_exit_handler>:
 800ac9c:	4a02      	ldr	r2, [pc, #8]	; (800aca8 <stdio_exit_handler+0xc>)
 800ac9e:	4903      	ldr	r1, [pc, #12]	; (800acac <stdio_exit_handler+0x10>)
 800aca0:	4803      	ldr	r0, [pc, #12]	; (800acb0 <stdio_exit_handler+0x14>)
 800aca2:	f000 b869 	b.w	800ad78 <_fwalk_sglue>
 800aca6:	bf00      	nop
 800aca8:	24000010 	.word	0x24000010
 800acac:	0800b7fd 	.word	0x0800b7fd
 800acb0:	2400001c 	.word	0x2400001c

0800acb4 <cleanup_stdio>:
 800acb4:	6841      	ldr	r1, [r0, #4]
 800acb6:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <cleanup_stdio+0x34>)
 800acb8:	4299      	cmp	r1, r3
 800acba:	b510      	push	{r4, lr}
 800acbc:	4604      	mov	r4, r0
 800acbe:	d001      	beq.n	800acc4 <cleanup_stdio+0x10>
 800acc0:	f000 fd9c 	bl	800b7fc <_fflush_r>
 800acc4:	68a1      	ldr	r1, [r4, #8]
 800acc6:	4b09      	ldr	r3, [pc, #36]	; (800acec <cleanup_stdio+0x38>)
 800acc8:	4299      	cmp	r1, r3
 800acca:	d002      	beq.n	800acd2 <cleanup_stdio+0x1e>
 800accc:	4620      	mov	r0, r4
 800acce:	f000 fd95 	bl	800b7fc <_fflush_r>
 800acd2:	68e1      	ldr	r1, [r4, #12]
 800acd4:	4b06      	ldr	r3, [pc, #24]	; (800acf0 <cleanup_stdio+0x3c>)
 800acd6:	4299      	cmp	r1, r3
 800acd8:	d004      	beq.n	800ace4 <cleanup_stdio+0x30>
 800acda:	4620      	mov	r0, r4
 800acdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace0:	f000 bd8c 	b.w	800b7fc <_fflush_r>
 800ace4:	bd10      	pop	{r4, pc}
 800ace6:	bf00      	nop
 800ace8:	2400045c 	.word	0x2400045c
 800acec:	240004c4 	.word	0x240004c4
 800acf0:	2400052c 	.word	0x2400052c

0800acf4 <global_stdio_init.part.0>:
 800acf4:	b510      	push	{r4, lr}
 800acf6:	4b0b      	ldr	r3, [pc, #44]	; (800ad24 <global_stdio_init.part.0+0x30>)
 800acf8:	4c0b      	ldr	r4, [pc, #44]	; (800ad28 <global_stdio_init.part.0+0x34>)
 800acfa:	4a0c      	ldr	r2, [pc, #48]	; (800ad2c <global_stdio_init.part.0+0x38>)
 800acfc:	601a      	str	r2, [r3, #0]
 800acfe:	4620      	mov	r0, r4
 800ad00:	2200      	movs	r2, #0
 800ad02:	2104      	movs	r1, #4
 800ad04:	f7ff ff94 	bl	800ac30 <std>
 800ad08:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	2109      	movs	r1, #9
 800ad10:	f7ff ff8e 	bl	800ac30 <std>
 800ad14:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ad18:	2202      	movs	r2, #2
 800ad1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1e:	2112      	movs	r1, #18
 800ad20:	f7ff bf86 	b.w	800ac30 <std>
 800ad24:	24000594 	.word	0x24000594
 800ad28:	2400045c 	.word	0x2400045c
 800ad2c:	0800ac9d 	.word	0x0800ac9d

0800ad30 <__sfp_lock_acquire>:
 800ad30:	4801      	ldr	r0, [pc, #4]	; (800ad38 <__sfp_lock_acquire+0x8>)
 800ad32:	f000 b90e 	b.w	800af52 <__retarget_lock_acquire_recursive>
 800ad36:	bf00      	nop
 800ad38:	2400059d 	.word	0x2400059d

0800ad3c <__sfp_lock_release>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sfp_lock_release+0x8>)
 800ad3e:	f000 b909 	b.w	800af54 <__retarget_lock_release_recursive>
 800ad42:	bf00      	nop
 800ad44:	2400059d 	.word	0x2400059d

0800ad48 <__sinit>:
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	f7ff fff0 	bl	800ad30 <__sfp_lock_acquire>
 800ad50:	6a23      	ldr	r3, [r4, #32]
 800ad52:	b11b      	cbz	r3, 800ad5c <__sinit+0x14>
 800ad54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad58:	f7ff bff0 	b.w	800ad3c <__sfp_lock_release>
 800ad5c:	4b04      	ldr	r3, [pc, #16]	; (800ad70 <__sinit+0x28>)
 800ad5e:	6223      	str	r3, [r4, #32]
 800ad60:	4b04      	ldr	r3, [pc, #16]	; (800ad74 <__sinit+0x2c>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1f5      	bne.n	800ad54 <__sinit+0xc>
 800ad68:	f7ff ffc4 	bl	800acf4 <global_stdio_init.part.0>
 800ad6c:	e7f2      	b.n	800ad54 <__sinit+0xc>
 800ad6e:	bf00      	nop
 800ad70:	0800acb5 	.word	0x0800acb5
 800ad74:	24000594 	.word	0x24000594

0800ad78 <_fwalk_sglue>:
 800ad78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad7c:	4607      	mov	r7, r0
 800ad7e:	4688      	mov	r8, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	2600      	movs	r6, #0
 800ad84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad88:	f1b9 0901 	subs.w	r9, r9, #1
 800ad8c:	d505      	bpl.n	800ad9a <_fwalk_sglue+0x22>
 800ad8e:	6824      	ldr	r4, [r4, #0]
 800ad90:	2c00      	cmp	r4, #0
 800ad92:	d1f7      	bne.n	800ad84 <_fwalk_sglue+0xc>
 800ad94:	4630      	mov	r0, r6
 800ad96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad9a:	89ab      	ldrh	r3, [r5, #12]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d907      	bls.n	800adb0 <_fwalk_sglue+0x38>
 800ada0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ada4:	3301      	adds	r3, #1
 800ada6:	d003      	beq.n	800adb0 <_fwalk_sglue+0x38>
 800ada8:	4629      	mov	r1, r5
 800adaa:	4638      	mov	r0, r7
 800adac:	47c0      	blx	r8
 800adae:	4306      	orrs	r6, r0
 800adb0:	3568      	adds	r5, #104	; 0x68
 800adb2:	e7e9      	b.n	800ad88 <_fwalk_sglue+0x10>

0800adb4 <iprintf>:
 800adb4:	b40f      	push	{r0, r1, r2, r3}
 800adb6:	b507      	push	{r0, r1, r2, lr}
 800adb8:	4906      	ldr	r1, [pc, #24]	; (800add4 <iprintf+0x20>)
 800adba:	ab04      	add	r3, sp, #16
 800adbc:	6808      	ldr	r0, [r1, #0]
 800adbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800adc2:	6881      	ldr	r1, [r0, #8]
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	f000 f9e9 	bl	800b19c <_vfiprintf_r>
 800adca:	b003      	add	sp, #12
 800adcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800add0:	b004      	add	sp, #16
 800add2:	4770      	bx	lr
 800add4:	24000068 	.word	0x24000068

0800add8 <__sread>:
 800add8:	b510      	push	{r4, lr}
 800adda:	460c      	mov	r4, r1
 800addc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade0:	f000 f868 	bl	800aeb4 <_read_r>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	bfab      	itete	ge
 800ade8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adea:	89a3      	ldrhlt	r3, [r4, #12]
 800adec:	181b      	addge	r3, r3, r0
 800adee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adf2:	bfac      	ite	ge
 800adf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800adf6:	81a3      	strhlt	r3, [r4, #12]
 800adf8:	bd10      	pop	{r4, pc}

0800adfa <__swrite>:
 800adfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adfe:	461f      	mov	r7, r3
 800ae00:	898b      	ldrh	r3, [r1, #12]
 800ae02:	05db      	lsls	r3, r3, #23
 800ae04:	4605      	mov	r5, r0
 800ae06:	460c      	mov	r4, r1
 800ae08:	4616      	mov	r6, r2
 800ae0a:	d505      	bpl.n	800ae18 <__swrite+0x1e>
 800ae0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae10:	2302      	movs	r3, #2
 800ae12:	2200      	movs	r2, #0
 800ae14:	f000 f83c 	bl	800ae90 <_lseek_r>
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	4632      	mov	r2, r6
 800ae26:	463b      	mov	r3, r7
 800ae28:	4628      	mov	r0, r5
 800ae2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae2e:	f000 b853 	b.w	800aed8 <_write_r>

0800ae32 <__sseek>:
 800ae32:	b510      	push	{r4, lr}
 800ae34:	460c      	mov	r4, r1
 800ae36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3a:	f000 f829 	bl	800ae90 <_lseek_r>
 800ae3e:	1c43      	adds	r3, r0, #1
 800ae40:	89a3      	ldrh	r3, [r4, #12]
 800ae42:	bf15      	itete	ne
 800ae44:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae4e:	81a3      	strheq	r3, [r4, #12]
 800ae50:	bf18      	it	ne
 800ae52:	81a3      	strhne	r3, [r4, #12]
 800ae54:	bd10      	pop	{r4, pc}

0800ae56 <__sclose>:
 800ae56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5a:	f000 b809 	b.w	800ae70 <_close_r>

0800ae5e <memset>:
 800ae5e:	4402      	add	r2, r0
 800ae60:	4603      	mov	r3, r0
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d100      	bne.n	800ae68 <memset+0xa>
 800ae66:	4770      	bx	lr
 800ae68:	f803 1b01 	strb.w	r1, [r3], #1
 800ae6c:	e7f9      	b.n	800ae62 <memset+0x4>
	...

0800ae70 <_close_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4d06      	ldr	r5, [pc, #24]	; (800ae8c <_close_r+0x1c>)
 800ae74:	2300      	movs	r3, #0
 800ae76:	4604      	mov	r4, r0
 800ae78:	4608      	mov	r0, r1
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 fa39 	bl	80012f2 <_close>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d102      	bne.n	800ae8a <_close_r+0x1a>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	b103      	cbz	r3, 800ae8a <_close_r+0x1a>
 800ae88:	6023      	str	r3, [r4, #0]
 800ae8a:	bd38      	pop	{r3, r4, r5, pc}
 800ae8c:	24000598 	.word	0x24000598

0800ae90 <_lseek_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	4d07      	ldr	r5, [pc, #28]	; (800aeb0 <_lseek_r+0x20>)
 800ae94:	4604      	mov	r4, r0
 800ae96:	4608      	mov	r0, r1
 800ae98:	4611      	mov	r1, r2
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	602a      	str	r2, [r5, #0]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	f7f6 fa4e 	bl	8001340 <_lseek>
 800aea4:	1c43      	adds	r3, r0, #1
 800aea6:	d102      	bne.n	800aeae <_lseek_r+0x1e>
 800aea8:	682b      	ldr	r3, [r5, #0]
 800aeaa:	b103      	cbz	r3, 800aeae <_lseek_r+0x1e>
 800aeac:	6023      	str	r3, [r4, #0]
 800aeae:	bd38      	pop	{r3, r4, r5, pc}
 800aeb0:	24000598 	.word	0x24000598

0800aeb4 <_read_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_read_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f6 f9f8 	bl	80012b8 <_read>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_read_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_read_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	24000598 	.word	0x24000598

0800aed8 <_write_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	; (800aef8 <_write_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f5 fbe0 	bl	80006ac <_write>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_write_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_write_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	24000598 	.word	0x24000598

0800aefc <__errno>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	; (800af04 <__errno+0x8>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	24000068 	.word	0x24000068

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4d0d      	ldr	r5, [pc, #52]	; (800af40 <__libc_init_array+0x38>)
 800af0c:	4c0d      	ldr	r4, [pc, #52]	; (800af44 <__libc_init_array+0x3c>)
 800af0e:	1b64      	subs	r4, r4, r5
 800af10:	10a4      	asrs	r4, r4, #2
 800af12:	2600      	movs	r6, #0
 800af14:	42a6      	cmp	r6, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	4d0b      	ldr	r5, [pc, #44]	; (800af48 <__libc_init_array+0x40>)
 800af1a:	4c0c      	ldr	r4, [pc, #48]	; (800af4c <__libc_init_array+0x44>)
 800af1c:	f000 fdc0 	bl	800baa0 <_init>
 800af20:	1b64      	subs	r4, r4, r5
 800af22:	10a4      	asrs	r4, r4, #2
 800af24:	2600      	movs	r6, #0
 800af26:	42a6      	cmp	r6, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af30:	4798      	blx	r3
 800af32:	3601      	adds	r6, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f855 3b04 	ldr.w	r3, [r5], #4
 800af3a:	4798      	blx	r3
 800af3c:	3601      	adds	r6, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800bb38 	.word	0x0800bb38
 800af44:	0800bb38 	.word	0x0800bb38
 800af48:	0800bb38 	.word	0x0800bb38
 800af4c:	0800bb3c 	.word	0x0800bb3c

0800af50 <__retarget_lock_init_recursive>:
 800af50:	4770      	bx	lr

0800af52 <__retarget_lock_acquire_recursive>:
 800af52:	4770      	bx	lr

0800af54 <__retarget_lock_release_recursive>:
 800af54:	4770      	bx	lr
	...

0800af58 <_free_r>:
 800af58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af5a:	2900      	cmp	r1, #0
 800af5c:	d044      	beq.n	800afe8 <_free_r+0x90>
 800af5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af62:	9001      	str	r0, [sp, #4]
 800af64:	2b00      	cmp	r3, #0
 800af66:	f1a1 0404 	sub.w	r4, r1, #4
 800af6a:	bfb8      	it	lt
 800af6c:	18e4      	addlt	r4, r4, r3
 800af6e:	f000 f8df 	bl	800b130 <__malloc_lock>
 800af72:	4a1e      	ldr	r2, [pc, #120]	; (800afec <_free_r+0x94>)
 800af74:	9801      	ldr	r0, [sp, #4]
 800af76:	6813      	ldr	r3, [r2, #0]
 800af78:	b933      	cbnz	r3, 800af88 <_free_r+0x30>
 800af7a:	6063      	str	r3, [r4, #4]
 800af7c:	6014      	str	r4, [r2, #0]
 800af7e:	b003      	add	sp, #12
 800af80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af84:	f000 b8da 	b.w	800b13c <__malloc_unlock>
 800af88:	42a3      	cmp	r3, r4
 800af8a:	d908      	bls.n	800af9e <_free_r+0x46>
 800af8c:	6825      	ldr	r5, [r4, #0]
 800af8e:	1961      	adds	r1, r4, r5
 800af90:	428b      	cmp	r3, r1
 800af92:	bf01      	itttt	eq
 800af94:	6819      	ldreq	r1, [r3, #0]
 800af96:	685b      	ldreq	r3, [r3, #4]
 800af98:	1949      	addeq	r1, r1, r5
 800af9a:	6021      	streq	r1, [r4, #0]
 800af9c:	e7ed      	b.n	800af7a <_free_r+0x22>
 800af9e:	461a      	mov	r2, r3
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	b10b      	cbz	r3, 800afa8 <_free_r+0x50>
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	d9fa      	bls.n	800af9e <_free_r+0x46>
 800afa8:	6811      	ldr	r1, [r2, #0]
 800afaa:	1855      	adds	r5, r2, r1
 800afac:	42a5      	cmp	r5, r4
 800afae:	d10b      	bne.n	800afc8 <_free_r+0x70>
 800afb0:	6824      	ldr	r4, [r4, #0]
 800afb2:	4421      	add	r1, r4
 800afb4:	1854      	adds	r4, r2, r1
 800afb6:	42a3      	cmp	r3, r4
 800afb8:	6011      	str	r1, [r2, #0]
 800afba:	d1e0      	bne.n	800af7e <_free_r+0x26>
 800afbc:	681c      	ldr	r4, [r3, #0]
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	6053      	str	r3, [r2, #4]
 800afc2:	440c      	add	r4, r1
 800afc4:	6014      	str	r4, [r2, #0]
 800afc6:	e7da      	b.n	800af7e <_free_r+0x26>
 800afc8:	d902      	bls.n	800afd0 <_free_r+0x78>
 800afca:	230c      	movs	r3, #12
 800afcc:	6003      	str	r3, [r0, #0]
 800afce:	e7d6      	b.n	800af7e <_free_r+0x26>
 800afd0:	6825      	ldr	r5, [r4, #0]
 800afd2:	1961      	adds	r1, r4, r5
 800afd4:	428b      	cmp	r3, r1
 800afd6:	bf04      	itt	eq
 800afd8:	6819      	ldreq	r1, [r3, #0]
 800afda:	685b      	ldreq	r3, [r3, #4]
 800afdc:	6063      	str	r3, [r4, #4]
 800afde:	bf04      	itt	eq
 800afe0:	1949      	addeq	r1, r1, r5
 800afe2:	6021      	streq	r1, [r4, #0]
 800afe4:	6054      	str	r4, [r2, #4]
 800afe6:	e7ca      	b.n	800af7e <_free_r+0x26>
 800afe8:	b003      	add	sp, #12
 800afea:	bd30      	pop	{r4, r5, pc}
 800afec:	240005a0 	.word	0x240005a0

0800aff0 <sbrk_aligned>:
 800aff0:	b570      	push	{r4, r5, r6, lr}
 800aff2:	4e0e      	ldr	r6, [pc, #56]	; (800b02c <sbrk_aligned+0x3c>)
 800aff4:	460c      	mov	r4, r1
 800aff6:	6831      	ldr	r1, [r6, #0]
 800aff8:	4605      	mov	r5, r0
 800affa:	b911      	cbnz	r1, 800b002 <sbrk_aligned+0x12>
 800affc:	f000 fcbc 	bl	800b978 <_sbrk_r>
 800b000:	6030      	str	r0, [r6, #0]
 800b002:	4621      	mov	r1, r4
 800b004:	4628      	mov	r0, r5
 800b006:	f000 fcb7 	bl	800b978 <_sbrk_r>
 800b00a:	1c43      	adds	r3, r0, #1
 800b00c:	d00a      	beq.n	800b024 <sbrk_aligned+0x34>
 800b00e:	1cc4      	adds	r4, r0, #3
 800b010:	f024 0403 	bic.w	r4, r4, #3
 800b014:	42a0      	cmp	r0, r4
 800b016:	d007      	beq.n	800b028 <sbrk_aligned+0x38>
 800b018:	1a21      	subs	r1, r4, r0
 800b01a:	4628      	mov	r0, r5
 800b01c:	f000 fcac 	bl	800b978 <_sbrk_r>
 800b020:	3001      	adds	r0, #1
 800b022:	d101      	bne.n	800b028 <sbrk_aligned+0x38>
 800b024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800b028:	4620      	mov	r0, r4
 800b02a:	bd70      	pop	{r4, r5, r6, pc}
 800b02c:	240005a4 	.word	0x240005a4

0800b030 <_malloc_r>:
 800b030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b034:	1ccd      	adds	r5, r1, #3
 800b036:	f025 0503 	bic.w	r5, r5, #3
 800b03a:	3508      	adds	r5, #8
 800b03c:	2d0c      	cmp	r5, #12
 800b03e:	bf38      	it	cc
 800b040:	250c      	movcc	r5, #12
 800b042:	2d00      	cmp	r5, #0
 800b044:	4607      	mov	r7, r0
 800b046:	db01      	blt.n	800b04c <_malloc_r+0x1c>
 800b048:	42a9      	cmp	r1, r5
 800b04a:	d905      	bls.n	800b058 <_malloc_r+0x28>
 800b04c:	230c      	movs	r3, #12
 800b04e:	603b      	str	r3, [r7, #0]
 800b050:	2600      	movs	r6, #0
 800b052:	4630      	mov	r0, r6
 800b054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b058:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b12c <_malloc_r+0xfc>
 800b05c:	f000 f868 	bl	800b130 <__malloc_lock>
 800b060:	f8d8 3000 	ldr.w	r3, [r8]
 800b064:	461c      	mov	r4, r3
 800b066:	bb5c      	cbnz	r4, 800b0c0 <_malloc_r+0x90>
 800b068:	4629      	mov	r1, r5
 800b06a:	4638      	mov	r0, r7
 800b06c:	f7ff ffc0 	bl	800aff0 <sbrk_aligned>
 800b070:	1c43      	adds	r3, r0, #1
 800b072:	4604      	mov	r4, r0
 800b074:	d155      	bne.n	800b122 <_malloc_r+0xf2>
 800b076:	f8d8 4000 	ldr.w	r4, [r8]
 800b07a:	4626      	mov	r6, r4
 800b07c:	2e00      	cmp	r6, #0
 800b07e:	d145      	bne.n	800b10c <_malloc_r+0xdc>
 800b080:	2c00      	cmp	r4, #0
 800b082:	d048      	beq.n	800b116 <_malloc_r+0xe6>
 800b084:	6823      	ldr	r3, [r4, #0]
 800b086:	4631      	mov	r1, r6
 800b088:	4638      	mov	r0, r7
 800b08a:	eb04 0903 	add.w	r9, r4, r3
 800b08e:	f000 fc73 	bl	800b978 <_sbrk_r>
 800b092:	4581      	cmp	r9, r0
 800b094:	d13f      	bne.n	800b116 <_malloc_r+0xe6>
 800b096:	6821      	ldr	r1, [r4, #0]
 800b098:	1a6d      	subs	r5, r5, r1
 800b09a:	4629      	mov	r1, r5
 800b09c:	4638      	mov	r0, r7
 800b09e:	f7ff ffa7 	bl	800aff0 <sbrk_aligned>
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d037      	beq.n	800b116 <_malloc_r+0xe6>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	442b      	add	r3, r5
 800b0aa:	6023      	str	r3, [r4, #0]
 800b0ac:	f8d8 3000 	ldr.w	r3, [r8]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d038      	beq.n	800b126 <_malloc_r+0xf6>
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	42a2      	cmp	r2, r4
 800b0b8:	d12b      	bne.n	800b112 <_malloc_r+0xe2>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	605a      	str	r2, [r3, #4]
 800b0be:	e00f      	b.n	800b0e0 <_malloc_r+0xb0>
 800b0c0:	6822      	ldr	r2, [r4, #0]
 800b0c2:	1b52      	subs	r2, r2, r5
 800b0c4:	d41f      	bmi.n	800b106 <_malloc_r+0xd6>
 800b0c6:	2a0b      	cmp	r2, #11
 800b0c8:	d917      	bls.n	800b0fa <_malloc_r+0xca>
 800b0ca:	1961      	adds	r1, r4, r5
 800b0cc:	42a3      	cmp	r3, r4
 800b0ce:	6025      	str	r5, [r4, #0]
 800b0d0:	bf18      	it	ne
 800b0d2:	6059      	strne	r1, [r3, #4]
 800b0d4:	6863      	ldr	r3, [r4, #4]
 800b0d6:	bf08      	it	eq
 800b0d8:	f8c8 1000 	streq.w	r1, [r8]
 800b0dc:	5162      	str	r2, [r4, r5]
 800b0de:	604b      	str	r3, [r1, #4]
 800b0e0:	4638      	mov	r0, r7
 800b0e2:	f104 060b 	add.w	r6, r4, #11
 800b0e6:	f000 f829 	bl	800b13c <__malloc_unlock>
 800b0ea:	f026 0607 	bic.w	r6, r6, #7
 800b0ee:	1d23      	adds	r3, r4, #4
 800b0f0:	1af2      	subs	r2, r6, r3
 800b0f2:	d0ae      	beq.n	800b052 <_malloc_r+0x22>
 800b0f4:	1b9b      	subs	r3, r3, r6
 800b0f6:	50a3      	str	r3, [r4, r2]
 800b0f8:	e7ab      	b.n	800b052 <_malloc_r+0x22>
 800b0fa:	42a3      	cmp	r3, r4
 800b0fc:	6862      	ldr	r2, [r4, #4]
 800b0fe:	d1dd      	bne.n	800b0bc <_malloc_r+0x8c>
 800b100:	f8c8 2000 	str.w	r2, [r8]
 800b104:	e7ec      	b.n	800b0e0 <_malloc_r+0xb0>
 800b106:	4623      	mov	r3, r4
 800b108:	6864      	ldr	r4, [r4, #4]
 800b10a:	e7ac      	b.n	800b066 <_malloc_r+0x36>
 800b10c:	4634      	mov	r4, r6
 800b10e:	6876      	ldr	r6, [r6, #4]
 800b110:	e7b4      	b.n	800b07c <_malloc_r+0x4c>
 800b112:	4613      	mov	r3, r2
 800b114:	e7cc      	b.n	800b0b0 <_malloc_r+0x80>
 800b116:	230c      	movs	r3, #12
 800b118:	603b      	str	r3, [r7, #0]
 800b11a:	4638      	mov	r0, r7
 800b11c:	f000 f80e 	bl	800b13c <__malloc_unlock>
 800b120:	e797      	b.n	800b052 <_malloc_r+0x22>
 800b122:	6025      	str	r5, [r4, #0]
 800b124:	e7dc      	b.n	800b0e0 <_malloc_r+0xb0>
 800b126:	605b      	str	r3, [r3, #4]
 800b128:	deff      	udf	#255	; 0xff
 800b12a:	bf00      	nop
 800b12c:	240005a0 	.word	0x240005a0

0800b130 <__malloc_lock>:
 800b130:	4801      	ldr	r0, [pc, #4]	; (800b138 <__malloc_lock+0x8>)
 800b132:	f7ff bf0e 	b.w	800af52 <__retarget_lock_acquire_recursive>
 800b136:	bf00      	nop
 800b138:	2400059c 	.word	0x2400059c

0800b13c <__malloc_unlock>:
 800b13c:	4801      	ldr	r0, [pc, #4]	; (800b144 <__malloc_unlock+0x8>)
 800b13e:	f7ff bf09 	b.w	800af54 <__retarget_lock_release_recursive>
 800b142:	bf00      	nop
 800b144:	2400059c 	.word	0x2400059c

0800b148 <__sfputc_r>:
 800b148:	6893      	ldr	r3, [r2, #8]
 800b14a:	3b01      	subs	r3, #1
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	b410      	push	{r4}
 800b150:	6093      	str	r3, [r2, #8]
 800b152:	da08      	bge.n	800b166 <__sfputc_r+0x1e>
 800b154:	6994      	ldr	r4, [r2, #24]
 800b156:	42a3      	cmp	r3, r4
 800b158:	db01      	blt.n	800b15e <__sfputc_r+0x16>
 800b15a:	290a      	cmp	r1, #10
 800b15c:	d103      	bne.n	800b166 <__sfputc_r+0x1e>
 800b15e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b162:	f000 bb73 	b.w	800b84c <__swbuf_r>
 800b166:	6813      	ldr	r3, [r2, #0]
 800b168:	1c58      	adds	r0, r3, #1
 800b16a:	6010      	str	r0, [r2, #0]
 800b16c:	7019      	strb	r1, [r3, #0]
 800b16e:	4608      	mov	r0, r1
 800b170:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b174:	4770      	bx	lr

0800b176 <__sfputs_r>:
 800b176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b178:	4606      	mov	r6, r0
 800b17a:	460f      	mov	r7, r1
 800b17c:	4614      	mov	r4, r2
 800b17e:	18d5      	adds	r5, r2, r3
 800b180:	42ac      	cmp	r4, r5
 800b182:	d101      	bne.n	800b188 <__sfputs_r+0x12>
 800b184:	2000      	movs	r0, #0
 800b186:	e007      	b.n	800b198 <__sfputs_r+0x22>
 800b188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b18c:	463a      	mov	r2, r7
 800b18e:	4630      	mov	r0, r6
 800b190:	f7ff ffda 	bl	800b148 <__sfputc_r>
 800b194:	1c43      	adds	r3, r0, #1
 800b196:	d1f3      	bne.n	800b180 <__sfputs_r+0xa>
 800b198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b19c <_vfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	460d      	mov	r5, r1
 800b1a2:	b09d      	sub	sp, #116	; 0x74
 800b1a4:	4614      	mov	r4, r2
 800b1a6:	4698      	mov	r8, r3
 800b1a8:	4606      	mov	r6, r0
 800b1aa:	b118      	cbz	r0, 800b1b4 <_vfiprintf_r+0x18>
 800b1ac:	6a03      	ldr	r3, [r0, #32]
 800b1ae:	b90b      	cbnz	r3, 800b1b4 <_vfiprintf_r+0x18>
 800b1b0:	f7ff fdca 	bl	800ad48 <__sinit>
 800b1b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1b6:	07d9      	lsls	r1, r3, #31
 800b1b8:	d405      	bmi.n	800b1c6 <_vfiprintf_r+0x2a>
 800b1ba:	89ab      	ldrh	r3, [r5, #12]
 800b1bc:	059a      	lsls	r2, r3, #22
 800b1be:	d402      	bmi.n	800b1c6 <_vfiprintf_r+0x2a>
 800b1c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1c2:	f7ff fec6 	bl	800af52 <__retarget_lock_acquire_recursive>
 800b1c6:	89ab      	ldrh	r3, [r5, #12]
 800b1c8:	071b      	lsls	r3, r3, #28
 800b1ca:	d501      	bpl.n	800b1d0 <_vfiprintf_r+0x34>
 800b1cc:	692b      	ldr	r3, [r5, #16]
 800b1ce:	b99b      	cbnz	r3, 800b1f8 <_vfiprintf_r+0x5c>
 800b1d0:	4629      	mov	r1, r5
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f000 fb78 	bl	800b8c8 <__swsetup_r>
 800b1d8:	b170      	cbz	r0, 800b1f8 <_vfiprintf_r+0x5c>
 800b1da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1dc:	07dc      	lsls	r4, r3, #31
 800b1de:	d504      	bpl.n	800b1ea <_vfiprintf_r+0x4e>
 800b1e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1e4:	b01d      	add	sp, #116	; 0x74
 800b1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ea:	89ab      	ldrh	r3, [r5, #12]
 800b1ec:	0598      	lsls	r0, r3, #22
 800b1ee:	d4f7      	bmi.n	800b1e0 <_vfiprintf_r+0x44>
 800b1f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1f2:	f7ff feaf 	bl	800af54 <__retarget_lock_release_recursive>
 800b1f6:	e7f3      	b.n	800b1e0 <_vfiprintf_r+0x44>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b1fc:	2320      	movs	r3, #32
 800b1fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b202:	f8cd 800c 	str.w	r8, [sp, #12]
 800b206:	2330      	movs	r3, #48	; 0x30
 800b208:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b3bc <_vfiprintf_r+0x220>
 800b20c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b210:	f04f 0901 	mov.w	r9, #1
 800b214:	4623      	mov	r3, r4
 800b216:	469a      	mov	sl, r3
 800b218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b21c:	b10a      	cbz	r2, 800b222 <_vfiprintf_r+0x86>
 800b21e:	2a25      	cmp	r2, #37	; 0x25
 800b220:	d1f9      	bne.n	800b216 <_vfiprintf_r+0x7a>
 800b222:	ebba 0b04 	subs.w	fp, sl, r4
 800b226:	d00b      	beq.n	800b240 <_vfiprintf_r+0xa4>
 800b228:	465b      	mov	r3, fp
 800b22a:	4622      	mov	r2, r4
 800b22c:	4629      	mov	r1, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ffa1 	bl	800b176 <__sfputs_r>
 800b234:	3001      	adds	r0, #1
 800b236:	f000 80a9 	beq.w	800b38c <_vfiprintf_r+0x1f0>
 800b23a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b23c:	445a      	add	r2, fp
 800b23e:	9209      	str	r2, [sp, #36]	; 0x24
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b00      	cmp	r3, #0
 800b246:	f000 80a1 	beq.w	800b38c <_vfiprintf_r+0x1f0>
 800b24a:	2300      	movs	r3, #0
 800b24c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b254:	f10a 0a01 	add.w	sl, sl, #1
 800b258:	9304      	str	r3, [sp, #16]
 800b25a:	9307      	str	r3, [sp, #28]
 800b25c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b260:	931a      	str	r3, [sp, #104]	; 0x68
 800b262:	4654      	mov	r4, sl
 800b264:	2205      	movs	r2, #5
 800b266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b26a:	4854      	ldr	r0, [pc, #336]	; (800b3bc <_vfiprintf_r+0x220>)
 800b26c:	f7f5 f850 	bl	8000310 <memchr>
 800b270:	9a04      	ldr	r2, [sp, #16]
 800b272:	b9d8      	cbnz	r0, 800b2ac <_vfiprintf_r+0x110>
 800b274:	06d1      	lsls	r1, r2, #27
 800b276:	bf44      	itt	mi
 800b278:	2320      	movmi	r3, #32
 800b27a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b27e:	0713      	lsls	r3, r2, #28
 800b280:	bf44      	itt	mi
 800b282:	232b      	movmi	r3, #43	; 0x2b
 800b284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b288:	f89a 3000 	ldrb.w	r3, [sl]
 800b28c:	2b2a      	cmp	r3, #42	; 0x2a
 800b28e:	d015      	beq.n	800b2bc <_vfiprintf_r+0x120>
 800b290:	9a07      	ldr	r2, [sp, #28]
 800b292:	4654      	mov	r4, sl
 800b294:	2000      	movs	r0, #0
 800b296:	f04f 0c0a 	mov.w	ip, #10
 800b29a:	4621      	mov	r1, r4
 800b29c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2a0:	3b30      	subs	r3, #48	; 0x30
 800b2a2:	2b09      	cmp	r3, #9
 800b2a4:	d94d      	bls.n	800b342 <_vfiprintf_r+0x1a6>
 800b2a6:	b1b0      	cbz	r0, 800b2d6 <_vfiprintf_r+0x13a>
 800b2a8:	9207      	str	r2, [sp, #28]
 800b2aa:	e014      	b.n	800b2d6 <_vfiprintf_r+0x13a>
 800b2ac:	eba0 0308 	sub.w	r3, r0, r8
 800b2b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	9304      	str	r3, [sp, #16]
 800b2b8:	46a2      	mov	sl, r4
 800b2ba:	e7d2      	b.n	800b262 <_vfiprintf_r+0xc6>
 800b2bc:	9b03      	ldr	r3, [sp, #12]
 800b2be:	1d19      	adds	r1, r3, #4
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	9103      	str	r1, [sp, #12]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	bfbb      	ittet	lt
 800b2c8:	425b      	neglt	r3, r3
 800b2ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b2ce:	9307      	strge	r3, [sp, #28]
 800b2d0:	9307      	strlt	r3, [sp, #28]
 800b2d2:	bfb8      	it	lt
 800b2d4:	9204      	strlt	r2, [sp, #16]
 800b2d6:	7823      	ldrb	r3, [r4, #0]
 800b2d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b2da:	d10c      	bne.n	800b2f6 <_vfiprintf_r+0x15a>
 800b2dc:	7863      	ldrb	r3, [r4, #1]
 800b2de:	2b2a      	cmp	r3, #42	; 0x2a
 800b2e0:	d134      	bne.n	800b34c <_vfiprintf_r+0x1b0>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	1d1a      	adds	r2, r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9203      	str	r2, [sp, #12]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	bfb8      	it	lt
 800b2ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b2f2:	3402      	adds	r4, #2
 800b2f4:	9305      	str	r3, [sp, #20]
 800b2f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b3cc <_vfiprintf_r+0x230>
 800b2fa:	7821      	ldrb	r1, [r4, #0]
 800b2fc:	2203      	movs	r2, #3
 800b2fe:	4650      	mov	r0, sl
 800b300:	f7f5 f806 	bl	8000310 <memchr>
 800b304:	b138      	cbz	r0, 800b316 <_vfiprintf_r+0x17a>
 800b306:	9b04      	ldr	r3, [sp, #16]
 800b308:	eba0 000a 	sub.w	r0, r0, sl
 800b30c:	2240      	movs	r2, #64	; 0x40
 800b30e:	4082      	lsls	r2, r0
 800b310:	4313      	orrs	r3, r2
 800b312:	3401      	adds	r4, #1
 800b314:	9304      	str	r3, [sp, #16]
 800b316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31a:	4829      	ldr	r0, [pc, #164]	; (800b3c0 <_vfiprintf_r+0x224>)
 800b31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b320:	2206      	movs	r2, #6
 800b322:	f7f4 fff5 	bl	8000310 <memchr>
 800b326:	2800      	cmp	r0, #0
 800b328:	d03f      	beq.n	800b3aa <_vfiprintf_r+0x20e>
 800b32a:	4b26      	ldr	r3, [pc, #152]	; (800b3c4 <_vfiprintf_r+0x228>)
 800b32c:	bb1b      	cbnz	r3, 800b376 <_vfiprintf_r+0x1da>
 800b32e:	9b03      	ldr	r3, [sp, #12]
 800b330:	3307      	adds	r3, #7
 800b332:	f023 0307 	bic.w	r3, r3, #7
 800b336:	3308      	adds	r3, #8
 800b338:	9303      	str	r3, [sp, #12]
 800b33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b33c:	443b      	add	r3, r7
 800b33e:	9309      	str	r3, [sp, #36]	; 0x24
 800b340:	e768      	b.n	800b214 <_vfiprintf_r+0x78>
 800b342:	fb0c 3202 	mla	r2, ip, r2, r3
 800b346:	460c      	mov	r4, r1
 800b348:	2001      	movs	r0, #1
 800b34a:	e7a6      	b.n	800b29a <_vfiprintf_r+0xfe>
 800b34c:	2300      	movs	r3, #0
 800b34e:	3401      	adds	r4, #1
 800b350:	9305      	str	r3, [sp, #20]
 800b352:	4619      	mov	r1, r3
 800b354:	f04f 0c0a 	mov.w	ip, #10
 800b358:	4620      	mov	r0, r4
 800b35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b35e:	3a30      	subs	r2, #48	; 0x30
 800b360:	2a09      	cmp	r2, #9
 800b362:	d903      	bls.n	800b36c <_vfiprintf_r+0x1d0>
 800b364:	2b00      	cmp	r3, #0
 800b366:	d0c6      	beq.n	800b2f6 <_vfiprintf_r+0x15a>
 800b368:	9105      	str	r1, [sp, #20]
 800b36a:	e7c4      	b.n	800b2f6 <_vfiprintf_r+0x15a>
 800b36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b370:	4604      	mov	r4, r0
 800b372:	2301      	movs	r3, #1
 800b374:	e7f0      	b.n	800b358 <_vfiprintf_r+0x1bc>
 800b376:	ab03      	add	r3, sp, #12
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	462a      	mov	r2, r5
 800b37c:	4b12      	ldr	r3, [pc, #72]	; (800b3c8 <_vfiprintf_r+0x22c>)
 800b37e:	a904      	add	r1, sp, #16
 800b380:	4630      	mov	r0, r6
 800b382:	f3af 8000 	nop.w
 800b386:	4607      	mov	r7, r0
 800b388:	1c78      	adds	r0, r7, #1
 800b38a:	d1d6      	bne.n	800b33a <_vfiprintf_r+0x19e>
 800b38c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b38e:	07d9      	lsls	r1, r3, #31
 800b390:	d405      	bmi.n	800b39e <_vfiprintf_r+0x202>
 800b392:	89ab      	ldrh	r3, [r5, #12]
 800b394:	059a      	lsls	r2, r3, #22
 800b396:	d402      	bmi.n	800b39e <_vfiprintf_r+0x202>
 800b398:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b39a:	f7ff fddb 	bl	800af54 <__retarget_lock_release_recursive>
 800b39e:	89ab      	ldrh	r3, [r5, #12]
 800b3a0:	065b      	lsls	r3, r3, #25
 800b3a2:	f53f af1d 	bmi.w	800b1e0 <_vfiprintf_r+0x44>
 800b3a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3a8:	e71c      	b.n	800b1e4 <_vfiprintf_r+0x48>
 800b3aa:	ab03      	add	r3, sp, #12
 800b3ac:	9300      	str	r3, [sp, #0]
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4b05      	ldr	r3, [pc, #20]	; (800b3c8 <_vfiprintf_r+0x22c>)
 800b3b2:	a904      	add	r1, sp, #16
 800b3b4:	4630      	mov	r0, r6
 800b3b6:	f000 f879 	bl	800b4ac <_printf_i>
 800b3ba:	e7e4      	b.n	800b386 <_vfiprintf_r+0x1ea>
 800b3bc:	0800bafc 	.word	0x0800bafc
 800b3c0:	0800bb06 	.word	0x0800bb06
 800b3c4:	00000000 	.word	0x00000000
 800b3c8:	0800b177 	.word	0x0800b177
 800b3cc:	0800bb02 	.word	0x0800bb02

0800b3d0 <_printf_common>:
 800b3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3d4:	4616      	mov	r6, r2
 800b3d6:	4699      	mov	r9, r3
 800b3d8:	688a      	ldr	r2, [r1, #8]
 800b3da:	690b      	ldr	r3, [r1, #16]
 800b3dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	bfb8      	it	lt
 800b3e4:	4613      	movlt	r3, r2
 800b3e6:	6033      	str	r3, [r6, #0]
 800b3e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	460c      	mov	r4, r1
 800b3f0:	b10a      	cbz	r2, 800b3f6 <_printf_common+0x26>
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	6033      	str	r3, [r6, #0]
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	0699      	lsls	r1, r3, #26
 800b3fa:	bf42      	ittt	mi
 800b3fc:	6833      	ldrmi	r3, [r6, #0]
 800b3fe:	3302      	addmi	r3, #2
 800b400:	6033      	strmi	r3, [r6, #0]
 800b402:	6825      	ldr	r5, [r4, #0]
 800b404:	f015 0506 	ands.w	r5, r5, #6
 800b408:	d106      	bne.n	800b418 <_printf_common+0x48>
 800b40a:	f104 0a19 	add.w	sl, r4, #25
 800b40e:	68e3      	ldr	r3, [r4, #12]
 800b410:	6832      	ldr	r2, [r6, #0]
 800b412:	1a9b      	subs	r3, r3, r2
 800b414:	42ab      	cmp	r3, r5
 800b416:	dc26      	bgt.n	800b466 <_printf_common+0x96>
 800b418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b41c:	1e13      	subs	r3, r2, #0
 800b41e:	6822      	ldr	r2, [r4, #0]
 800b420:	bf18      	it	ne
 800b422:	2301      	movne	r3, #1
 800b424:	0692      	lsls	r2, r2, #26
 800b426:	d42b      	bmi.n	800b480 <_printf_common+0xb0>
 800b428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b42c:	4649      	mov	r1, r9
 800b42e:	4638      	mov	r0, r7
 800b430:	47c0      	blx	r8
 800b432:	3001      	adds	r0, #1
 800b434:	d01e      	beq.n	800b474 <_printf_common+0xa4>
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	6922      	ldr	r2, [r4, #16]
 800b43a:	f003 0306 	and.w	r3, r3, #6
 800b43e:	2b04      	cmp	r3, #4
 800b440:	bf02      	ittt	eq
 800b442:	68e5      	ldreq	r5, [r4, #12]
 800b444:	6833      	ldreq	r3, [r6, #0]
 800b446:	1aed      	subeq	r5, r5, r3
 800b448:	68a3      	ldr	r3, [r4, #8]
 800b44a:	bf0c      	ite	eq
 800b44c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b450:	2500      	movne	r5, #0
 800b452:	4293      	cmp	r3, r2
 800b454:	bfc4      	itt	gt
 800b456:	1a9b      	subgt	r3, r3, r2
 800b458:	18ed      	addgt	r5, r5, r3
 800b45a:	2600      	movs	r6, #0
 800b45c:	341a      	adds	r4, #26
 800b45e:	42b5      	cmp	r5, r6
 800b460:	d11a      	bne.n	800b498 <_printf_common+0xc8>
 800b462:	2000      	movs	r0, #0
 800b464:	e008      	b.n	800b478 <_printf_common+0xa8>
 800b466:	2301      	movs	r3, #1
 800b468:	4652      	mov	r2, sl
 800b46a:	4649      	mov	r1, r9
 800b46c:	4638      	mov	r0, r7
 800b46e:	47c0      	blx	r8
 800b470:	3001      	adds	r0, #1
 800b472:	d103      	bne.n	800b47c <_printf_common+0xac>
 800b474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47c:	3501      	adds	r5, #1
 800b47e:	e7c6      	b.n	800b40e <_printf_common+0x3e>
 800b480:	18e1      	adds	r1, r4, r3
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	2030      	movs	r0, #48	; 0x30
 800b486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b48a:	4422      	add	r2, r4
 800b48c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b494:	3302      	adds	r3, #2
 800b496:	e7c7      	b.n	800b428 <_printf_common+0x58>
 800b498:	2301      	movs	r3, #1
 800b49a:	4622      	mov	r2, r4
 800b49c:	4649      	mov	r1, r9
 800b49e:	4638      	mov	r0, r7
 800b4a0:	47c0      	blx	r8
 800b4a2:	3001      	adds	r0, #1
 800b4a4:	d0e6      	beq.n	800b474 <_printf_common+0xa4>
 800b4a6:	3601      	adds	r6, #1
 800b4a8:	e7d9      	b.n	800b45e <_printf_common+0x8e>
	...

0800b4ac <_printf_i>:
 800b4ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4b0:	7e0f      	ldrb	r7, [r1, #24]
 800b4b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b4b4:	2f78      	cmp	r7, #120	; 0x78
 800b4b6:	4691      	mov	r9, r2
 800b4b8:	4680      	mov	r8, r0
 800b4ba:	460c      	mov	r4, r1
 800b4bc:	469a      	mov	sl, r3
 800b4be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b4c2:	d807      	bhi.n	800b4d4 <_printf_i+0x28>
 800b4c4:	2f62      	cmp	r7, #98	; 0x62
 800b4c6:	d80a      	bhi.n	800b4de <_printf_i+0x32>
 800b4c8:	2f00      	cmp	r7, #0
 800b4ca:	f000 80d4 	beq.w	800b676 <_printf_i+0x1ca>
 800b4ce:	2f58      	cmp	r7, #88	; 0x58
 800b4d0:	f000 80c0 	beq.w	800b654 <_printf_i+0x1a8>
 800b4d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4dc:	e03a      	b.n	800b554 <_printf_i+0xa8>
 800b4de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4e2:	2b15      	cmp	r3, #21
 800b4e4:	d8f6      	bhi.n	800b4d4 <_printf_i+0x28>
 800b4e6:	a101      	add	r1, pc, #4	; (adr r1, 800b4ec <_printf_i+0x40>)
 800b4e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4ec:	0800b545 	.word	0x0800b545
 800b4f0:	0800b559 	.word	0x0800b559
 800b4f4:	0800b4d5 	.word	0x0800b4d5
 800b4f8:	0800b4d5 	.word	0x0800b4d5
 800b4fc:	0800b4d5 	.word	0x0800b4d5
 800b500:	0800b4d5 	.word	0x0800b4d5
 800b504:	0800b559 	.word	0x0800b559
 800b508:	0800b4d5 	.word	0x0800b4d5
 800b50c:	0800b4d5 	.word	0x0800b4d5
 800b510:	0800b4d5 	.word	0x0800b4d5
 800b514:	0800b4d5 	.word	0x0800b4d5
 800b518:	0800b65d 	.word	0x0800b65d
 800b51c:	0800b585 	.word	0x0800b585
 800b520:	0800b617 	.word	0x0800b617
 800b524:	0800b4d5 	.word	0x0800b4d5
 800b528:	0800b4d5 	.word	0x0800b4d5
 800b52c:	0800b67f 	.word	0x0800b67f
 800b530:	0800b4d5 	.word	0x0800b4d5
 800b534:	0800b585 	.word	0x0800b585
 800b538:	0800b4d5 	.word	0x0800b4d5
 800b53c:	0800b4d5 	.word	0x0800b4d5
 800b540:	0800b61f 	.word	0x0800b61f
 800b544:	682b      	ldr	r3, [r5, #0]
 800b546:	1d1a      	adds	r2, r3, #4
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	602a      	str	r2, [r5, #0]
 800b54c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b554:	2301      	movs	r3, #1
 800b556:	e09f      	b.n	800b698 <_printf_i+0x1ec>
 800b558:	6820      	ldr	r0, [r4, #0]
 800b55a:	682b      	ldr	r3, [r5, #0]
 800b55c:	0607      	lsls	r7, r0, #24
 800b55e:	f103 0104 	add.w	r1, r3, #4
 800b562:	6029      	str	r1, [r5, #0]
 800b564:	d501      	bpl.n	800b56a <_printf_i+0xbe>
 800b566:	681e      	ldr	r6, [r3, #0]
 800b568:	e003      	b.n	800b572 <_printf_i+0xc6>
 800b56a:	0646      	lsls	r6, r0, #25
 800b56c:	d5fb      	bpl.n	800b566 <_printf_i+0xba>
 800b56e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b572:	2e00      	cmp	r6, #0
 800b574:	da03      	bge.n	800b57e <_printf_i+0xd2>
 800b576:	232d      	movs	r3, #45	; 0x2d
 800b578:	4276      	negs	r6, r6
 800b57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b57e:	485a      	ldr	r0, [pc, #360]	; (800b6e8 <_printf_i+0x23c>)
 800b580:	230a      	movs	r3, #10
 800b582:	e012      	b.n	800b5aa <_printf_i+0xfe>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	6820      	ldr	r0, [r4, #0]
 800b588:	1d19      	adds	r1, r3, #4
 800b58a:	6029      	str	r1, [r5, #0]
 800b58c:	0605      	lsls	r5, r0, #24
 800b58e:	d501      	bpl.n	800b594 <_printf_i+0xe8>
 800b590:	681e      	ldr	r6, [r3, #0]
 800b592:	e002      	b.n	800b59a <_printf_i+0xee>
 800b594:	0641      	lsls	r1, r0, #25
 800b596:	d5fb      	bpl.n	800b590 <_printf_i+0xe4>
 800b598:	881e      	ldrh	r6, [r3, #0]
 800b59a:	4853      	ldr	r0, [pc, #332]	; (800b6e8 <_printf_i+0x23c>)
 800b59c:	2f6f      	cmp	r7, #111	; 0x6f
 800b59e:	bf0c      	ite	eq
 800b5a0:	2308      	moveq	r3, #8
 800b5a2:	230a      	movne	r3, #10
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b5aa:	6865      	ldr	r5, [r4, #4]
 800b5ac:	60a5      	str	r5, [r4, #8]
 800b5ae:	2d00      	cmp	r5, #0
 800b5b0:	bfa2      	ittt	ge
 800b5b2:	6821      	ldrge	r1, [r4, #0]
 800b5b4:	f021 0104 	bicge.w	r1, r1, #4
 800b5b8:	6021      	strge	r1, [r4, #0]
 800b5ba:	b90e      	cbnz	r6, 800b5c0 <_printf_i+0x114>
 800b5bc:	2d00      	cmp	r5, #0
 800b5be:	d04b      	beq.n	800b658 <_printf_i+0x1ac>
 800b5c0:	4615      	mov	r5, r2
 800b5c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b5c6:	fb03 6711 	mls	r7, r3, r1, r6
 800b5ca:	5dc7      	ldrb	r7, [r0, r7]
 800b5cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b5d0:	4637      	mov	r7, r6
 800b5d2:	42bb      	cmp	r3, r7
 800b5d4:	460e      	mov	r6, r1
 800b5d6:	d9f4      	bls.n	800b5c2 <_printf_i+0x116>
 800b5d8:	2b08      	cmp	r3, #8
 800b5da:	d10b      	bne.n	800b5f4 <_printf_i+0x148>
 800b5dc:	6823      	ldr	r3, [r4, #0]
 800b5de:	07de      	lsls	r6, r3, #31
 800b5e0:	d508      	bpl.n	800b5f4 <_printf_i+0x148>
 800b5e2:	6923      	ldr	r3, [r4, #16]
 800b5e4:	6861      	ldr	r1, [r4, #4]
 800b5e6:	4299      	cmp	r1, r3
 800b5e8:	bfde      	ittt	le
 800b5ea:	2330      	movle	r3, #48	; 0x30
 800b5ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b5f4:	1b52      	subs	r2, r2, r5
 800b5f6:	6122      	str	r2, [r4, #16]
 800b5f8:	f8cd a000 	str.w	sl, [sp]
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	aa03      	add	r2, sp, #12
 800b600:	4621      	mov	r1, r4
 800b602:	4640      	mov	r0, r8
 800b604:	f7ff fee4 	bl	800b3d0 <_printf_common>
 800b608:	3001      	adds	r0, #1
 800b60a:	d14a      	bne.n	800b6a2 <_printf_i+0x1f6>
 800b60c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b610:	b004      	add	sp, #16
 800b612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b616:	6823      	ldr	r3, [r4, #0]
 800b618:	f043 0320 	orr.w	r3, r3, #32
 800b61c:	6023      	str	r3, [r4, #0]
 800b61e:	4833      	ldr	r0, [pc, #204]	; (800b6ec <_printf_i+0x240>)
 800b620:	2778      	movs	r7, #120	; 0x78
 800b622:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	6829      	ldr	r1, [r5, #0]
 800b62a:	061f      	lsls	r7, r3, #24
 800b62c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b630:	d402      	bmi.n	800b638 <_printf_i+0x18c>
 800b632:	065f      	lsls	r7, r3, #25
 800b634:	bf48      	it	mi
 800b636:	b2b6      	uxthmi	r6, r6
 800b638:	07df      	lsls	r7, r3, #31
 800b63a:	bf48      	it	mi
 800b63c:	f043 0320 	orrmi.w	r3, r3, #32
 800b640:	6029      	str	r1, [r5, #0]
 800b642:	bf48      	it	mi
 800b644:	6023      	strmi	r3, [r4, #0]
 800b646:	b91e      	cbnz	r6, 800b650 <_printf_i+0x1a4>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	f023 0320 	bic.w	r3, r3, #32
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	2310      	movs	r3, #16
 800b652:	e7a7      	b.n	800b5a4 <_printf_i+0xf8>
 800b654:	4824      	ldr	r0, [pc, #144]	; (800b6e8 <_printf_i+0x23c>)
 800b656:	e7e4      	b.n	800b622 <_printf_i+0x176>
 800b658:	4615      	mov	r5, r2
 800b65a:	e7bd      	b.n	800b5d8 <_printf_i+0x12c>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	6826      	ldr	r6, [r4, #0]
 800b660:	6961      	ldr	r1, [r4, #20]
 800b662:	1d18      	adds	r0, r3, #4
 800b664:	6028      	str	r0, [r5, #0]
 800b666:	0635      	lsls	r5, r6, #24
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	d501      	bpl.n	800b670 <_printf_i+0x1c4>
 800b66c:	6019      	str	r1, [r3, #0]
 800b66e:	e002      	b.n	800b676 <_printf_i+0x1ca>
 800b670:	0670      	lsls	r0, r6, #25
 800b672:	d5fb      	bpl.n	800b66c <_printf_i+0x1c0>
 800b674:	8019      	strh	r1, [r3, #0]
 800b676:	2300      	movs	r3, #0
 800b678:	6123      	str	r3, [r4, #16]
 800b67a:	4615      	mov	r5, r2
 800b67c:	e7bc      	b.n	800b5f8 <_printf_i+0x14c>
 800b67e:	682b      	ldr	r3, [r5, #0]
 800b680:	1d1a      	adds	r2, r3, #4
 800b682:	602a      	str	r2, [r5, #0]
 800b684:	681d      	ldr	r5, [r3, #0]
 800b686:	6862      	ldr	r2, [r4, #4]
 800b688:	2100      	movs	r1, #0
 800b68a:	4628      	mov	r0, r5
 800b68c:	f7f4 fe40 	bl	8000310 <memchr>
 800b690:	b108      	cbz	r0, 800b696 <_printf_i+0x1ea>
 800b692:	1b40      	subs	r0, r0, r5
 800b694:	6060      	str	r0, [r4, #4]
 800b696:	6863      	ldr	r3, [r4, #4]
 800b698:	6123      	str	r3, [r4, #16]
 800b69a:	2300      	movs	r3, #0
 800b69c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6a0:	e7aa      	b.n	800b5f8 <_printf_i+0x14c>
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	462a      	mov	r2, r5
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	47d0      	blx	sl
 800b6ac:	3001      	adds	r0, #1
 800b6ae:	d0ad      	beq.n	800b60c <_printf_i+0x160>
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	079b      	lsls	r3, r3, #30
 800b6b4:	d413      	bmi.n	800b6de <_printf_i+0x232>
 800b6b6:	68e0      	ldr	r0, [r4, #12]
 800b6b8:	9b03      	ldr	r3, [sp, #12]
 800b6ba:	4298      	cmp	r0, r3
 800b6bc:	bfb8      	it	lt
 800b6be:	4618      	movlt	r0, r3
 800b6c0:	e7a6      	b.n	800b610 <_printf_i+0x164>
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	4632      	mov	r2, r6
 800b6c6:	4649      	mov	r1, r9
 800b6c8:	4640      	mov	r0, r8
 800b6ca:	47d0      	blx	sl
 800b6cc:	3001      	adds	r0, #1
 800b6ce:	d09d      	beq.n	800b60c <_printf_i+0x160>
 800b6d0:	3501      	adds	r5, #1
 800b6d2:	68e3      	ldr	r3, [r4, #12]
 800b6d4:	9903      	ldr	r1, [sp, #12]
 800b6d6:	1a5b      	subs	r3, r3, r1
 800b6d8:	42ab      	cmp	r3, r5
 800b6da:	dcf2      	bgt.n	800b6c2 <_printf_i+0x216>
 800b6dc:	e7eb      	b.n	800b6b6 <_printf_i+0x20a>
 800b6de:	2500      	movs	r5, #0
 800b6e0:	f104 0619 	add.w	r6, r4, #25
 800b6e4:	e7f5      	b.n	800b6d2 <_printf_i+0x226>
 800b6e6:	bf00      	nop
 800b6e8:	0800bb0d 	.word	0x0800bb0d
 800b6ec:	0800bb1e 	.word	0x0800bb1e

0800b6f0 <__sflush_r>:
 800b6f0:	898a      	ldrh	r2, [r1, #12]
 800b6f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	0710      	lsls	r0, r2, #28
 800b6fa:	460c      	mov	r4, r1
 800b6fc:	d458      	bmi.n	800b7b0 <__sflush_r+0xc0>
 800b6fe:	684b      	ldr	r3, [r1, #4]
 800b700:	2b00      	cmp	r3, #0
 800b702:	dc05      	bgt.n	800b710 <__sflush_r+0x20>
 800b704:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b706:	2b00      	cmp	r3, #0
 800b708:	dc02      	bgt.n	800b710 <__sflush_r+0x20>
 800b70a:	2000      	movs	r0, #0
 800b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b710:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b712:	2e00      	cmp	r6, #0
 800b714:	d0f9      	beq.n	800b70a <__sflush_r+0x1a>
 800b716:	2300      	movs	r3, #0
 800b718:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b71c:	682f      	ldr	r7, [r5, #0]
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	d032      	beq.n	800b78a <__sflush_r+0x9a>
 800b724:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	075a      	lsls	r2, r3, #29
 800b72a:	d505      	bpl.n	800b738 <__sflush_r+0x48>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	1ac0      	subs	r0, r0, r3
 800b730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b732:	b10b      	cbz	r3, 800b738 <__sflush_r+0x48>
 800b734:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b736:	1ac0      	subs	r0, r0, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	4602      	mov	r2, r0
 800b73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b73e:	6a21      	ldr	r1, [r4, #32]
 800b740:	4628      	mov	r0, r5
 800b742:	47b0      	blx	r6
 800b744:	1c43      	adds	r3, r0, #1
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	d106      	bne.n	800b758 <__sflush_r+0x68>
 800b74a:	6829      	ldr	r1, [r5, #0]
 800b74c:	291d      	cmp	r1, #29
 800b74e:	d82b      	bhi.n	800b7a8 <__sflush_r+0xb8>
 800b750:	4a29      	ldr	r2, [pc, #164]	; (800b7f8 <__sflush_r+0x108>)
 800b752:	410a      	asrs	r2, r1
 800b754:	07d6      	lsls	r6, r2, #31
 800b756:	d427      	bmi.n	800b7a8 <__sflush_r+0xb8>
 800b758:	2200      	movs	r2, #0
 800b75a:	6062      	str	r2, [r4, #4]
 800b75c:	04d9      	lsls	r1, r3, #19
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	6022      	str	r2, [r4, #0]
 800b762:	d504      	bpl.n	800b76e <__sflush_r+0x7e>
 800b764:	1c42      	adds	r2, r0, #1
 800b766:	d101      	bne.n	800b76c <__sflush_r+0x7c>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b903      	cbnz	r3, 800b76e <__sflush_r+0x7e>
 800b76c:	6560      	str	r0, [r4, #84]	; 0x54
 800b76e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b770:	602f      	str	r7, [r5, #0]
 800b772:	2900      	cmp	r1, #0
 800b774:	d0c9      	beq.n	800b70a <__sflush_r+0x1a>
 800b776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b77a:	4299      	cmp	r1, r3
 800b77c:	d002      	beq.n	800b784 <__sflush_r+0x94>
 800b77e:	4628      	mov	r0, r5
 800b780:	f7ff fbea 	bl	800af58 <_free_r>
 800b784:	2000      	movs	r0, #0
 800b786:	6360      	str	r0, [r4, #52]	; 0x34
 800b788:	e7c0      	b.n	800b70c <__sflush_r+0x1c>
 800b78a:	2301      	movs	r3, #1
 800b78c:	4628      	mov	r0, r5
 800b78e:	47b0      	blx	r6
 800b790:	1c41      	adds	r1, r0, #1
 800b792:	d1c8      	bne.n	800b726 <__sflush_r+0x36>
 800b794:	682b      	ldr	r3, [r5, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0c5      	beq.n	800b726 <__sflush_r+0x36>
 800b79a:	2b1d      	cmp	r3, #29
 800b79c:	d001      	beq.n	800b7a2 <__sflush_r+0xb2>
 800b79e:	2b16      	cmp	r3, #22
 800b7a0:	d101      	bne.n	800b7a6 <__sflush_r+0xb6>
 800b7a2:	602f      	str	r7, [r5, #0]
 800b7a4:	e7b1      	b.n	800b70a <__sflush_r+0x1a>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7ac:	81a3      	strh	r3, [r4, #12]
 800b7ae:	e7ad      	b.n	800b70c <__sflush_r+0x1c>
 800b7b0:	690f      	ldr	r7, [r1, #16]
 800b7b2:	2f00      	cmp	r7, #0
 800b7b4:	d0a9      	beq.n	800b70a <__sflush_r+0x1a>
 800b7b6:	0793      	lsls	r3, r2, #30
 800b7b8:	680e      	ldr	r6, [r1, #0]
 800b7ba:	bf08      	it	eq
 800b7bc:	694b      	ldreq	r3, [r1, #20]
 800b7be:	600f      	str	r7, [r1, #0]
 800b7c0:	bf18      	it	ne
 800b7c2:	2300      	movne	r3, #0
 800b7c4:	eba6 0807 	sub.w	r8, r6, r7
 800b7c8:	608b      	str	r3, [r1, #8]
 800b7ca:	f1b8 0f00 	cmp.w	r8, #0
 800b7ce:	dd9c      	ble.n	800b70a <__sflush_r+0x1a>
 800b7d0:	6a21      	ldr	r1, [r4, #32]
 800b7d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7d4:	4643      	mov	r3, r8
 800b7d6:	463a      	mov	r2, r7
 800b7d8:	4628      	mov	r0, r5
 800b7da:	47b0      	blx	r6
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	dc06      	bgt.n	800b7ee <__sflush_r+0xfe>
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b7ec:	e78e      	b.n	800b70c <__sflush_r+0x1c>
 800b7ee:	4407      	add	r7, r0
 800b7f0:	eba8 0800 	sub.w	r8, r8, r0
 800b7f4:	e7e9      	b.n	800b7ca <__sflush_r+0xda>
 800b7f6:	bf00      	nop
 800b7f8:	dfbffffe 	.word	0xdfbffffe

0800b7fc <_fflush_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	690b      	ldr	r3, [r1, #16]
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b913      	cbnz	r3, 800b80c <_fflush_r+0x10>
 800b806:	2500      	movs	r5, #0
 800b808:	4628      	mov	r0, r5
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	b118      	cbz	r0, 800b816 <_fflush_r+0x1a>
 800b80e:	6a03      	ldr	r3, [r0, #32]
 800b810:	b90b      	cbnz	r3, 800b816 <_fflush_r+0x1a>
 800b812:	f7ff fa99 	bl	800ad48 <__sinit>
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <_fflush_r+0xa>
 800b81e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b820:	07d0      	lsls	r0, r2, #31
 800b822:	d404      	bmi.n	800b82e <_fflush_r+0x32>
 800b824:	0599      	lsls	r1, r3, #22
 800b826:	d402      	bmi.n	800b82e <_fflush_r+0x32>
 800b828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b82a:	f7ff fb92 	bl	800af52 <__retarget_lock_acquire_recursive>
 800b82e:	4628      	mov	r0, r5
 800b830:	4621      	mov	r1, r4
 800b832:	f7ff ff5d 	bl	800b6f0 <__sflush_r>
 800b836:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b838:	07da      	lsls	r2, r3, #31
 800b83a:	4605      	mov	r5, r0
 800b83c:	d4e4      	bmi.n	800b808 <_fflush_r+0xc>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	059b      	lsls	r3, r3, #22
 800b842:	d4e1      	bmi.n	800b808 <_fflush_r+0xc>
 800b844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b846:	f7ff fb85 	bl	800af54 <__retarget_lock_release_recursive>
 800b84a:	e7dd      	b.n	800b808 <_fflush_r+0xc>

0800b84c <__swbuf_r>:
 800b84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84e:	460e      	mov	r6, r1
 800b850:	4614      	mov	r4, r2
 800b852:	4605      	mov	r5, r0
 800b854:	b118      	cbz	r0, 800b85e <__swbuf_r+0x12>
 800b856:	6a03      	ldr	r3, [r0, #32]
 800b858:	b90b      	cbnz	r3, 800b85e <__swbuf_r+0x12>
 800b85a:	f7ff fa75 	bl	800ad48 <__sinit>
 800b85e:	69a3      	ldr	r3, [r4, #24]
 800b860:	60a3      	str	r3, [r4, #8]
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	071a      	lsls	r2, r3, #28
 800b866:	d525      	bpl.n	800b8b4 <__swbuf_r+0x68>
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	b31b      	cbz	r3, 800b8b4 <__swbuf_r+0x68>
 800b86c:	6823      	ldr	r3, [r4, #0]
 800b86e:	6922      	ldr	r2, [r4, #16]
 800b870:	1a98      	subs	r0, r3, r2
 800b872:	6963      	ldr	r3, [r4, #20]
 800b874:	b2f6      	uxtb	r6, r6
 800b876:	4283      	cmp	r3, r0
 800b878:	4637      	mov	r7, r6
 800b87a:	dc04      	bgt.n	800b886 <__swbuf_r+0x3a>
 800b87c:	4621      	mov	r1, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f7ff ffbc 	bl	800b7fc <_fflush_r>
 800b884:	b9e0      	cbnz	r0, 800b8c0 <__swbuf_r+0x74>
 800b886:	68a3      	ldr	r3, [r4, #8]
 800b888:	3b01      	subs	r3, #1
 800b88a:	60a3      	str	r3, [r4, #8]
 800b88c:	6823      	ldr	r3, [r4, #0]
 800b88e:	1c5a      	adds	r2, r3, #1
 800b890:	6022      	str	r2, [r4, #0]
 800b892:	701e      	strb	r6, [r3, #0]
 800b894:	6962      	ldr	r2, [r4, #20]
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	429a      	cmp	r2, r3
 800b89a:	d004      	beq.n	800b8a6 <__swbuf_r+0x5a>
 800b89c:	89a3      	ldrh	r3, [r4, #12]
 800b89e:	07db      	lsls	r3, r3, #31
 800b8a0:	d506      	bpl.n	800b8b0 <__swbuf_r+0x64>
 800b8a2:	2e0a      	cmp	r6, #10
 800b8a4:	d104      	bne.n	800b8b0 <__swbuf_r+0x64>
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f7ff ffa7 	bl	800b7fc <_fflush_r>
 800b8ae:	b938      	cbnz	r0, 800b8c0 <__swbuf_r+0x74>
 800b8b0:	4638      	mov	r0, r7
 800b8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	f000 f806 	bl	800b8c8 <__swsetup_r>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	d0d5      	beq.n	800b86c <__swbuf_r+0x20>
 800b8c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b8c4:	e7f4      	b.n	800b8b0 <__swbuf_r+0x64>
	...

0800b8c8 <__swsetup_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4b2a      	ldr	r3, [pc, #168]	; (800b974 <__swsetup_r+0xac>)
 800b8cc:	4605      	mov	r5, r0
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	460c      	mov	r4, r1
 800b8d2:	b118      	cbz	r0, 800b8dc <__swsetup_r+0x14>
 800b8d4:	6a03      	ldr	r3, [r0, #32]
 800b8d6:	b90b      	cbnz	r3, 800b8dc <__swsetup_r+0x14>
 800b8d8:	f7ff fa36 	bl	800ad48 <__sinit>
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8e2:	0718      	lsls	r0, r3, #28
 800b8e4:	d422      	bmi.n	800b92c <__swsetup_r+0x64>
 800b8e6:	06d9      	lsls	r1, r3, #27
 800b8e8:	d407      	bmi.n	800b8fa <__swsetup_r+0x32>
 800b8ea:	2309      	movs	r3, #9
 800b8ec:	602b      	str	r3, [r5, #0]
 800b8ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b8f2:	81a3      	strh	r3, [r4, #12]
 800b8f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b8f8:	e034      	b.n	800b964 <__swsetup_r+0x9c>
 800b8fa:	0758      	lsls	r0, r3, #29
 800b8fc:	d512      	bpl.n	800b924 <__swsetup_r+0x5c>
 800b8fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b900:	b141      	cbz	r1, 800b914 <__swsetup_r+0x4c>
 800b902:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b906:	4299      	cmp	r1, r3
 800b908:	d002      	beq.n	800b910 <__swsetup_r+0x48>
 800b90a:	4628      	mov	r0, r5
 800b90c:	f7ff fb24 	bl	800af58 <_free_r>
 800b910:	2300      	movs	r3, #0
 800b912:	6363      	str	r3, [r4, #52]	; 0x34
 800b914:	89a3      	ldrh	r3, [r4, #12]
 800b916:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b91a:	81a3      	strh	r3, [r4, #12]
 800b91c:	2300      	movs	r3, #0
 800b91e:	6063      	str	r3, [r4, #4]
 800b920:	6923      	ldr	r3, [r4, #16]
 800b922:	6023      	str	r3, [r4, #0]
 800b924:	89a3      	ldrh	r3, [r4, #12]
 800b926:	f043 0308 	orr.w	r3, r3, #8
 800b92a:	81a3      	strh	r3, [r4, #12]
 800b92c:	6923      	ldr	r3, [r4, #16]
 800b92e:	b94b      	cbnz	r3, 800b944 <__swsetup_r+0x7c>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b93a:	d003      	beq.n	800b944 <__swsetup_r+0x7c>
 800b93c:	4621      	mov	r1, r4
 800b93e:	4628      	mov	r0, r5
 800b940:	f000 f850 	bl	800b9e4 <__smakebuf_r>
 800b944:	89a0      	ldrh	r0, [r4, #12]
 800b946:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b94a:	f010 0301 	ands.w	r3, r0, #1
 800b94e:	d00a      	beq.n	800b966 <__swsetup_r+0x9e>
 800b950:	2300      	movs	r3, #0
 800b952:	60a3      	str	r3, [r4, #8]
 800b954:	6963      	ldr	r3, [r4, #20]
 800b956:	425b      	negs	r3, r3
 800b958:	61a3      	str	r3, [r4, #24]
 800b95a:	6923      	ldr	r3, [r4, #16]
 800b95c:	b943      	cbnz	r3, 800b970 <__swsetup_r+0xa8>
 800b95e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b962:	d1c4      	bne.n	800b8ee <__swsetup_r+0x26>
 800b964:	bd38      	pop	{r3, r4, r5, pc}
 800b966:	0781      	lsls	r1, r0, #30
 800b968:	bf58      	it	pl
 800b96a:	6963      	ldrpl	r3, [r4, #20]
 800b96c:	60a3      	str	r3, [r4, #8]
 800b96e:	e7f4      	b.n	800b95a <__swsetup_r+0x92>
 800b970:	2000      	movs	r0, #0
 800b972:	e7f7      	b.n	800b964 <__swsetup_r+0x9c>
 800b974:	24000068 	.word	0x24000068

0800b978 <_sbrk_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d06      	ldr	r5, [pc, #24]	; (800b994 <_sbrk_r+0x1c>)
 800b97c:	2300      	movs	r3, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	4608      	mov	r0, r1
 800b982:	602b      	str	r3, [r5, #0]
 800b984:	f7f5 fcea 	bl	800135c <_sbrk>
 800b988:	1c43      	adds	r3, r0, #1
 800b98a:	d102      	bne.n	800b992 <_sbrk_r+0x1a>
 800b98c:	682b      	ldr	r3, [r5, #0]
 800b98e:	b103      	cbz	r3, 800b992 <_sbrk_r+0x1a>
 800b990:	6023      	str	r3, [r4, #0]
 800b992:	bd38      	pop	{r3, r4, r5, pc}
 800b994:	24000598 	.word	0x24000598

0800b998 <__swhatbuf_r>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	460c      	mov	r4, r1
 800b99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	b096      	sub	sp, #88	; 0x58
 800b9a4:	4615      	mov	r5, r2
 800b9a6:	461e      	mov	r6, r3
 800b9a8:	da0d      	bge.n	800b9c6 <__swhatbuf_r+0x2e>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b9b0:	f04f 0100 	mov.w	r1, #0
 800b9b4:	bf0c      	ite	eq
 800b9b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b9ba:	2340      	movne	r3, #64	; 0x40
 800b9bc:	2000      	movs	r0, #0
 800b9be:	6031      	str	r1, [r6, #0]
 800b9c0:	602b      	str	r3, [r5, #0]
 800b9c2:	b016      	add	sp, #88	; 0x58
 800b9c4:	bd70      	pop	{r4, r5, r6, pc}
 800b9c6:	466a      	mov	r2, sp
 800b9c8:	f000 f848 	bl	800ba5c <_fstat_r>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	dbec      	blt.n	800b9aa <__swhatbuf_r+0x12>
 800b9d0:	9901      	ldr	r1, [sp, #4]
 800b9d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b9d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b9da:	4259      	negs	r1, r3
 800b9dc:	4159      	adcs	r1, r3
 800b9de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9e2:	e7eb      	b.n	800b9bc <__swhatbuf_r+0x24>

0800b9e4 <__smakebuf_r>:
 800b9e4:	898b      	ldrh	r3, [r1, #12]
 800b9e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b9e8:	079d      	lsls	r5, r3, #30
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	d507      	bpl.n	800ba00 <__smakebuf_r+0x1c>
 800b9f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	6123      	str	r3, [r4, #16]
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	6163      	str	r3, [r4, #20]
 800b9fc:	b002      	add	sp, #8
 800b9fe:	bd70      	pop	{r4, r5, r6, pc}
 800ba00:	ab01      	add	r3, sp, #4
 800ba02:	466a      	mov	r2, sp
 800ba04:	f7ff ffc8 	bl	800b998 <__swhatbuf_r>
 800ba08:	9900      	ldr	r1, [sp, #0]
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7ff fb0f 	bl	800b030 <_malloc_r>
 800ba12:	b948      	cbnz	r0, 800ba28 <__smakebuf_r+0x44>
 800ba14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba18:	059a      	lsls	r2, r3, #22
 800ba1a:	d4ef      	bmi.n	800b9fc <__smakebuf_r+0x18>
 800ba1c:	f023 0303 	bic.w	r3, r3, #3
 800ba20:	f043 0302 	orr.w	r3, r3, #2
 800ba24:	81a3      	strh	r3, [r4, #12]
 800ba26:	e7e3      	b.n	800b9f0 <__smakebuf_r+0xc>
 800ba28:	89a3      	ldrh	r3, [r4, #12]
 800ba2a:	6020      	str	r0, [r4, #0]
 800ba2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba30:	81a3      	strh	r3, [r4, #12]
 800ba32:	9b00      	ldr	r3, [sp, #0]
 800ba34:	6163      	str	r3, [r4, #20]
 800ba36:	9b01      	ldr	r3, [sp, #4]
 800ba38:	6120      	str	r0, [r4, #16]
 800ba3a:	b15b      	cbz	r3, 800ba54 <__smakebuf_r+0x70>
 800ba3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba40:	4630      	mov	r0, r6
 800ba42:	f000 f81d 	bl	800ba80 <_isatty_r>
 800ba46:	b128      	cbz	r0, 800ba54 <__smakebuf_r+0x70>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	f023 0303 	bic.w	r3, r3, #3
 800ba4e:	f043 0301 	orr.w	r3, r3, #1
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	89a3      	ldrh	r3, [r4, #12]
 800ba56:	431d      	orrs	r5, r3
 800ba58:	81a5      	strh	r5, [r4, #12]
 800ba5a:	e7cf      	b.n	800b9fc <__smakebuf_r+0x18>

0800ba5c <_fstat_r>:
 800ba5c:	b538      	push	{r3, r4, r5, lr}
 800ba5e:	4d07      	ldr	r5, [pc, #28]	; (800ba7c <_fstat_r+0x20>)
 800ba60:	2300      	movs	r3, #0
 800ba62:	4604      	mov	r4, r0
 800ba64:	4608      	mov	r0, r1
 800ba66:	4611      	mov	r1, r2
 800ba68:	602b      	str	r3, [r5, #0]
 800ba6a:	f7f5 fc4e 	bl	800130a <_fstat>
 800ba6e:	1c43      	adds	r3, r0, #1
 800ba70:	d102      	bne.n	800ba78 <_fstat_r+0x1c>
 800ba72:	682b      	ldr	r3, [r5, #0]
 800ba74:	b103      	cbz	r3, 800ba78 <_fstat_r+0x1c>
 800ba76:	6023      	str	r3, [r4, #0]
 800ba78:	bd38      	pop	{r3, r4, r5, pc}
 800ba7a:	bf00      	nop
 800ba7c:	24000598 	.word	0x24000598

0800ba80 <_isatty_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4d06      	ldr	r5, [pc, #24]	; (800ba9c <_isatty_r+0x1c>)
 800ba84:	2300      	movs	r3, #0
 800ba86:	4604      	mov	r4, r0
 800ba88:	4608      	mov	r0, r1
 800ba8a:	602b      	str	r3, [r5, #0]
 800ba8c:	f7f5 fc4d 	bl	800132a <_isatty>
 800ba90:	1c43      	adds	r3, r0, #1
 800ba92:	d102      	bne.n	800ba9a <_isatty_r+0x1a>
 800ba94:	682b      	ldr	r3, [r5, #0]
 800ba96:	b103      	cbz	r3, 800ba9a <_isatty_r+0x1a>
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	bd38      	pop	{r3, r4, r5, pc}
 800ba9c:	24000598 	.word	0x24000598

0800baa0 <_init>:
 800baa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baa2:	bf00      	nop
 800baa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baa6:	bc08      	pop	{r3}
 800baa8:	469e      	mov	lr, r3
 800baaa:	4770      	bx	lr

0800baac <_fini>:
 800baac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baae:	bf00      	nop
 800bab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bab2:	bc08      	pop	{r3}
 800bab4:	469e      	mov	lr, r3
 800bab6:	4770      	bx	lr
