
tinykart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009738  080002cc  080002cc  000102cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009a04  08009a04  00019a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a44  08009a44  00019a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009a4c  08009a4c  00019a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009a50  08009a50  00019a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08009a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08009a64  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08009ac4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  240000d0  08009b24  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240003cc  08009b24  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c11  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002807  00000000  00000000  00039d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001268  00000000  00000000  0003c560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e7d  00000000  00000000  0003d7c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000337da  00000000  00000000  0003e645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017db0  00000000  00000000  00071e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00151a4b  00000000  00000000  00089bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f5c  00000000  00000000  001db61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001e0578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	; (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	; (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	240000d0 	.word	0x240000d0
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080099ec 	.word	0x080099ec

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	; (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	; (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	; (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	240000d4 	.word	0x240000d4
 8000308:	080099ec 	.word	0x080099ec

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800031c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000320:	f000 b970 	b.w	8000604 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9e08      	ldr	r6, [sp, #32]
 8000342:	460d      	mov	r5, r1
 8000344:	4604      	mov	r4, r0
 8000346:	460f      	mov	r7, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14a      	bne.n	80003e2 <__udivmoddi4+0xa6>
 800034c:	428a      	cmp	r2, r1
 800034e:	4694      	mov	ip, r2
 8000350:	d965      	bls.n	800041e <__udivmoddi4+0xe2>
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	b143      	cbz	r3, 800036a <__udivmoddi4+0x2e>
 8000358:	fa02 fc03 	lsl.w	ip, r2, r3
 800035c:	f1c3 0220 	rsb	r2, r3, #32
 8000360:	409f      	lsls	r7, r3
 8000362:	fa20 f202 	lsr.w	r2, r0, r2
 8000366:	4317      	orrs	r7, r2
 8000368:	409c      	lsls	r4, r3
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fa1f f58c 	uxth.w	r5, ip
 8000372:	fbb7 f1fe 	udiv	r1, r7, lr
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	fb0e 7711 	mls	r7, lr, r1, r7
 800037c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000380:	fb01 f005 	mul.w	r0, r1, r5
 8000384:	4290      	cmp	r0, r2
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x62>
 8000388:	eb1c 0202 	adds.w	r2, ip, r2
 800038c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000390:	f080 811c 	bcs.w	80005cc <__udivmoddi4+0x290>
 8000394:	4290      	cmp	r0, r2
 8000396:	f240 8119 	bls.w	80005cc <__udivmoddi4+0x290>
 800039a:	3902      	subs	r1, #2
 800039c:	4462      	add	r2, ip
 800039e:	1a12      	subs	r2, r2, r0
 80003a0:	b2a4      	uxth	r4, r4
 80003a2:	fbb2 f0fe 	udiv	r0, r2, lr
 80003a6:	fb0e 2210 	mls	r2, lr, r0, r2
 80003aa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003ae:	fb00 f505 	mul.w	r5, r0, r5
 80003b2:	42a5      	cmp	r5, r4
 80003b4:	d90a      	bls.n	80003cc <__udivmoddi4+0x90>
 80003b6:	eb1c 0404 	adds.w	r4, ip, r4
 80003ba:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x294>
 80003c2:	42a5      	cmp	r5, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x294>
 80003c8:	4464      	add	r4, ip
 80003ca:	3802      	subs	r0, #2
 80003cc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	2100      	movs	r1, #0
 80003d4:	b11e      	cbz	r6, 80003de <__udivmoddi4+0xa2>
 80003d6:	40dc      	lsrs	r4, r3
 80003d8:	2300      	movs	r3, #0
 80003da:	e9c6 4300 	strd	r4, r3, [r6]
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0xbc>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f000 80ed 	beq.w	80005c6 <__udivmoddi4+0x28a>
 80003ec:	2100      	movs	r1, #0
 80003ee:	e9c6 0500 	strd	r0, r5, [r6]
 80003f2:	4608      	mov	r0, r1
 80003f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f8:	fab3 f183 	clz	r1, r3
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d149      	bne.n	8000494 <__udivmoddi4+0x158>
 8000400:	42ab      	cmp	r3, r5
 8000402:	d302      	bcc.n	800040a <__udivmoddi4+0xce>
 8000404:	4282      	cmp	r2, r0
 8000406:	f200 80f8 	bhi.w	80005fa <__udivmoddi4+0x2be>
 800040a:	1a84      	subs	r4, r0, r2
 800040c:	eb65 0203 	sbc.w	r2, r5, r3
 8000410:	2001      	movs	r0, #1
 8000412:	4617      	mov	r7, r2
 8000414:	2e00      	cmp	r6, #0
 8000416:	d0e2      	beq.n	80003de <__udivmoddi4+0xa2>
 8000418:	e9c6 4700 	strd	r4, r7, [r6]
 800041c:	e7df      	b.n	80003de <__udivmoddi4+0xa2>
 800041e:	b902      	cbnz	r2, 8000422 <__udivmoddi4+0xe6>
 8000420:	deff      	udf	#255	; 0xff
 8000422:	fab2 f382 	clz	r3, r2
 8000426:	2b00      	cmp	r3, #0
 8000428:	f040 8090 	bne.w	800054c <__udivmoddi4+0x210>
 800042c:	1a8a      	subs	r2, r1, r2
 800042e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000432:	fa1f fe8c 	uxth.w	lr, ip
 8000436:	2101      	movs	r1, #1
 8000438:	fbb2 f5f7 	udiv	r5, r2, r7
 800043c:	fb07 2015 	mls	r0, r7, r5, r2
 8000440:	0c22      	lsrs	r2, r4, #16
 8000442:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000446:	fb0e f005 	mul.w	r0, lr, r5
 800044a:	4290      	cmp	r0, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x124>
 800044e:	eb1c 0202 	adds.w	r2, ip, r2
 8000452:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000456:	d202      	bcs.n	800045e <__udivmoddi4+0x122>
 8000458:	4290      	cmp	r0, r2
 800045a:	f200 80cb 	bhi.w	80005f4 <__udivmoddi4+0x2b8>
 800045e:	4645      	mov	r5, r8
 8000460:	1a12      	subs	r2, r2, r0
 8000462:	b2a4      	uxth	r4, r4
 8000464:	fbb2 f0f7 	udiv	r0, r2, r7
 8000468:	fb07 2210 	mls	r2, r7, r0, r2
 800046c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000470:	fb0e fe00 	mul.w	lr, lr, r0
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x14e>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000480:	d202      	bcs.n	8000488 <__udivmoddi4+0x14c>
 8000482:	45a6      	cmp	lr, r4
 8000484:	f200 80bb 	bhi.w	80005fe <__udivmoddi4+0x2c2>
 8000488:	4610      	mov	r0, r2
 800048a:	eba4 040e 	sub.w	r4, r4, lr
 800048e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000492:	e79f      	b.n	80003d4 <__udivmoddi4+0x98>
 8000494:	f1c1 0720 	rsb	r7, r1, #32
 8000498:	408b      	lsls	r3, r1
 800049a:	fa22 fc07 	lsr.w	ip, r2, r7
 800049e:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a2:	fa05 f401 	lsl.w	r4, r5, r1
 80004a6:	fa20 f307 	lsr.w	r3, r0, r7
 80004aa:	40fd      	lsrs	r5, r7
 80004ac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b0:	4323      	orrs	r3, r4
 80004b2:	fbb5 f8f9 	udiv	r8, r5, r9
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	fb09 5518 	mls	r5, r9, r8, r5
 80004be:	0c1c      	lsrs	r4, r3, #16
 80004c0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c4:	fb08 f50e 	mul.w	r5, r8, lr
 80004c8:	42a5      	cmp	r5, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	fa00 f001 	lsl.w	r0, r0, r1
 80004d2:	d90b      	bls.n	80004ec <__udivmoddi4+0x1b0>
 80004d4:	eb1c 0404 	adds.w	r4, ip, r4
 80004d8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004dc:	f080 8088 	bcs.w	80005f0 <__udivmoddi4+0x2b4>
 80004e0:	42a5      	cmp	r5, r4
 80004e2:	f240 8085 	bls.w	80005f0 <__udivmoddi4+0x2b4>
 80004e6:	f1a8 0802 	sub.w	r8, r8, #2
 80004ea:	4464      	add	r4, ip
 80004ec:	1b64      	subs	r4, r4, r5
 80004ee:	b29d      	uxth	r5, r3
 80004f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f4:	fb09 4413 	mls	r4, r9, r3, r4
 80004f8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004fc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x1da>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 800050c:	d26c      	bcs.n	80005e8 <__udivmoddi4+0x2ac>
 800050e:	45a6      	cmp	lr, r4
 8000510:	d96a      	bls.n	80005e8 <__udivmoddi4+0x2ac>
 8000512:	3b02      	subs	r3, #2
 8000514:	4464      	add	r4, ip
 8000516:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051a:	fba3 9502 	umull	r9, r5, r3, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	42ac      	cmp	r4, r5
 8000524:	46c8      	mov	r8, r9
 8000526:	46ae      	mov	lr, r5
 8000528:	d356      	bcc.n	80005d8 <__udivmoddi4+0x29c>
 800052a:	d053      	beq.n	80005d4 <__udivmoddi4+0x298>
 800052c:	b156      	cbz	r6, 8000544 <__udivmoddi4+0x208>
 800052e:	ebb0 0208 	subs.w	r2, r0, r8
 8000532:	eb64 040e 	sbc.w	r4, r4, lr
 8000536:	fa04 f707 	lsl.w	r7, r4, r7
 800053a:	40ca      	lsrs	r2, r1
 800053c:	40cc      	lsrs	r4, r1
 800053e:	4317      	orrs	r7, r2
 8000540:	e9c6 7400 	strd	r7, r4, [r6]
 8000544:	4618      	mov	r0, r3
 8000546:	2100      	movs	r1, #0
 8000548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800054c:	f1c3 0120 	rsb	r1, r3, #32
 8000550:	fa02 fc03 	lsl.w	ip, r2, r3
 8000554:	fa20 f201 	lsr.w	r2, r0, r1
 8000558:	fa25 f101 	lsr.w	r1, r5, r1
 800055c:	409d      	lsls	r5, r3
 800055e:	432a      	orrs	r2, r5
 8000560:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000564:	fa1f fe8c 	uxth.w	lr, ip
 8000568:	fbb1 f0f7 	udiv	r0, r1, r7
 800056c:	fb07 1510 	mls	r5, r7, r0, r1
 8000570:	0c11      	lsrs	r1, r2, #16
 8000572:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000576:	fb00 f50e 	mul.w	r5, r0, lr
 800057a:	428d      	cmp	r5, r1
 800057c:	fa04 f403 	lsl.w	r4, r4, r3
 8000580:	d908      	bls.n	8000594 <__udivmoddi4+0x258>
 8000582:	eb1c 0101 	adds.w	r1, ip, r1
 8000586:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800058a:	d22f      	bcs.n	80005ec <__udivmoddi4+0x2b0>
 800058c:	428d      	cmp	r5, r1
 800058e:	d92d      	bls.n	80005ec <__udivmoddi4+0x2b0>
 8000590:	3802      	subs	r0, #2
 8000592:	4461      	add	r1, ip
 8000594:	1b49      	subs	r1, r1, r5
 8000596:	b292      	uxth	r2, r2
 8000598:	fbb1 f5f7 	udiv	r5, r1, r7
 800059c:	fb07 1115 	mls	r1, r7, r5, r1
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	fb05 f10e 	mul.w	r1, r5, lr
 80005a8:	4291      	cmp	r1, r2
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x282>
 80005ac:	eb1c 0202 	adds.w	r2, ip, r2
 80005b0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005b4:	d216      	bcs.n	80005e4 <__udivmoddi4+0x2a8>
 80005b6:	4291      	cmp	r1, r2
 80005b8:	d914      	bls.n	80005e4 <__udivmoddi4+0x2a8>
 80005ba:	3d02      	subs	r5, #2
 80005bc:	4462      	add	r2, ip
 80005be:	1a52      	subs	r2, r2, r1
 80005c0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c4:	e738      	b.n	8000438 <__udivmoddi4+0xfc>
 80005c6:	4631      	mov	r1, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e708      	b.n	80003de <__udivmoddi4+0xa2>
 80005cc:	4639      	mov	r1, r7
 80005ce:	e6e6      	b.n	800039e <__udivmoddi4+0x62>
 80005d0:	4610      	mov	r0, r2
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x90>
 80005d4:	4548      	cmp	r0, r9
 80005d6:	d2a9      	bcs.n	800052c <__udivmoddi4+0x1f0>
 80005d8:	ebb9 0802 	subs.w	r8, r9, r2
 80005dc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e0:	3b01      	subs	r3, #1
 80005e2:	e7a3      	b.n	800052c <__udivmoddi4+0x1f0>
 80005e4:	4645      	mov	r5, r8
 80005e6:	e7ea      	b.n	80005be <__udivmoddi4+0x282>
 80005e8:	462b      	mov	r3, r5
 80005ea:	e794      	b.n	8000516 <__udivmoddi4+0x1da>
 80005ec:	4640      	mov	r0, r8
 80005ee:	e7d1      	b.n	8000594 <__udivmoddi4+0x258>
 80005f0:	46d0      	mov	r8, sl
 80005f2:	e77b      	b.n	80004ec <__udivmoddi4+0x1b0>
 80005f4:	3d02      	subs	r5, #2
 80005f6:	4462      	add	r2, ip
 80005f8:	e732      	b.n	8000460 <__udivmoddi4+0x124>
 80005fa:	4608      	mov	r0, r1
 80005fc:	e70a      	b.n	8000414 <__udivmoddi4+0xd8>
 80005fe:	4464      	add	r4, ip
 8000600:	3802      	subs	r0, #2
 8000602:	e742      	b.n	800048a <__udivmoddi4+0x14e>

08000604 <__aeabi_idiv0>:
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop

08000608 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060c:	f000 fe6c 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000610:	f000 f810 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000614:	f000 fa28 	bl	8000a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000618:	f000 fa06 	bl	8000a28 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800061c:	f000 f9b0 	bl	8000980 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000620:	f000 f9fa 	bl	8000a18 <MX_USB_OTG_HS_USB_Init>
  MX_TIM1_Init();
 8000624:	f000 f8c4 	bl	80007b0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000628:	f000 f95e 	bl	80008e8 <MX_USART2_UART_Init>
  MX_ETH_Init();
 800062c:	f000 f874 	bl	8000718 <MX_ETH_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x28>
	...

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	; 0x70
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800063e:	224c      	movs	r2, #76	; 0x4c
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f009 f9a6 	bl	8009994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2220      	movs	r2, #32
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f009 f9a0 	bl	8009994 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000654:	2002      	movs	r0, #2
 8000656:	f004 f805 	bl	8004664 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065a:	2300      	movs	r3, #0
 800065c:	603b      	str	r3, [r7, #0]
 800065e:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <SystemClock_Config+0xe0>)
 8000660:	699b      	ldr	r3, [r3, #24]
 8000662:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000666:	4a2b      	ldr	r2, [pc, #172]	; (8000714 <SystemClock_Config+0xe0>)
 8000668:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066c:	6193      	str	r3, [r2, #24]
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <SystemClock_Config+0xe0>)
 8000670:	699b      	ldr	r3, [r3, #24]
 8000672:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800067a:	bf00      	nop
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <SystemClock_Config+0xe0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000684:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000688:	d1f8      	bne.n	800067c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800068a:	2321      	movs	r3, #33	; 0x21
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000694:	2301      	movs	r3, #1
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069c:	2302      	movs	r3, #2
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 27;
 80006a4:	231b      	movs	r3, #27
 80006a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80006a8:	2301      	movs	r3, #1
 80006aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ac:	2304      	movs	r3, #4
 80006ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006b4:	230c      	movs	r3, #12
 80006b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 f807 	bl	80046d8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006d0:	f000 fac6 	bl	8000c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	233f      	movs	r3, #63	; 0x3f
 80006d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d8:	2303      	movs	r3, #3
 80006da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80006e4:	2340      	movs	r3, #64	; 0x40
 80006e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 80006e8:	2350      	movs	r3, #80	; 0x50
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80006ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 fbc6 	bl	8004e8c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000706:	f000 faab 	bl	8000c60 <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3770      	adds	r7, #112	; 0x70
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	58024800 	.word	0x58024800

08000718 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ETH_Init+0x80>)
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MX_ETH_Init+0x84>)
 8000720:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <MX_ETH_Init+0x88>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <MX_ETH_Init+0x88>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800072e:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <MX_ETH_Init+0x88>)
 8000730:	22e1      	movs	r2, #225	; 0xe1
 8000732:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000734:	4b1a      	ldr	r3, [pc, #104]	; (80007a0 <MX_ETH_Init+0x88>)
 8000736:	2200      	movs	r2, #0
 8000738:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800073a:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <MX_ETH_Init+0x88>)
 800073c:	2200      	movs	r2, #0
 800073e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <MX_ETH_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ETH_Init+0x80>)
 8000748:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <MX_ETH_Init+0x88>)
 800074a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_ETH_Init+0x80>)
 800074e:	2201      	movs	r2, #1
 8000750:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ETH_Init+0x80>)
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <MX_ETH_Init+0x8c>)
 8000756:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ETH_Init+0x80>)
 800075a:	4a13      	ldr	r2, [pc, #76]	; (80007a8 <MX_ETH_Init+0x90>)
 800075c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_ETH_Init+0x80>)
 8000760:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000764:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000766:	480c      	ldr	r0, [pc, #48]	; (8000798 <MX_ETH_Init+0x80>)
 8000768:	f003 f996 	bl	8003a98 <HAL_ETH_Init>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000772:	f000 fa75 	bl	8000c60 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000776:	2238      	movs	r2, #56	; 0x38
 8000778:	2100      	movs	r1, #0
 800077a:	480c      	ldr	r0, [pc, #48]	; (80007ac <MX_ETH_Init+0x94>)
 800077c:	f009 f90a 	bl	8009994 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <MX_ETH_Init+0x94>)
 8000782:	2221      	movs	r2, #33	; 0x21
 8000784:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_ETH_Init+0x94>)
 8000788:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800078c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078e:	4b07      	ldr	r3, [pc, #28]	; (80007ac <MX_ETH_Init+0x94>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	24000124 	.word	0x24000124
 800079c:	40028000 	.word	0x40028000
 80007a0:	240003c0 	.word	0x240003c0
 80007a4:	24000070 	.word	0x24000070
 80007a8:	24000010 	.word	0x24000010
 80007ac:	240000ec 	.word	0x240000ec

080007b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b098      	sub	sp, #96	; 0x60
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2234      	movs	r2, #52	; 0x34
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f009 f8d9 	bl	8009994 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e2:	4b3f      	ldr	r3, [pc, #252]	; (80008e0 <MX_TIM1_Init+0x130>)
 80007e4:	4a3f      	ldr	r2, [pc, #252]	; (80008e4 <MX_TIM1_Init+0x134>)
 80007e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007e8:	4b3d      	ldr	r3, [pc, #244]	; (80008e0 <MX_TIM1_Init+0x130>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ee:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <MX_TIM1_Init+0x130>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007f4:	4b3a      	ldr	r3, [pc, #232]	; (80008e0 <MX_TIM1_Init+0x130>)
 80007f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007fc:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <MX_TIM1_Init+0x130>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000802:	4b37      	ldr	r3, [pc, #220]	; (80008e0 <MX_TIM1_Init+0x130>)
 8000804:	2200      	movs	r2, #0
 8000806:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <MX_TIM1_Init+0x130>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800080e:	4834      	ldr	r0, [pc, #208]	; (80008e0 <MX_TIM1_Init+0x130>)
 8000810:	f006 fc8a 	bl	8007128 <HAL_TIM_PWM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800081a:	f000 fa21 	bl	8000c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081e:	2300      	movs	r3, #0
 8000820:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800082a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800082e:	4619      	mov	r1, r3
 8000830:	482b      	ldr	r0, [pc, #172]	; (80008e0 <MX_TIM1_Init+0x130>)
 8000832:	f007 f961 	bl	8007af8 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800083c:	f000 fa10 	bl	8000c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	; 0x60
 8000842:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800084c:	2300      	movs	r3, #0
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000858:	2300      	movs	r3, #0
 800085a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800085c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000860:	2200      	movs	r2, #0
 8000862:	4619      	mov	r1, r3
 8000864:	481e      	ldr	r0, [pc, #120]	; (80008e0 <MX_TIM1_Init+0x130>)
 8000866:	f006 fcb7 	bl	80071d8 <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000870:	f000 f9f6 	bl	8000c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000874:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000878:	2204      	movs	r2, #4
 800087a:	4619      	mov	r1, r3
 800087c:	4818      	ldr	r0, [pc, #96]	; (80008e0 <MX_TIM1_Init+0x130>)
 800087e:	f006 fcab 	bl	80071d8 <HAL_TIM_PWM_ConfigChannel>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000888:	f000 f9ea 	bl	8000c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000894:	2300      	movs	r3, #0
 8000896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM1_Init+0x130>)
 80008c2:	f007 f9b5 	bl	8007c30 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80008cc:	f000 f9c8 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM1_Init+0x130>)
 80008d2:	f000 fad5 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3760      	adds	r7, #96	; 0x60
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	240001d4 	.word	0x240001d4
 80008e4:	40010000 	.word	0x40010000

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008f4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000932:	f007 fa1d 	bl	8007d70 <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f990 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000944:	f008 ff5c 	bl	8009800 <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f987 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000956:	f008 ff91 	bl	800987c <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f97e 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000966:	f008 ff12 	bl	800978e <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f976 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	24000220 	.word	0x24000220
 800097c:	40004400 	.word	0x40004400

08000980 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000984:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_USART3_UART_Init+0x94>)
 8000988:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800099e:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c8:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ca:	f007 f9d1 	bl	8007d70 <HAL_UART_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f944 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009d8:	2100      	movs	r1, #0
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009dc:	f008 ff10 	bl	8009800 <HAL_UARTEx_SetTxFifoThreshold>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80009e6:	f000 f93b 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ea:	2100      	movs	r1, #0
 80009ec:	4808      	ldr	r0, [pc, #32]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009ee:	f008 ff45 	bl	800987c <HAL_UARTEx_SetRxFifoThreshold>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009f8:	f000 f932 	bl	8000c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009fc:	4804      	ldr	r0, [pc, #16]	; (8000a10 <MX_USART3_UART_Init+0x90>)
 80009fe:	f008 fec6 	bl	800978e <HAL_UARTEx_DisableFifoMode>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a08:	f000 f92a 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	240002b4 	.word	0x240002b4
 8000a14:	40004800 	.word	0x40004800

08000a18 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a34:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_DMA_Init+0x3c>)
 8000a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	200b      	movs	r0, #11
 8000a52:	f000 fdca 	bl	80015ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a56:	200b      	movs	r0, #11
 8000a58:	f000 fde1 	bl	800161e <HAL_NVIC_EnableIRQ>

}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	58024400 	.word	0x58024400

08000a68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a84:	4a6f      	ldr	r2, [pc, #444]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000a86:	f043 0304 	orr.w	r3, r3, #4
 8000a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8e:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a94:	f003 0304 	and.w	r3, r3, #4
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9c:	4b69      	ldr	r3, [pc, #420]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a68      	ldr	r2, [pc, #416]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b65      	ldr	r3, [pc, #404]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aba:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a60      	ldr	r2, [pc, #384]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b5e      	ldr	r3, [pc, #376]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0301 	and.w	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b5a      	ldr	r3, [pc, #360]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ade:	4a59      	ldr	r2, [pc, #356]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae8:	4b56      	ldr	r3, [pc, #344]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af6:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afc:	4a51      	ldr	r2, [pc, #324]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b06:	4b4f      	ldr	r3, [pc, #316]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	60bb      	str	r3, [r7, #8]
 8000b12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b14:	4b4b      	ldr	r3, [pc, #300]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1a:	4a4a      	ldr	r2, [pc, #296]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b1c:	f043 0308 	orr.w	r3, r3, #8
 8000b20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b24:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b38:	4a42      	ldr	r2, [pc, #264]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b42:	4b40      	ldr	r3, [pc, #256]	; (8000c44 <MX_GPIO_Init+0x1dc>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f244 0101 	movw	r1, #16385	; 0x4001
 8000b56:	483c      	ldr	r0, [pc, #240]	; (8000c48 <MX_GPIO_Init+0x1e0>)
 8000b58:	f003 fd6a 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	483a      	ldr	r0, [pc, #232]	; (8000c4c <MX_GPIO_Init+0x1e4>)
 8000b64:	f003 fd64 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2102      	movs	r1, #2
 8000b6c:	4838      	ldr	r0, [pc, #224]	; (8000c50 <MX_GPIO_Init+0x1e8>)
 8000b6e:	f003 fd5f 	bl	8004630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f107 031c 	add.w	r3, r7, #28
 8000b84:	4619      	mov	r1, r3
 8000b86:	4833      	ldr	r0, [pc, #204]	; (8000c54 <MX_GPIO_Init+0x1ec>)
 8000b88:	f003 fbaa 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000b8c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4828      	ldr	r0, [pc, #160]	; (8000c48 <MX_GPIO_Init+0x1e0>)
 8000ba6:	f003 fb9b 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000bbc:	f107 031c 	add.w	r3, r7, #28
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4822      	ldr	r0, [pc, #136]	; (8000c4c <MX_GPIO_Init+0x1e4>)
 8000bc4:	f003 fb8c 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bcc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	4619      	mov	r1, r3
 8000bdc:	481e      	ldr	r0, [pc, #120]	; (8000c58 <MX_GPIO_Init+0x1f0>)
 8000bde:	f003 fb7f 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000be6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4819      	ldr	r0, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x1f4>)
 8000bf8:	f003 fb72 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000bfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000c0e:	230a      	movs	r3, #10
 8000c10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4619      	mov	r1, r3
 8000c18:	4810      	ldr	r0, [pc, #64]	; (8000c5c <MX_GPIO_Init+0x1f4>)
 8000c1a:	f003 fb61 	bl	80042e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_GPIO_Init+0x1e8>)
 8000c36:	f003 fb53 	bl	80042e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3a:	bf00      	nop
 8000c3c:	3730      	adds	r7, #48	; 0x30
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58020400 	.word	0x58020400
 8000c4c:	58020c00 	.word	0x58020c00
 8000c50:	58021000 	.word	0x58021000
 8000c54:	58020800 	.word	0x58020800
 8000c58:	58021800 	.word	0x58021800
 8000c5c:	58020000 	.word	0x58020000

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <Error_Handler+0x8>
	...

08000c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_MspInit+0x30>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c78:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <HAL_MspInit+0x30>)
 8000c7a:	f043 0302 	orr.w	r3, r3, #2
 8000c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_MspInit+0x30>)
 8000c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c88:	f003 0302 	and.w	r3, r3, #2
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	58024400 	.word	0x58024400

08000ca0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	; 0x38
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a59      	ldr	r2, [pc, #356]	; (8000e24 <HAL_ETH_MspInit+0x184>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	f040 80ab 	bne.w	8000e1a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000cc4:	4b58      	ldr	r3, [pc, #352]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cca:	4a57      	ldr	r2, [pc, #348]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cd4:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cde:	623b      	str	r3, [r7, #32]
 8000ce0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ce2:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ce8:	4a4f      	ldr	r2, [pc, #316]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000cea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cf2:	4b4d      	ldr	r3, [pc, #308]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000cf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d00:	4b49      	ldr	r3, [pc, #292]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d06:	4a48      	ldr	r2, [pc, #288]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000d10:	4b45      	ldr	r3, [pc, #276]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1e:	4b42      	ldr	r3, [pc, #264]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d24:	4a40      	ldr	r2, [pc, #256]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	4b3a      	ldr	r3, [pc, #232]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d42:	4a39      	ldr	r2, [pc, #228]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4c:	4b36      	ldr	r3, [pc, #216]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	4a31      	ldr	r2, [pc, #196]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d62:	f043 0302 	orr.w	r3, r3, #2
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d6a:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d96:	2332      	movs	r3, #50	; 0x32
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da6:	230b      	movs	r3, #11
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	481e      	ldr	r0, [pc, #120]	; (8000e2c <HAL_ETH_MspInit+0x18c>)
 8000db2:	f003 fa95 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000db6:	2386      	movs	r3, #134	; 0x86
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4817      	ldr	r0, [pc, #92]	; (8000e30 <HAL_ETH_MspInit+0x190>)
 8000dd2:	f003 fa85 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000de8:	230b      	movs	r3, #11
 8000dea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4810      	ldr	r0, [pc, #64]	; (8000e34 <HAL_ETH_MspInit+0x194>)
 8000df4:	f003 fa74 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000df8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0a:	230b      	movs	r3, #11
 8000e0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4808      	ldr	r0, [pc, #32]	; (8000e38 <HAL_ETH_MspInit+0x198>)
 8000e16:	f003 fa63 	bl	80042e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3738      	adds	r7, #56	; 0x38
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40028000 	.word	0x40028000
 8000e28:	58024400 	.word	0x58024400
 8000e2c:	58020800 	.word	0x58020800
 8000e30:	58020000 	.word	0x58020000
 8000e34:	58020400 	.word	0x58020400
 8000e38:	58021800 	.word	0x58021800

08000e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <HAL_TIM_PWM_MspInit+0x3c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10e      	bne.n	8000e6c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e54:	4a09      	ldr	r2, [pc, #36]	; (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <HAL_TIM_PWM_MspInit+0x40>)
 8000e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	40010000 	.word	0x40010000
 8000e7c:	58024400 	.word	0x58024400

08000e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a13      	ldr	r2, [pc, #76]	; (8000eec <HAL_TIM_MspPostInit+0x6c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11f      	bne.n	8000ee2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <HAL_TIM_MspPostInit+0x70>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8000ec0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000ec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 030c 	add.w	r3, r7, #12
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_TIM_MspPostInit+0x74>)
 8000ede:	f003 f9ff 	bl	80042e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3720      	adds	r7, #32
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40010000 	.word	0x40010000
 8000ef0:	58024400 	.word	0x58024400
 8000ef4:	58021000 	.word	0x58021000

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0bc      	sub	sp, #240	; 0xf0
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0320 	add.w	r3, r7, #32
 8000f14:	22b8      	movs	r2, #184	; 0xb8
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f008 fd3b 	bl	8009994 <memset>
  if(huart->Instance==USART2)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a7a      	ldr	r2, [pc, #488]	; (800110c <HAL_UART_MspInit+0x214>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	f040 80a1 	bne.w	800106c <HAL_UART_MspInit+0x174>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f2a:	f04f 0202 	mov.w	r2, #2
 8000f2e:	f04f 0300 	mov.w	r3, #0
 8000f32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3c:	f107 0320 	add.w	r3, r7, #32
 8000f40:	4618      	mov	r0, r3
 8000f42:	f004 fb2f 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000f4c:	f7ff fe88 	bl	8000c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f50:	4b6f      	ldr	r3, [pc, #444]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f56:	4a6e      	ldr	r2, [pc, #440]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b68      	ldr	r3, [pc, #416]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a66      	ldr	r2, [pc, #408]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b64      	ldr	r3, [pc, #400]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0301 	and.w	r3, r3, #1
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f8c:	4b60      	ldr	r3, [pc, #384]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a5f      	ldr	r2, [pc, #380]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f94:	f043 0308 	orr.w	r3, r3, #8
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b5c      	ldr	r3, [pc, #368]	; (8001110 <HAL_UART_MspInit+0x218>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000faa:	2308      	movs	r3, #8
 8000fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4851      	ldr	r0, [pc, #324]	; (8001114 <HAL_UART_MspInit+0x21c>)
 8000fd0:	f003 f986 	bl	80042e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fec:	2307      	movs	r3, #7
 8000fee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4847      	ldr	r0, [pc, #284]	; (8001118 <HAL_UART_MspInit+0x220>)
 8000ffa:	f003 f971 	bl	80042e0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream0;
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <HAL_UART_MspInit+0x224>)
 8001000:	4a47      	ldr	r2, [pc, #284]	; (8001120 <HAL_UART_MspInit+0x228>)
 8001002:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001004:	4b45      	ldr	r3, [pc, #276]	; (800111c <HAL_UART_MspInit+0x224>)
 8001006:	222b      	movs	r2, #43	; 0x2b
 8001008:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800100a:	4b44      	ldr	r3, [pc, #272]	; (800111c <HAL_UART_MspInit+0x224>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001010:	4b42      	ldr	r3, [pc, #264]	; (800111c <HAL_UART_MspInit+0x224>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001016:	4b41      	ldr	r3, [pc, #260]	; (800111c <HAL_UART_MspInit+0x224>)
 8001018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800101c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	4b3f      	ldr	r3, [pc, #252]	; (800111c <HAL_UART_MspInit+0x224>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001024:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_UART_MspInit+0x224>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <HAL_UART_MspInit+0x224>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001030:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_UART_MspInit+0x224>)
 8001032:	2200      	movs	r2, #0
 8001034:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <HAL_UART_MspInit+0x224>)
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800103c:	4837      	ldr	r0, [pc, #220]	; (800111c <HAL_UART_MspInit+0x224>)
 800103e:	f000 fb09 	bl	8001654 <HAL_DMA_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001048:	f7ff fe0a 	bl	8000c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a33      	ldr	r2, [pc, #204]	; (800111c <HAL_UART_MspInit+0x224>)
 8001050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8001054:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_UART_MspInit+0x224>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	2026      	movs	r0, #38	; 0x26
 8001060:	f000 fac3 	bl	80015ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001064:	2026      	movs	r0, #38	; 0x26
 8001066:	f000 fada 	bl	800161e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	e04b      	b.n	8001104 <HAL_UART_MspInit+0x20c>
  else if(huart->Instance==USART3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a2c      	ldr	r2, [pc, #176]	; (8001124 <HAL_UART_MspInit+0x22c>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d146      	bne.n	8001104 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001076:	f04f 0202 	mov.w	r2, #2
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	f107 0320 	add.w	r3, r7, #32
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fa89 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x1a4>
      Error_Handler();
 8001098:	f7ff fde2 	bl	8000c60 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_UART_MspInit+0x218>)
 800109e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010a2:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <HAL_UART_MspInit+0x218>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_UART_MspInit+0x218>)
 80010ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <HAL_UART_MspInit+0x218>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	4a13      	ldr	r2, [pc, #76]	; (8001110 <HAL_UART_MspInit+0x218>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_UART_MspInit+0x218>)
 80010cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80010d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010f2:	2307      	movs	r3, #7
 80010f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010fc:	4619      	mov	r1, r3
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_UART_MspInit+0x220>)
 8001100:	f003 f8ee 	bl	80042e0 <HAL_GPIO_Init>
}
 8001104:	bf00      	nop
 8001106:	37f0      	adds	r7, #240	; 0xf0
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40004400 	.word	0x40004400
 8001110:	58024400 	.word	0x58024400
 8001114:	58020000 	.word	0x58020000
 8001118:	58020c00 	.word	0x58020c00
 800111c:	24000348 	.word	0x24000348
 8001120:	40020010 	.word	0x40020010
 8001124:	40004800 	.word	0x40004800

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001174:	f000 f92a 	bl	80013cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}

0800117c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA1_Stream0_IRQHandler+0x10>)
 8001182:	f001 fb23 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	24000348 	.word	0x24000348

08001190 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <USART2_IRQHandler+0x10>)
 8001196:	f006 fe3b 	bl	8007e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	24000220 	.word	0x24000220

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011a8:	4b32      	ldr	r3, [pc, #200]	; (8001274 <SystemInit+0xd0>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a31      	ldr	r2, [pc, #196]	; (8001274 <SystemInit+0xd0>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <SystemInit+0xd4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	2b06      	cmp	r3, #6
 80011c2:	d807      	bhi.n	80011d4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <SystemInit+0xd4>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f023 030f 	bic.w	r3, r3, #15
 80011cc:	4a2a      	ldr	r2, [pc, #168]	; (8001278 <SystemInit+0xd4>)
 80011ce:	f043 0307 	orr.w	r3, r3, #7
 80011d2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80011d4:	4b29      	ldr	r3, [pc, #164]	; (800127c <SystemInit+0xd8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a28      	ldr	r2, [pc, #160]	; (800127c <SystemInit+0xd8>)
 80011da:	f043 0301 	orr.w	r3, r3, #1
 80011de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011e0:	4b26      	ldr	r3, [pc, #152]	; (800127c <SystemInit+0xd8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80011e6:	4b25      	ldr	r3, [pc, #148]	; (800127c <SystemInit+0xd8>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4924      	ldr	r1, [pc, #144]	; (800127c <SystemInit+0xd8>)
 80011ec:	4b24      	ldr	r3, [pc, #144]	; (8001280 <SystemInit+0xdc>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011f2:	4b21      	ldr	r3, [pc, #132]	; (8001278 <SystemInit+0xd4>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <SystemInit+0xd4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f023 030f 	bic.w	r3, r3, #15
 8001206:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <SystemInit+0xd4>)
 8001208:	f043 0307 	orr.w	r3, r3, #7
 800120c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <SystemInit+0xd8>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001214:	4b19      	ldr	r3, [pc, #100]	; (800127c <SystemInit+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <SystemInit+0xd8>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <SystemInit+0xd8>)
 8001222:	4a18      	ldr	r2, [pc, #96]	; (8001284 <SystemInit+0xe0>)
 8001224:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001226:	4b15      	ldr	r3, [pc, #84]	; (800127c <SystemInit+0xd8>)
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <SystemInit+0xe4>)
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800122c:	4b13      	ldr	r3, [pc, #76]	; (800127c <SystemInit+0xd8>)
 800122e:	4a17      	ldr	r2, [pc, #92]	; (800128c <SystemInit+0xe8>)
 8001230:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <SystemInit+0xd8>)
 8001234:	2200      	movs	r2, #0
 8001236:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001238:	4b10      	ldr	r3, [pc, #64]	; (800127c <SystemInit+0xd8>)
 800123a:	4a14      	ldr	r2, [pc, #80]	; (800128c <SystemInit+0xe8>)
 800123c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <SystemInit+0xd8>)
 8001240:	2200      	movs	r2, #0
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001244:	4b0d      	ldr	r3, [pc, #52]	; (800127c <SystemInit+0xd8>)
 8001246:	4a11      	ldr	r2, [pc, #68]	; (800128c <SystemInit+0xe8>)
 8001248:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <SystemInit+0xd8>)
 800124c:	2200      	movs	r2, #0
 800124e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001250:	4b0a      	ldr	r3, [pc, #40]	; (800127c <SystemInit+0xd8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a09      	ldr	r2, [pc, #36]	; (800127c <SystemInit+0xd8>)
 8001256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800125a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800125c:	4b07      	ldr	r3, [pc, #28]	; (800127c <SystemInit+0xd8>)
 800125e:	2200      	movs	r2, #0
 8001260:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <SystemInit+0xec>)
 8001264:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001268:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00
 8001278:	52002000 	.word	0x52002000
 800127c:	58024400 	.word	0x58024400
 8001280:	eaf6ed7f 	.word	0xeaf6ed7f
 8001284:	02020200 	.word	0x02020200
 8001288:	01ff0000 	.word	0x01ff0000
 800128c:	01010280 	.word	0x01010280
 8001290:	52004000 	.word	0x52004000

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001298:	f7ff ff84 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129e:	490d      	ldr	r1, [pc, #52]	; (80012d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a4:	e002      	b.n	80012ac <LoopCopyDataInit>

080012a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012aa:	3304      	adds	r3, #4

080012ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b0:	d3f9      	bcc.n	80012a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b4:	4c0a      	ldr	r4, [pc, #40]	; (80012e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b8:	e001      	b.n	80012be <LoopFillZerobss>

080012ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012bc:	3204      	adds	r2, #4

080012be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c0:	d3fb      	bcc.n	80012ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c2:	f008 fb6f 	bl	80099a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f99f 	bl	8000608 <main>
  bx  lr
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80012d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012d8:	08009a54 	.word	0x08009a54
  ldr r2, =_sbss
 80012dc:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80012e0:	240003cc 	.word	0x240003cc

080012e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC3_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ee:	2003      	movs	r0, #3
 80012f0:	f000 f970 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f4:	f003 ff80 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80012f8:	4602      	mov	r2, r0
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_Init+0x68>)
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	0a1b      	lsrs	r3, r3, #8
 8001300:	f003 030f 	and.w	r3, r3, #15
 8001304:	4913      	ldr	r1, [pc, #76]	; (8001354 <HAL_Init+0x6c>)
 8001306:	5ccb      	ldrb	r3, [r1, r3]
 8001308:	f003 031f 	and.w	r3, r3, #31
 800130c:	fa22 f303 	lsr.w	r3, r2, r3
 8001310:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_Init+0x68>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	4a0e      	ldr	r2, [pc, #56]	; (8001354 <HAL_Init+0x6c>)
 800131c:	5cd3      	ldrb	r3, [r2, r3]
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	fa22 f303 	lsr.w	r3, r2, r3
 8001328:	4a0b      	ldr	r2, [pc, #44]	; (8001358 <HAL_Init+0x70>)
 800132a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <HAL_Init+0x74>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f814 	bl	8001360 <HAL_InitTick>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e002      	b.n	8001348 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001342:	f7ff fc93 	bl	8000c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	58024400 	.word	0x58024400
 8001354:	08009a04 	.word	0x08009a04
 8001358:	24000004 	.word	0x24000004
 800135c:	24000000 	.word	0x24000000

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001368:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e021      	b.n	80013b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001374:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <HAL_InitTick+0x64>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <HAL_InitTick+0x60>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	4619      	mov	r1, r3
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	fbb3 f3f1 	udiv	r3, r3, r1
 8001386:	fbb2 f3f3 	udiv	r3, r2, r3
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f955 	bl	800163a <HAL_SYSTICK_Config>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e00e      	b.n	80013b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b0f      	cmp	r3, #15
 800139e:	d80a      	bhi.n	80013b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a0:	2200      	movs	r2, #0
 80013a2:	6879      	ldr	r1, [r7, #4]
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013a8:	f000 f91f 	bl	80015ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ac:	4a06      	ldr	r2, [pc, #24]	; (80013c8 <HAL_InitTick+0x68>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
 80013b4:	e000      	b.n	80013b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	2400000c 	.word	0x2400000c
 80013c4:	24000000 	.word	0x24000000
 80013c8:	24000008 	.word	0x24000008

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2400000c 	.word	0x2400000c
 80013f0:	240003c8 	.word	0x240003c8

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	240003c8 	.word	0x240003c8

0800140c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800141c:	4904      	ldr	r1, [pc, #16]	; (8001430 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	58000400 	.word	0x58000400

08001434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001444:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001450:	4013      	ands	r3, r2
 8001452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <__NVIC_SetPriorityGrouping+0x44>)
 800145e:	4313      	orrs	r3, r2
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x40>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000ed00 	.word	0xe000ed00
 8001478:	05fa0000 	.word	0x05fa0000

0800147c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <__NVIC_GetPriorityGrouping+0x18>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	0a1b      	lsrs	r3, r3, #8
 8001486:	f003 0307 	and.w	r3, r3, #7
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	db0b      	blt.n	80014c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	f003 021f 	and.w	r2, r3, #31
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <__NVIC_EnableIRQ+0x38>)
 80014b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	2001      	movs	r0, #1
 80014ba:	fa00 f202 	lsl.w	r2, r0, r2
 80014be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000e100 	.word	0xe000e100

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	; (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	; 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	; 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015b4:	f7ff ff8e 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff29 	bl	8001434 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff40 	bl	800147c <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff ff33 	bl	8001498 <__NVIC_EnableIRQ>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b082      	sub	sp, #8
 800163e:	af00      	add	r7, sp, #0
 8001640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff ffa4 	bl	8001590 <SysTick_Config>
 8001648:	4603      	mov	r3, r0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff feca 	bl	80013f4 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e312      	b.n	8001c92 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a66      	ldr	r2, [pc, #408]	; (800180c <HAL_DMA_Init+0x1b8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d04a      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a65      	ldr	r2, [pc, #404]	; (8001810 <HAL_DMA_Init+0x1bc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d045      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a63      	ldr	r2, [pc, #396]	; (8001814 <HAL_DMA_Init+0x1c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d040      	beq.n	800170c <HAL_DMA_Init+0xb8>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a62      	ldr	r2, [pc, #392]	; (8001818 <HAL_DMA_Init+0x1c4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d03b      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a60      	ldr	r2, [pc, #384]	; (800181c <HAL_DMA_Init+0x1c8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d036      	beq.n	800170c <HAL_DMA_Init+0xb8>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a5f      	ldr	r2, [pc, #380]	; (8001820 <HAL_DMA_Init+0x1cc>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d031      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <HAL_DMA_Init+0x1d0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d02c      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a5c      	ldr	r2, [pc, #368]	; (8001828 <HAL_DMA_Init+0x1d4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d027      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a5a      	ldr	r2, [pc, #360]	; (800182c <HAL_DMA_Init+0x1d8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a59      	ldr	r2, [pc, #356]	; (8001830 <HAL_DMA_Init+0x1dc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d01d      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_DMA_Init+0x1e0>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d018      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a56      	ldr	r2, [pc, #344]	; (8001838 <HAL_DMA_Init+0x1e4>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d013      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a54      	ldr	r2, [pc, #336]	; (800183c <HAL_DMA_Init+0x1e8>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d00e      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a53      	ldr	r2, [pc, #332]	; (8001840 <HAL_DMA_Init+0x1ec>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d009      	beq.n	800170c <HAL_DMA_Init+0xb8>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a51      	ldr	r2, [pc, #324]	; (8001844 <HAL_DMA_Init+0x1f0>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_DMA_Init+0xb8>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a50      	ldr	r2, [pc, #320]	; (8001848 <HAL_DMA_Init+0x1f4>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Init+0xbc>
 800170c:	2301      	movs	r3, #1
 800170e:	e000      	b.n	8001712 <HAL_DMA_Init+0xbe>
 8001710:	2300      	movs	r3, #0
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 813c 	beq.w	8001990 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a37      	ldr	r2, [pc, #220]	; (800180c <HAL_DMA_Init+0x1b8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a36      	ldr	r2, [pc, #216]	; (8001810 <HAL_DMA_Init+0x1bc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d045      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a34      	ldr	r2, [pc, #208]	; (8001814 <HAL_DMA_Init+0x1c0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d040      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a33      	ldr	r2, [pc, #204]	; (8001818 <HAL_DMA_Init+0x1c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d03b      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a31      	ldr	r2, [pc, #196]	; (800181c <HAL_DMA_Init+0x1c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a30      	ldr	r2, [pc, #192]	; (8001820 <HAL_DMA_Init+0x1cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a2e      	ldr	r2, [pc, #184]	; (8001824 <HAL_DMA_Init+0x1d0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a2d      	ldr	r2, [pc, #180]	; (8001828 <HAL_DMA_Init+0x1d4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a2b      	ldr	r2, [pc, #172]	; (800182c <HAL_DMA_Init+0x1d8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a2a      	ldr	r2, [pc, #168]	; (8001830 <HAL_DMA_Init+0x1dc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01d      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_DMA_Init+0x1e0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d018      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a27      	ldr	r2, [pc, #156]	; (8001838 <HAL_DMA_Init+0x1e4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a25      	ldr	r2, [pc, #148]	; (800183c <HAL_DMA_Init+0x1e8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00e      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a24      	ldr	r2, [pc, #144]	; (8001840 <HAL_DMA_Init+0x1ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <HAL_DMA_Init+0x1f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Init+0x174>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a21      	ldr	r2, [pc, #132]	; (8001848 <HAL_DMA_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d108      	bne.n	80017da <HAL_DMA_Init+0x186>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0201 	bic.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <HAL_DMA_Init+0x196>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0201 	bic.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017ea:	e02f      	b.n	800184c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017ec:	f7ff fe02 	bl	80013f4 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b05      	cmp	r3, #5
 80017f8:	d928      	bls.n	800184c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2220      	movs	r2, #32
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2203      	movs	r2, #3
 8001804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e242      	b.n	8001c92 <HAL_DMA_Init+0x63e>
 800180c:	40020010 	.word	0x40020010
 8001810:	40020028 	.word	0x40020028
 8001814:	40020040 	.word	0x40020040
 8001818:	40020058 	.word	0x40020058
 800181c:	40020070 	.word	0x40020070
 8001820:	40020088 	.word	0x40020088
 8001824:	400200a0 	.word	0x400200a0
 8001828:	400200b8 	.word	0x400200b8
 800182c:	40020410 	.word	0x40020410
 8001830:	40020428 	.word	0x40020428
 8001834:	40020440 	.word	0x40020440
 8001838:	40020458 	.word	0x40020458
 800183c:	40020470 	.word	0x40020470
 8001840:	40020488 	.word	0x40020488
 8001844:	400204a0 	.word	0x400204a0
 8001848:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1c8      	bne.n	80017ec <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4b83      	ldr	r3, [pc, #524]	; (8001a74 <HAL_DMA_Init+0x420>)
 8001866:	4013      	ands	r3, r2
 8001868:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001872:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4313      	orrs	r3, r2
 8001896:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800189c:	2b04      	cmp	r3, #4
 800189e:	d107      	bne.n	80018b0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4313      	orrs	r3, r2
 80018aa:	697a      	ldr	r2, [r7, #20]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b28      	cmp	r3, #40	; 0x28
 80018b6:	d903      	bls.n	80018c0 <HAL_DMA_Init+0x26c>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b2e      	cmp	r3, #46	; 0x2e
 80018be:	d91f      	bls.n	8001900 <HAL_DMA_Init+0x2ac>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b3e      	cmp	r3, #62	; 0x3e
 80018c6:	d903      	bls.n	80018d0 <HAL_DMA_Init+0x27c>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b42      	cmp	r3, #66	; 0x42
 80018ce:	d917      	bls.n	8001900 <HAL_DMA_Init+0x2ac>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b46      	cmp	r3, #70	; 0x46
 80018d6:	d903      	bls.n	80018e0 <HAL_DMA_Init+0x28c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b48      	cmp	r3, #72	; 0x48
 80018de:	d90f      	bls.n	8001900 <HAL_DMA_Init+0x2ac>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b4e      	cmp	r3, #78	; 0x4e
 80018e6:	d903      	bls.n	80018f0 <HAL_DMA_Init+0x29c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b52      	cmp	r3, #82	; 0x52
 80018ee:	d907      	bls.n	8001900 <HAL_DMA_Init+0x2ac>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b73      	cmp	r3, #115	; 0x73
 80018f6:	d905      	bls.n	8001904 <HAL_DMA_Init+0x2b0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b77      	cmp	r3, #119	; 0x77
 80018fe:	d801      	bhi.n	8001904 <HAL_DMA_Init+0x2b0>
 8001900:	2301      	movs	r3, #1
 8001902:	e000      	b.n	8001906 <HAL_DMA_Init+0x2b2>
 8001904:	2300      	movs	r3, #0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001910:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	f023 0307 	bic.w	r3, r3, #7
 8001928:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001938:	2b04      	cmp	r3, #4
 800193a:	d117      	bne.n	800196c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d00e      	beq.n	800196c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f001 ff18 	bl	8003784 <DMA_CheckFifoParam>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2240      	movs	r2, #64	; 0x40
 800195e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e192      	b.n	8001c92 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f001 fe53 	bl	8003620 <DMA_CalcBaseAndBitshift>
 800197a:	4603      	mov	r3, r0
 800197c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	223f      	movs	r2, #63	; 0x3f
 8001988:	409a      	lsls	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	e0c8      	b.n	8001b22 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a38      	ldr	r2, [pc, #224]	; (8001a78 <HAL_DMA_Init+0x424>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d022      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_DMA_Init+0x428>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d01d      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <HAL_DMA_Init+0x42c>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d018      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a34      	ldr	r2, [pc, #208]	; (8001a84 <HAL_DMA_Init+0x430>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d013      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a32      	ldr	r2, [pc, #200]	; (8001a88 <HAL_DMA_Init+0x434>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00e      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <HAL_DMA_Init+0x438>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d009      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a2f      	ldr	r2, [pc, #188]	; (8001a90 <HAL_DMA_Init+0x43c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d004      	beq.n	80019e0 <HAL_DMA_Init+0x38c>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_DMA_Init+0x440>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d101      	bne.n	80019e4 <HAL_DMA_Init+0x390>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e000      	b.n	80019e6 <HAL_DMA_Init+0x392>
 80019e4:	2300      	movs	r3, #0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 8092 	beq.w	8001b10 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a21      	ldr	r2, [pc, #132]	; (8001a78 <HAL_DMA_Init+0x424>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d021      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a20      	ldr	r2, [pc, #128]	; (8001a7c <HAL_DMA_Init+0x428>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d01c      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	; (8001a80 <HAL_DMA_Init+0x42c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d017      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_DMA_Init+0x430>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d012      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_DMA_Init+0x434>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1a      	ldr	r2, [pc, #104]	; (8001a8c <HAL_DMA_Init+0x438>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d008      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_DMA_Init+0x43c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d003      	beq.n	8001a3a <HAL_DMA_Init+0x3e6>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a17      	ldr	r2, [pc, #92]	; (8001a94 <HAL_DMA_Init+0x440>)
 8001a38:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_DMA_Init+0x444>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2b40      	cmp	r3, #64	; 0x40
 8001a60:	d01c      	beq.n	8001a9c <HAL_DMA_Init+0x448>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b80      	cmp	r3, #128	; 0x80
 8001a68:	d102      	bne.n	8001a70 <HAL_DMA_Init+0x41c>
 8001a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6e:	e016      	b.n	8001a9e <HAL_DMA_Init+0x44a>
 8001a70:	2300      	movs	r3, #0
 8001a72:	e014      	b.n	8001a9e <HAL_DMA_Init+0x44a>
 8001a74:	fe10803f 	.word	0xfe10803f
 8001a78:	58025408 	.word	0x58025408
 8001a7c:	5802541c 	.word	0x5802541c
 8001a80:	58025430 	.word	0x58025430
 8001a84:	58025444 	.word	0x58025444
 8001a88:	58025458 	.word	0x58025458
 8001a8c:	5802546c 	.word	0x5802546c
 8001a90:	58025480 	.word	0x58025480
 8001a94:	58025494 	.word	0x58025494
 8001a98:	fffe000f 	.word	0xfffe000f
 8001a9c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68d2      	ldr	r2, [r2, #12]
 8001aa2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001aa4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001aac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ab4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001abc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ac4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001acc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b6e      	ldr	r3, [pc, #440]	; (8001c9c <HAL_DMA_Init+0x648>)
 8001ae4:	4413      	add	r3, r2
 8001ae6:	4a6e      	ldr	r2, [pc, #440]	; (8001ca0 <HAL_DMA_Init+0x64c>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	009a      	lsls	r2, r3, #2
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 fd93 	bl	8003620 <DMA_CalcBaseAndBitshift>
 8001afa:	4603      	mov	r3, r0
 8001afc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	2201      	movs	r2, #1
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	e008      	b.n	8001b22 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2240      	movs	r2, #64	; 0x40
 8001b14:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2203      	movs	r2, #3
 8001b1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0b7      	b.n	8001c92 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5f      	ldr	r2, [pc, #380]	; (8001ca4 <HAL_DMA_Init+0x650>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d072      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a5d      	ldr	r2, [pc, #372]	; (8001ca8 <HAL_DMA_Init+0x654>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d06d      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a5c      	ldr	r2, [pc, #368]	; (8001cac <HAL_DMA_Init+0x658>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d068      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a5a      	ldr	r2, [pc, #360]	; (8001cb0 <HAL_DMA_Init+0x65c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d063      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <HAL_DMA_Init+0x660>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d05e      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_DMA_Init+0x664>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d059      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a56      	ldr	r2, [pc, #344]	; (8001cbc <HAL_DMA_Init+0x668>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d054      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a54      	ldr	r2, [pc, #336]	; (8001cc0 <HAL_DMA_Init+0x66c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d04f      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a53      	ldr	r2, [pc, #332]	; (8001cc4 <HAL_DMA_Init+0x670>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d04a      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a51      	ldr	r2, [pc, #324]	; (8001cc8 <HAL_DMA_Init+0x674>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d045      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <HAL_DMA_Init+0x678>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d040      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a4e      	ldr	r2, [pc, #312]	; (8001cd0 <HAL_DMA_Init+0x67c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d03b      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a4d      	ldr	r2, [pc, #308]	; (8001cd4 <HAL_DMA_Init+0x680>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d036      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a4b      	ldr	r2, [pc, #300]	; (8001cd8 <HAL_DMA_Init+0x684>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d031      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a4a      	ldr	r2, [pc, #296]	; (8001cdc <HAL_DMA_Init+0x688>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d02c      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a48      	ldr	r2, [pc, #288]	; (8001ce0 <HAL_DMA_Init+0x68c>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d027      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a47      	ldr	r2, [pc, #284]	; (8001ce4 <HAL_DMA_Init+0x690>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d022      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a45      	ldr	r2, [pc, #276]	; (8001ce8 <HAL_DMA_Init+0x694>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d01d      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a44      	ldr	r2, [pc, #272]	; (8001cec <HAL_DMA_Init+0x698>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d018      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a42      	ldr	r2, [pc, #264]	; (8001cf0 <HAL_DMA_Init+0x69c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a41      	ldr	r2, [pc, #260]	; (8001cf4 <HAL_DMA_Init+0x6a0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d00e      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a3f      	ldr	r2, [pc, #252]	; (8001cf8 <HAL_DMA_Init+0x6a4>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a3e      	ldr	r2, [pc, #248]	; (8001cfc <HAL_DMA_Init+0x6a8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d004      	beq.n	8001c12 <HAL_DMA_Init+0x5be>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <HAL_DMA_Init+0x6ac>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d101      	bne.n	8001c16 <HAL_DMA_Init+0x5c2>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <HAL_DMA_Init+0x5c4>
 8001c16:	2300      	movs	r3, #0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d032      	beq.n	8001c82 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f001 fe2d 	bl	800387c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b80      	cmp	r3, #128	; 0x80
 8001c28:	d102      	bne.n	8001c30 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001c44:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <HAL_DMA_Init+0x61c>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d80c      	bhi.n	8001c70 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f001 feaa 	bl	80039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e008      	b.n	8001c82 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	a7fdabf8 	.word	0xa7fdabf8
 8001ca0:	cccccccd 	.word	0xcccccccd
 8001ca4:	40020010 	.word	0x40020010
 8001ca8:	40020028 	.word	0x40020028
 8001cac:	40020040 	.word	0x40020040
 8001cb0:	40020058 	.word	0x40020058
 8001cb4:	40020070 	.word	0x40020070
 8001cb8:	40020088 	.word	0x40020088
 8001cbc:	400200a0 	.word	0x400200a0
 8001cc0:	400200b8 	.word	0x400200b8
 8001cc4:	40020410 	.word	0x40020410
 8001cc8:	40020428 	.word	0x40020428
 8001ccc:	40020440 	.word	0x40020440
 8001cd0:	40020458 	.word	0x40020458
 8001cd4:	40020470 	.word	0x40020470
 8001cd8:	40020488 	.word	0x40020488
 8001cdc:	400204a0 	.word	0x400204a0
 8001ce0:	400204b8 	.word	0x400204b8
 8001ce4:	58025408 	.word	0x58025408
 8001ce8:	5802541c 	.word	0x5802541c
 8001cec:	58025430 	.word	0x58025430
 8001cf0:	58025444 	.word	0x58025444
 8001cf4:	58025458 	.word	0x58025458
 8001cf8:	5802546c 	.word	0x5802546c
 8001cfc:	58025480 	.word	0x58025480
 8001d00:	58025494 	.word	0x58025494

08001d04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001d0c:	f7ff fb72 	bl	80013f4 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e2dc      	b.n	80022d6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d008      	beq.n	8001d3a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e2cd      	b.n	80022d6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a76      	ldr	r2, [pc, #472]	; (8001f18 <HAL_DMA_Abort+0x214>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d04a      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <HAL_DMA_Abort+0x218>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d045      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a73      	ldr	r2, [pc, #460]	; (8001f20 <HAL_DMA_Abort+0x21c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d040      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <HAL_DMA_Abort+0x220>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d03b      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a70      	ldr	r2, [pc, #448]	; (8001f28 <HAL_DMA_Abort+0x224>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d036      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_DMA_Abort+0x228>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d031      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6d      	ldr	r2, [pc, #436]	; (8001f30 <HAL_DMA_Abort+0x22c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d02c      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6b      	ldr	r2, [pc, #428]	; (8001f34 <HAL_DMA_Abort+0x230>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d027      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a6a      	ldr	r2, [pc, #424]	; (8001f38 <HAL_DMA_Abort+0x234>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d022      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a68      	ldr	r2, [pc, #416]	; (8001f3c <HAL_DMA_Abort+0x238>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01d      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a67      	ldr	r2, [pc, #412]	; (8001f40 <HAL_DMA_Abort+0x23c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d018      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a65      	ldr	r2, [pc, #404]	; (8001f44 <HAL_DMA_Abort+0x240>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d013      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a64      	ldr	r2, [pc, #400]	; (8001f48 <HAL_DMA_Abort+0x244>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d00e      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a62      	ldr	r2, [pc, #392]	; (8001f4c <HAL_DMA_Abort+0x248>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d009      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a61      	ldr	r2, [pc, #388]	; (8001f50 <HAL_DMA_Abort+0x24c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_DMA_Abort+0xd6>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a5f      	ldr	r2, [pc, #380]	; (8001f54 <HAL_DMA_Abort+0x250>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_DMA_Abort+0xda>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_Abort+0xdc>
 8001dde:	2300      	movs	r3, #0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 021e 	bic.w	r2, r2, #30
 8001df2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e02:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	e00a      	b.n	8001e22 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 020e 	bic.w	r2, r2, #14
 8001e1a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a3c      	ldr	r2, [pc, #240]	; (8001f18 <HAL_DMA_Abort+0x214>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d072      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a3a      	ldr	r2, [pc, #232]	; (8001f1c <HAL_DMA_Abort+0x218>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d06d      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a39      	ldr	r2, [pc, #228]	; (8001f20 <HAL_DMA_Abort+0x21c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d068      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a37      	ldr	r2, [pc, #220]	; (8001f24 <HAL_DMA_Abort+0x220>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d063      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a36      	ldr	r2, [pc, #216]	; (8001f28 <HAL_DMA_Abort+0x224>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_DMA_Abort+0x228>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d059      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a33      	ldr	r2, [pc, #204]	; (8001f30 <HAL_DMA_Abort+0x22c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d054      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a31      	ldr	r2, [pc, #196]	; (8001f34 <HAL_DMA_Abort+0x230>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d04f      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a30      	ldr	r2, [pc, #192]	; (8001f38 <HAL_DMA_Abort+0x234>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d04a      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a2e      	ldr	r2, [pc, #184]	; (8001f3c <HAL_DMA_Abort+0x238>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d045      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a2d      	ldr	r2, [pc, #180]	; (8001f40 <HAL_DMA_Abort+0x23c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d040      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_DMA_Abort+0x240>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d03b      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a2a      	ldr	r2, [pc, #168]	; (8001f48 <HAL_DMA_Abort+0x244>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d036      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a28      	ldr	r2, [pc, #160]	; (8001f4c <HAL_DMA_Abort+0x248>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d031      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a27      	ldr	r2, [pc, #156]	; (8001f50 <HAL_DMA_Abort+0x24c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d02c      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <HAL_DMA_Abort+0x250>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d027      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a24      	ldr	r2, [pc, #144]	; (8001f58 <HAL_DMA_Abort+0x254>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d022      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a22      	ldr	r2, [pc, #136]	; (8001f5c <HAL_DMA_Abort+0x258>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d01d      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a21      	ldr	r2, [pc, #132]	; (8001f60 <HAL_DMA_Abort+0x25c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d018      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	; (8001f64 <HAL_DMA_Abort+0x260>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_DMA_Abort+0x264>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d00e      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_DMA_Abort+0x268>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d009      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a1b      	ldr	r2, [pc, #108]	; (8001f70 <HAL_DMA_Abort+0x26c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d004      	beq.n	8001f12 <HAL_DMA_Abort+0x20e>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a19      	ldr	r2, [pc, #100]	; (8001f74 <HAL_DMA_Abort+0x270>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d132      	bne.n	8001f78 <HAL_DMA_Abort+0x274>
 8001f12:	2301      	movs	r3, #1
 8001f14:	e031      	b.n	8001f7a <HAL_DMA_Abort+0x276>
 8001f16:	bf00      	nop
 8001f18:	40020010 	.word	0x40020010
 8001f1c:	40020028 	.word	0x40020028
 8001f20:	40020040 	.word	0x40020040
 8001f24:	40020058 	.word	0x40020058
 8001f28:	40020070 	.word	0x40020070
 8001f2c:	40020088 	.word	0x40020088
 8001f30:	400200a0 	.word	0x400200a0
 8001f34:	400200b8 	.word	0x400200b8
 8001f38:	40020410 	.word	0x40020410
 8001f3c:	40020428 	.word	0x40020428
 8001f40:	40020440 	.word	0x40020440
 8001f44:	40020458 	.word	0x40020458
 8001f48:	40020470 	.word	0x40020470
 8001f4c:	40020488 	.word	0x40020488
 8001f50:	400204a0 	.word	0x400204a0
 8001f54:	400204b8 	.word	0x400204b8
 8001f58:	58025408 	.word	0x58025408
 8001f5c:	5802541c 	.word	0x5802541c
 8001f60:	58025430 	.word	0x58025430
 8001f64:	58025444 	.word	0x58025444
 8001f68:	58025458 	.word	0x58025458
 8001f6c:	5802546c 	.word	0x5802546c
 8001f70:	58025480 	.word	0x58025480
 8001f74:	58025494 	.word	0x58025494
 8001f78:	2300      	movs	r3, #0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6d      	ldr	r2, [pc, #436]	; (8002148 <HAL_DMA_Abort+0x444>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d04a      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a6b      	ldr	r2, [pc, #428]	; (800214c <HAL_DMA_Abort+0x448>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d045      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a6a      	ldr	r2, [pc, #424]	; (8002150 <HAL_DMA_Abort+0x44c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d040      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a68      	ldr	r2, [pc, #416]	; (8002154 <HAL_DMA_Abort+0x450>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d03b      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a67      	ldr	r2, [pc, #412]	; (8002158 <HAL_DMA_Abort+0x454>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d036      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a65      	ldr	r2, [pc, #404]	; (800215c <HAL_DMA_Abort+0x458>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d031      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a64      	ldr	r2, [pc, #400]	; (8002160 <HAL_DMA_Abort+0x45c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d02c      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a62      	ldr	r2, [pc, #392]	; (8002164 <HAL_DMA_Abort+0x460>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d027      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a61      	ldr	r2, [pc, #388]	; (8002168 <HAL_DMA_Abort+0x464>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d022      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a5f      	ldr	r2, [pc, #380]	; (800216c <HAL_DMA_Abort+0x468>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a5e      	ldr	r2, [pc, #376]	; (8002170 <HAL_DMA_Abort+0x46c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d018      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a5c      	ldr	r2, [pc, #368]	; (8002174 <HAL_DMA_Abort+0x470>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <HAL_DMA_Abort+0x474>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00e      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a59      	ldr	r2, [pc, #356]	; (800217c <HAL_DMA_Abort+0x478>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d009      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_DMA_Abort+0x47c>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d004      	beq.n	800202e <HAL_DMA_Abort+0x32a>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a56      	ldr	r2, [pc, #344]	; (8002184 <HAL_DMA_Abort+0x480>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <HAL_DMA_Abort+0x33c>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 0201 	bic.w	r2, r2, #1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e007      	b.n	8002050 <HAL_DMA_Abort+0x34c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002050:	e013      	b.n	800207a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002052:	f7ff f9cf 	bl	80013f4 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b05      	cmp	r3, #5
 800205e:	d90c      	bls.n	800207a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2220      	movs	r2, #32
 8002064:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2203      	movs	r2, #3
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e12d      	b.n	80022d6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1e5      	bne.n	8002052 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a2f      	ldr	r2, [pc, #188]	; (8002148 <HAL_DMA_Abort+0x444>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04a      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2d      	ldr	r2, [pc, #180]	; (800214c <HAL_DMA_Abort+0x448>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d045      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a2c      	ldr	r2, [pc, #176]	; (8002150 <HAL_DMA_Abort+0x44c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d040      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a2a      	ldr	r2, [pc, #168]	; (8002154 <HAL_DMA_Abort+0x450>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d03b      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a29      	ldr	r2, [pc, #164]	; (8002158 <HAL_DMA_Abort+0x454>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a27      	ldr	r2, [pc, #156]	; (800215c <HAL_DMA_Abort+0x458>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d031      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_DMA_Abort+0x45c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d02c      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a24      	ldr	r2, [pc, #144]	; (8002164 <HAL_DMA_Abort+0x460>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d027      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_DMA_Abort+0x464>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d022      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a21      	ldr	r2, [pc, #132]	; (800216c <HAL_DMA_Abort+0x468>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d01d      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a20      	ldr	r2, [pc, #128]	; (8002170 <HAL_DMA_Abort+0x46c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d018      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a1e      	ldr	r2, [pc, #120]	; (8002174 <HAL_DMA_Abort+0x470>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d013      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1d      	ldr	r2, [pc, #116]	; (8002178 <HAL_DMA_Abort+0x474>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00e      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a1b      	ldr	r2, [pc, #108]	; (800217c <HAL_DMA_Abort+0x478>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d009      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a1a      	ldr	r2, [pc, #104]	; (8002180 <HAL_DMA_Abort+0x47c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_DMA_Abort+0x422>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_DMA_Abort+0x480>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d101      	bne.n	800212a <HAL_DMA_Abort+0x426>
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_DMA_Abort+0x428>
 800212a:	2300      	movs	r3, #0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d02b      	beq.n	8002188 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	223f      	movs	r2, #63	; 0x3f
 8002140:	409a      	lsls	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	609a      	str	r2, [r3, #8]
 8002146:	e02a      	b.n	800219e <HAL_DMA_Abort+0x49a>
 8002148:	40020010 	.word	0x40020010
 800214c:	40020028 	.word	0x40020028
 8002150:	40020040 	.word	0x40020040
 8002154:	40020058 	.word	0x40020058
 8002158:	40020070 	.word	0x40020070
 800215c:	40020088 	.word	0x40020088
 8002160:	400200a0 	.word	0x400200a0
 8002164:	400200b8 	.word	0x400200b8
 8002168:	40020410 	.word	0x40020410
 800216c:	40020428 	.word	0x40020428
 8002170:	40020440 	.word	0x40020440
 8002174:	40020458 	.word	0x40020458
 8002178:	40020470 	.word	0x40020470
 800217c:	40020488 	.word	0x40020488
 8002180:	400204a0 	.word	0x400204a0
 8002184:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2201      	movs	r2, #1
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a4f      	ldr	r2, [pc, #316]	; (80022e0 <HAL_DMA_Abort+0x5dc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d072      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a4d      	ldr	r2, [pc, #308]	; (80022e4 <HAL_DMA_Abort+0x5e0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d06d      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_DMA_Abort+0x5e4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d068      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a4a      	ldr	r2, [pc, #296]	; (80022ec <HAL_DMA_Abort+0x5e8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d063      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a49      	ldr	r2, [pc, #292]	; (80022f0 <HAL_DMA_Abort+0x5ec>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d05e      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_DMA_Abort+0x5f0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d059      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a46      	ldr	r2, [pc, #280]	; (80022f8 <HAL_DMA_Abort+0x5f4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d054      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a44      	ldr	r2, [pc, #272]	; (80022fc <HAL_DMA_Abort+0x5f8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d04f      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a43      	ldr	r2, [pc, #268]	; (8002300 <HAL_DMA_Abort+0x5fc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d04a      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a41      	ldr	r2, [pc, #260]	; (8002304 <HAL_DMA_Abort+0x600>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d045      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a40      	ldr	r2, [pc, #256]	; (8002308 <HAL_DMA_Abort+0x604>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d040      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a3e      	ldr	r2, [pc, #248]	; (800230c <HAL_DMA_Abort+0x608>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d03b      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a3d      	ldr	r2, [pc, #244]	; (8002310 <HAL_DMA_Abort+0x60c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d036      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a3b      	ldr	r2, [pc, #236]	; (8002314 <HAL_DMA_Abort+0x610>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d031      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a3a      	ldr	r2, [pc, #232]	; (8002318 <HAL_DMA_Abort+0x614>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d02c      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <HAL_DMA_Abort+0x618>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d027      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a37      	ldr	r2, [pc, #220]	; (8002320 <HAL_DMA_Abort+0x61c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d022      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a35      	ldr	r2, [pc, #212]	; (8002324 <HAL_DMA_Abort+0x620>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d01d      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a34      	ldr	r2, [pc, #208]	; (8002328 <HAL_DMA_Abort+0x624>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d018      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a32      	ldr	r2, [pc, #200]	; (800232c <HAL_DMA_Abort+0x628>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d013      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <HAL_DMA_Abort+0x62c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d00e      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <HAL_DMA_Abort+0x630>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a2e      	ldr	r2, [pc, #184]	; (8002338 <HAL_DMA_Abort+0x634>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d004      	beq.n	800228e <HAL_DMA_Abort+0x58a>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2c      	ldr	r2, [pc, #176]	; (800233c <HAL_DMA_Abort+0x638>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_DMA_Abort+0x58e>
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_DMA_Abort+0x590>
 8002292:	2300      	movs	r3, #0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d015      	beq.n	80022c4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80022a0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00c      	beq.n	80022c4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022b8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80022c2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40020028 	.word	0x40020028
 80022e8:	40020040 	.word	0x40020040
 80022ec:	40020058 	.word	0x40020058
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40020088 	.word	0x40020088
 80022f8:	400200a0 	.word	0x400200a0
 80022fc:	400200b8 	.word	0x400200b8
 8002300:	40020410 	.word	0x40020410
 8002304:	40020428 	.word	0x40020428
 8002308:	40020440 	.word	0x40020440
 800230c:	40020458 	.word	0x40020458
 8002310:	40020470 	.word	0x40020470
 8002314:	40020488 	.word	0x40020488
 8002318:	400204a0 	.word	0x400204a0
 800231c:	400204b8 	.word	0x400204b8
 8002320:	58025408 	.word	0x58025408
 8002324:	5802541c 	.word	0x5802541c
 8002328:	58025430 	.word	0x58025430
 800232c:	58025444 	.word	0x58025444
 8002330:	58025458 	.word	0x58025458
 8002334:	5802546c 	.word	0x5802546c
 8002338:	58025480 	.word	0x58025480
 800233c:	58025494 	.word	0x58025494

08002340 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e237      	b.n	80027c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d004      	beq.n	8002368 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2280      	movs	r2, #128	; 0x80
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e22c      	b.n	80027c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a5c      	ldr	r2, [pc, #368]	; (80024e0 <HAL_DMA_Abort_IT+0x1a0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d04a      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a5b      	ldr	r2, [pc, #364]	; (80024e4 <HAL_DMA_Abort_IT+0x1a4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d045      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a59      	ldr	r2, [pc, #356]	; (80024e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d040      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a58      	ldr	r2, [pc, #352]	; (80024ec <HAL_DMA_Abort_IT+0x1ac>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d03b      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_DMA_Abort_IT+0x1b0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d036      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a55      	ldr	r2, [pc, #340]	; (80024f4 <HAL_DMA_Abort_IT+0x1b4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d031      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a53      	ldr	r2, [pc, #332]	; (80024f8 <HAL_DMA_Abort_IT+0x1b8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d02c      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a52      	ldr	r2, [pc, #328]	; (80024fc <HAL_DMA_Abort_IT+0x1bc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d027      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a50      	ldr	r2, [pc, #320]	; (8002500 <HAL_DMA_Abort_IT+0x1c0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d022      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a4f      	ldr	r2, [pc, #316]	; (8002504 <HAL_DMA_Abort_IT+0x1c4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d01d      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4d      	ldr	r2, [pc, #308]	; (8002508 <HAL_DMA_Abort_IT+0x1c8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d018      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4c      	ldr	r2, [pc, #304]	; (800250c <HAL_DMA_Abort_IT+0x1cc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d013      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a4a      	ldr	r2, [pc, #296]	; (8002510 <HAL_DMA_Abort_IT+0x1d0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00e      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a49      	ldr	r2, [pc, #292]	; (8002514 <HAL_DMA_Abort_IT+0x1d4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a47      	ldr	r2, [pc, #284]	; (8002518 <HAL_DMA_Abort_IT+0x1d8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d004      	beq.n	8002408 <HAL_DMA_Abort_IT+0xc8>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a46      	ldr	r2, [pc, #280]	; (800251c <HAL_DMA_Abort_IT+0x1dc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_DMA_Abort_IT+0xcc>
 8002408:	2301      	movs	r3, #1
 800240a:	e000      	b.n	800240e <HAL_DMA_Abort_IT+0xce>
 800240c:	2300      	movs	r3, #0
 800240e:	2b00      	cmp	r3, #0
 8002410:	f000 8086 	beq.w	8002520 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2204      	movs	r2, #4
 8002418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_DMA_Abort_IT+0x1a0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d04a      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a2e      	ldr	r2, [pc, #184]	; (80024e4 <HAL_DMA_Abort_IT+0x1a4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d045      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a2c      	ldr	r2, [pc, #176]	; (80024e8 <HAL_DMA_Abort_IT+0x1a8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d040      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <HAL_DMA_Abort_IT+0x1ac>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d03b      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a29      	ldr	r2, [pc, #164]	; (80024f0 <HAL_DMA_Abort_IT+0x1b0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d036      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a28      	ldr	r2, [pc, #160]	; (80024f4 <HAL_DMA_Abort_IT+0x1b4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d031      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a26      	ldr	r2, [pc, #152]	; (80024f8 <HAL_DMA_Abort_IT+0x1b8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02c      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a25      	ldr	r2, [pc, #148]	; (80024fc <HAL_DMA_Abort_IT+0x1bc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d027      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a23      	ldr	r2, [pc, #140]	; (8002500 <HAL_DMA_Abort_IT+0x1c0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d022      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a22      	ldr	r2, [pc, #136]	; (8002504 <HAL_DMA_Abort_IT+0x1c4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d01d      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_DMA_Abort_IT+0x1c8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d018      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a1f      	ldr	r2, [pc, #124]	; (800250c <HAL_DMA_Abort_IT+0x1cc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_DMA_Abort_IT+0x1d0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00e      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_DMA_Abort_IT+0x1d4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1a      	ldr	r2, [pc, #104]	; (8002518 <HAL_DMA_Abort_IT+0x1d8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d004      	beq.n	80024bc <HAL_DMA_Abort_IT+0x17c>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a19      	ldr	r2, [pc, #100]	; (800251c <HAL_DMA_Abort_IT+0x1dc>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d108      	bne.n	80024ce <HAL_DMA_Abort_IT+0x18e>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0201 	bic.w	r2, r2, #1
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e178      	b.n	80027c0 <HAL_DMA_Abort_IT+0x480>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f022 0201 	bic.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e16f      	b.n	80027c0 <HAL_DMA_Abort_IT+0x480>
 80024e0:	40020010 	.word	0x40020010
 80024e4:	40020028 	.word	0x40020028
 80024e8:	40020040 	.word	0x40020040
 80024ec:	40020058 	.word	0x40020058
 80024f0:	40020070 	.word	0x40020070
 80024f4:	40020088 	.word	0x40020088
 80024f8:	400200a0 	.word	0x400200a0
 80024fc:	400200b8 	.word	0x400200b8
 8002500:	40020410 	.word	0x40020410
 8002504:	40020428 	.word	0x40020428
 8002508:	40020440 	.word	0x40020440
 800250c:	40020458 	.word	0x40020458
 8002510:	40020470 	.word	0x40020470
 8002514:	40020488 	.word	0x40020488
 8002518:	400204a0 	.word	0x400204a0
 800251c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 020e 	bic.w	r2, r2, #14
 800252e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a6c      	ldr	r2, [pc, #432]	; (80026e8 <HAL_DMA_Abort_IT+0x3a8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d04a      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a6b      	ldr	r2, [pc, #428]	; (80026ec <HAL_DMA_Abort_IT+0x3ac>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d045      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <HAL_DMA_Abort_IT+0x3b0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d040      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a68      	ldr	r2, [pc, #416]	; (80026f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d03b      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a66      	ldr	r2, [pc, #408]	; (80026f8 <HAL_DMA_Abort_IT+0x3b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d036      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a65      	ldr	r2, [pc, #404]	; (80026fc <HAL_DMA_Abort_IT+0x3bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d031      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a63      	ldr	r2, [pc, #396]	; (8002700 <HAL_DMA_Abort_IT+0x3c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d02c      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a62      	ldr	r2, [pc, #392]	; (8002704 <HAL_DMA_Abort_IT+0x3c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d027      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a60      	ldr	r2, [pc, #384]	; (8002708 <HAL_DMA_Abort_IT+0x3c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d022      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a5f      	ldr	r2, [pc, #380]	; (800270c <HAL_DMA_Abort_IT+0x3cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d01d      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a5d      	ldr	r2, [pc, #372]	; (8002710 <HAL_DMA_Abort_IT+0x3d0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d018      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5c      	ldr	r2, [pc, #368]	; (8002714 <HAL_DMA_Abort_IT+0x3d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d013      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a5a      	ldr	r2, [pc, #360]	; (8002718 <HAL_DMA_Abort_IT+0x3d8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00e      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a59      	ldr	r2, [pc, #356]	; (800271c <HAL_DMA_Abort_IT+0x3dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d009      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a57      	ldr	r2, [pc, #348]	; (8002720 <HAL_DMA_Abort_IT+0x3e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d004      	beq.n	80025d0 <HAL_DMA_Abort_IT+0x290>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a56      	ldr	r2, [pc, #344]	; (8002724 <HAL_DMA_Abort_IT+0x3e4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d108      	bne.n	80025e2 <HAL_DMA_Abort_IT+0x2a2>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_DMA_Abort_IT+0x2b2>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a3c      	ldr	r2, [pc, #240]	; (80026e8 <HAL_DMA_Abort_IT+0x3a8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d072      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3a      	ldr	r2, [pc, #232]	; (80026ec <HAL_DMA_Abort_IT+0x3ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d06d      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a39      	ldr	r2, [pc, #228]	; (80026f0 <HAL_DMA_Abort_IT+0x3b0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d068      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <HAL_DMA_Abort_IT+0x3b4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d063      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a36      	ldr	r2, [pc, #216]	; (80026f8 <HAL_DMA_Abort_IT+0x3b8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d05e      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a34      	ldr	r2, [pc, #208]	; (80026fc <HAL_DMA_Abort_IT+0x3bc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d059      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a33      	ldr	r2, [pc, #204]	; (8002700 <HAL_DMA_Abort_IT+0x3c0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d054      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a31      	ldr	r2, [pc, #196]	; (8002704 <HAL_DMA_Abort_IT+0x3c4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d04f      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a30      	ldr	r2, [pc, #192]	; (8002708 <HAL_DMA_Abort_IT+0x3c8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d04a      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a2e      	ldr	r2, [pc, #184]	; (800270c <HAL_DMA_Abort_IT+0x3cc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d045      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a2d      	ldr	r2, [pc, #180]	; (8002710 <HAL_DMA_Abort_IT+0x3d0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d040      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_DMA_Abort_IT+0x3d4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d03b      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a2a      	ldr	r2, [pc, #168]	; (8002718 <HAL_DMA_Abort_IT+0x3d8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d036      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a28      	ldr	r2, [pc, #160]	; (800271c <HAL_DMA_Abort_IT+0x3dc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d031      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a27      	ldr	r2, [pc, #156]	; (8002720 <HAL_DMA_Abort_IT+0x3e0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02c      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_DMA_Abort_IT+0x3e4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d027      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Abort_IT+0x3e8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Abort_IT+0x3ec>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Abort_IT+0x3f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Abort_IT+0x3f4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Abort_IT+0x3f8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00e      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Abort_IT+0x3fc>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Abort_IT+0x400>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x3a2>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Abort_IT+0x404>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d132      	bne.n	8002748 <HAL_DMA_Abort_IT+0x408>
 80026e2:	2301      	movs	r3, #1
 80026e4:	e031      	b.n	800274a <HAL_DMA_Abort_IT+0x40a>
 80026e6:	bf00      	nop
 80026e8:	40020010 	.word	0x40020010
 80026ec:	40020028 	.word	0x40020028
 80026f0:	40020040 	.word	0x40020040
 80026f4:	40020058 	.word	0x40020058
 80026f8:	40020070 	.word	0x40020070
 80026fc:	40020088 	.word	0x40020088
 8002700:	400200a0 	.word	0x400200a0
 8002704:	400200b8 	.word	0x400200b8
 8002708:	40020410 	.word	0x40020410
 800270c:	40020428 	.word	0x40020428
 8002710:	40020440 	.word	0x40020440
 8002714:	40020458 	.word	0x40020458
 8002718:	40020470 	.word	0x40020470
 800271c:	40020488 	.word	0x40020488
 8002720:	400204a0 	.word	0x400204a0
 8002724:	400204b8 	.word	0x400204b8
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	2300      	movs	r3, #0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d028      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800275c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002762:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	f003 031f 	and.w	r3, r3, #31
 800276c:	2201      	movs	r2, #1
 800276e:	409a      	lsls	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800277c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00c      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800279e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop

080027cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80027d8:	4b67      	ldr	r3, [pc, #412]	; (8002978 <HAL_DMA_IRQHandler+0x1ac>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a67      	ldr	r2, [pc, #412]	; (800297c <HAL_DMA_IRQHandler+0x1b0>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a5f      	ldr	r2, [pc, #380]	; (8002980 <HAL_DMA_IRQHandler+0x1b4>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d04a      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a5d      	ldr	r2, [pc, #372]	; (8002984 <HAL_DMA_IRQHandler+0x1b8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d045      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_DMA_IRQHandler+0x1bc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d040      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a5a      	ldr	r2, [pc, #360]	; (800298c <HAL_DMA_IRQHandler+0x1c0>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d03b      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a59      	ldr	r2, [pc, #356]	; (8002990 <HAL_DMA_IRQHandler+0x1c4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d036      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <HAL_DMA_IRQHandler+0x1c8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d031      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a56      	ldr	r2, [pc, #344]	; (8002998 <HAL_DMA_IRQHandler+0x1cc>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d02c      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a54      	ldr	r2, [pc, #336]	; (800299c <HAL_DMA_IRQHandler+0x1d0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d027      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a53      	ldr	r2, [pc, #332]	; (80029a0 <HAL_DMA_IRQHandler+0x1d4>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d022      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a51      	ldr	r2, [pc, #324]	; (80029a4 <HAL_DMA_IRQHandler+0x1d8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d01d      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a50      	ldr	r2, [pc, #320]	; (80029a8 <HAL_DMA_IRQHandler+0x1dc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d018      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a4e      	ldr	r2, [pc, #312]	; (80029ac <HAL_DMA_IRQHandler+0x1e0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d013      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4d      	ldr	r2, [pc, #308]	; (80029b0 <HAL_DMA_IRQHandler+0x1e4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00e      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a4b      	ldr	r2, [pc, #300]	; (80029b4 <HAL_DMA_IRQHandler+0x1e8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d009      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a4a      	ldr	r2, [pc, #296]	; (80029b8 <HAL_DMA_IRQHandler+0x1ec>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d004      	beq.n	800289e <HAL_DMA_IRQHandler+0xd2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a48      	ldr	r2, [pc, #288]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d101      	bne.n	80028a2 <HAL_DMA_IRQHandler+0xd6>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_DMA_IRQHandler+0xd8>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 842b 	beq.w	8003100 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	f003 031f 	and.w	r3, r3, #31
 80028b2:	2208      	movs	r2, #8
 80028b4:	409a      	lsls	r2, r3
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80a2 	beq.w	8002a04 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2e      	ldr	r2, [pc, #184]	; (8002980 <HAL_DMA_IRQHandler+0x1b4>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d04a      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a2d      	ldr	r2, [pc, #180]	; (8002984 <HAL_DMA_IRQHandler+0x1b8>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d045      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_DMA_IRQHandler+0x1bc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d040      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_DMA_IRQHandler+0x1c0>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d03b      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a28      	ldr	r2, [pc, #160]	; (8002990 <HAL_DMA_IRQHandler+0x1c4>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d036      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a27      	ldr	r2, [pc, #156]	; (8002994 <HAL_DMA_IRQHandler+0x1c8>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d031      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a25      	ldr	r2, [pc, #148]	; (8002998 <HAL_DMA_IRQHandler+0x1cc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02c      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a24      	ldr	r2, [pc, #144]	; (800299c <HAL_DMA_IRQHandler+0x1d0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d027      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a22      	ldr	r2, [pc, #136]	; (80029a0 <HAL_DMA_IRQHandler+0x1d4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d022      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a21      	ldr	r2, [pc, #132]	; (80029a4 <HAL_DMA_IRQHandler+0x1d8>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d01d      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_DMA_IRQHandler+0x1dc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d018      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1e      	ldr	r2, [pc, #120]	; (80029ac <HAL_DMA_IRQHandler+0x1e0>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d013      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_DMA_IRQHandler+0x1e4>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00e      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_DMA_IRQHandler+0x1e8>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d009      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a19      	ldr	r2, [pc, #100]	; (80029b8 <HAL_DMA_IRQHandler+0x1ec>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_DMA_IRQHandler+0x194>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_DMA_IRQHandler+0x1f0>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d12f      	bne.n	80029c0 <HAL_DMA_IRQHandler+0x1f4>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	bf14      	ite	ne
 800296e:	2301      	movne	r3, #1
 8002970:	2300      	moveq	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	e02e      	b.n	80029d4 <HAL_DMA_IRQHandler+0x208>
 8002976:	bf00      	nop
 8002978:	24000000 	.word	0x24000000
 800297c:	1b4e81b5 	.word	0x1b4e81b5
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	bf14      	ite	ne
 80029ce:	2301      	movne	r3, #1
 80029d0:	2300      	moveq	r3, #0
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d015      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0204 	bic.w	r2, r2, #4
 80029e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2208      	movs	r2, #8
 80029f2:	409a      	lsls	r2, r3
 80029f4:	6a3b      	ldr	r3, [r7, #32]
 80029f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	f043 0201 	orr.w	r2, r3, #1
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d06e      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a69      	ldr	r2, [pc, #420]	; (8002bc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d04a      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d045      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a66      	ldr	r2, [pc, #408]	; (8002bcc <HAL_DMA_IRQHandler+0x400>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d040      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a64      	ldr	r2, [pc, #400]	; (8002bd0 <HAL_DMA_IRQHandler+0x404>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d03b      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_DMA_IRQHandler+0x408>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d036      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <HAL_DMA_IRQHandler+0x40c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d031      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a60      	ldr	r2, [pc, #384]	; (8002bdc <HAL_DMA_IRQHandler+0x410>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d02c      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a5e      	ldr	r2, [pc, #376]	; (8002be0 <HAL_DMA_IRQHandler+0x414>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d027      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a5d      	ldr	r2, [pc, #372]	; (8002be4 <HAL_DMA_IRQHandler+0x418>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a5b      	ldr	r2, [pc, #364]	; (8002be8 <HAL_DMA_IRQHandler+0x41c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a5a      	ldr	r2, [pc, #360]	; (8002bec <HAL_DMA_IRQHandler+0x420>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_DMA_IRQHandler+0x424>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a57      	ldr	r2, [pc, #348]	; (8002bf4 <HAL_DMA_IRQHandler+0x428>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a55      	ldr	r2, [pc, #340]	; (8002bf8 <HAL_DMA_IRQHandler+0x42c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a54      	ldr	r2, [pc, #336]	; (8002bfc <HAL_DMA_IRQHandler+0x430>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_IRQHandler+0x2ee>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_DMA_IRQHandler+0x434>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10a      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x304>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	695b      	ldr	r3, [r3, #20]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	e003      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x30c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00d      	beq.n	8002af8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae0:	f003 031f 	and.w	r3, r3, #31
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	f043 0202 	orr.w	r2, r3, #2
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 808f 	beq.w	8002c2c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <HAL_DMA_IRQHandler+0x3f8>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d04a      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a2a      	ldr	r2, [pc, #168]	; (8002bc8 <HAL_DMA_IRQHandler+0x3fc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d045      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a29      	ldr	r2, [pc, #164]	; (8002bcc <HAL_DMA_IRQHandler+0x400>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d040      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_DMA_IRQHandler+0x404>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d03b      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a26      	ldr	r2, [pc, #152]	; (8002bd4 <HAL_DMA_IRQHandler+0x408>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d036      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <HAL_DMA_IRQHandler+0x40c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d031      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a23      	ldr	r2, [pc, #140]	; (8002bdc <HAL_DMA_IRQHandler+0x410>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d02c      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <HAL_DMA_IRQHandler+0x414>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <HAL_DMA_IRQHandler+0x418>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d022      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a1e      	ldr	r2, [pc, #120]	; (8002be8 <HAL_DMA_IRQHandler+0x41c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1d      	ldr	r2, [pc, #116]	; (8002bec <HAL_DMA_IRQHandler+0x420>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d018      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a1b      	ldr	r2, [pc, #108]	; (8002bf0 <HAL_DMA_IRQHandler+0x424>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a1a      	ldr	r2, [pc, #104]	; (8002bf4 <HAL_DMA_IRQHandler+0x428>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_DMA_IRQHandler+0x42c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d009      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a17      	ldr	r2, [pc, #92]	; (8002bfc <HAL_DMA_IRQHandler+0x430>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d004      	beq.n	8002bae <HAL_DMA_IRQHandler+0x3e2>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_DMA_IRQHandler+0x434>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d12a      	bne.n	8002c04 <HAL_DMA_IRQHandler+0x438>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	bf14      	ite	ne
 8002bbc:	2301      	movne	r3, #1
 8002bbe:	2300      	moveq	r3, #0
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	e023      	b.n	8002c0c <HAL_DMA_IRQHandler+0x440>
 8002bc4:	40020010 	.word	0x40020010
 8002bc8:	40020028 	.word	0x40020028
 8002bcc:	40020040 	.word	0x40020040
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	40020070 	.word	0x40020070
 8002bd8:	40020088 	.word	0x40020088
 8002bdc:	400200a0 	.word	0x400200a0
 8002be0:	400200b8 	.word	0x400200b8
 8002be4:	40020410 	.word	0x40020410
 8002be8:	40020428 	.word	0x40020428
 8002bec:	40020440 	.word	0x40020440
 8002bf0:	40020458 	.word	0x40020458
 8002bf4:	40020470 	.word	0x40020470
 8002bf8:	40020488 	.word	0x40020488
 8002bfc:	400204a0 	.word	0x400204a0
 8002c00:	400204b8 	.word	0x400204b8
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00d      	beq.n	8002c2c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f003 031f 	and.w	r3, r3, #31
 8002c18:	2204      	movs	r2, #4
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c24:	f043 0204 	orr.w	r2, r3, #4
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	f003 031f 	and.w	r3, r3, #31
 8002c34:	2210      	movs	r2, #16
 8002c36:	409a      	lsls	r2, r3
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80a6 	beq.w	8002d8e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a85      	ldr	r2, [pc, #532]	; (8002e5c <HAL_DMA_IRQHandler+0x690>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d04a      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a83      	ldr	r2, [pc, #524]	; (8002e60 <HAL_DMA_IRQHandler+0x694>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d045      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a82      	ldr	r2, [pc, #520]	; (8002e64 <HAL_DMA_IRQHandler+0x698>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d040      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a80      	ldr	r2, [pc, #512]	; (8002e68 <HAL_DMA_IRQHandler+0x69c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d03b      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a7f      	ldr	r2, [pc, #508]	; (8002e6c <HAL_DMA_IRQHandler+0x6a0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d036      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a7d      	ldr	r2, [pc, #500]	; (8002e70 <HAL_DMA_IRQHandler+0x6a4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d031      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7c      	ldr	r2, [pc, #496]	; (8002e74 <HAL_DMA_IRQHandler+0x6a8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d02c      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a7a      	ldr	r2, [pc, #488]	; (8002e78 <HAL_DMA_IRQHandler+0x6ac>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d027      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a79      	ldr	r2, [pc, #484]	; (8002e7c <HAL_DMA_IRQHandler+0x6b0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d022      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a77      	ldr	r2, [pc, #476]	; (8002e80 <HAL_DMA_IRQHandler+0x6b4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01d      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a76      	ldr	r2, [pc, #472]	; (8002e84 <HAL_DMA_IRQHandler+0x6b8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d018      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a74      	ldr	r2, [pc, #464]	; (8002e88 <HAL_DMA_IRQHandler+0x6bc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d013      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a73      	ldr	r2, [pc, #460]	; (8002e8c <HAL_DMA_IRQHandler+0x6c0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00e      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a71      	ldr	r2, [pc, #452]	; (8002e90 <HAL_DMA_IRQHandler+0x6c4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d009      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a70      	ldr	r2, [pc, #448]	; (8002e94 <HAL_DMA_IRQHandler+0x6c8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d004      	beq.n	8002ce2 <HAL_DMA_IRQHandler+0x516>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a6e      	ldr	r2, [pc, #440]	; (8002e98 <HAL_DMA_IRQHandler+0x6cc>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10a      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x52c>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e009      	b.n	8002d0c <HAL_DMA_IRQHandler+0x540>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf14      	ite	ne
 8002d06:	2301      	movne	r3, #1
 8002d08:	2300      	moveq	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d03e      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2210      	movs	r2, #16
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d018      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d108      	bne.n	8002d4e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d024      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	4798      	blx	r3
 8002d4c:	e01f      	b.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d01b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	4798      	blx	r3
 8002d5e:	e016      	b.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d107      	bne.n	8002d7e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0208 	bic.w	r2, r2, #8
 8002d7c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	f003 031f 	and.w	r3, r3, #31
 8002d96:	2220      	movs	r2, #32
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8110 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <HAL_DMA_IRQHandler+0x690>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d04a      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a2b      	ldr	r2, [pc, #172]	; (8002e60 <HAL_DMA_IRQHandler+0x694>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d045      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a29      	ldr	r2, [pc, #164]	; (8002e64 <HAL_DMA_IRQHandler+0x698>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d040      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a28      	ldr	r2, [pc, #160]	; (8002e68 <HAL_DMA_IRQHandler+0x69c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d03b      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a26      	ldr	r2, [pc, #152]	; (8002e6c <HAL_DMA_IRQHandler+0x6a0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d036      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a25      	ldr	r2, [pc, #148]	; (8002e70 <HAL_DMA_IRQHandler+0x6a4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d031      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a23      	ldr	r2, [pc, #140]	; (8002e74 <HAL_DMA_IRQHandler+0x6a8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d02c      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a22      	ldr	r2, [pc, #136]	; (8002e78 <HAL_DMA_IRQHandler+0x6ac>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d027      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a20      	ldr	r2, [pc, #128]	; (8002e7c <HAL_DMA_IRQHandler+0x6b0>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d022      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a1f      	ldr	r2, [pc, #124]	; (8002e80 <HAL_DMA_IRQHandler+0x6b4>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d01d      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <HAL_DMA_IRQHandler+0x6b8>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d018      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <HAL_DMA_IRQHandler+0x6bc>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d013      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1a      	ldr	r2, [pc, #104]	; (8002e8c <HAL_DMA_IRQHandler+0x6c0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00e      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a19      	ldr	r2, [pc, #100]	; (8002e90 <HAL_DMA_IRQHandler+0x6c4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d009      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <HAL_DMA_IRQHandler+0x6c8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d004      	beq.n	8002e44 <HAL_DMA_IRQHandler+0x678>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a16      	ldr	r2, [pc, #88]	; (8002e98 <HAL_DMA_IRQHandler+0x6cc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d12b      	bne.n	8002e9c <HAL_DMA_IRQHandler+0x6d0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	e02a      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x6e4>
 8002e5a:	bf00      	nop
 8002e5c:	40020010 	.word	0x40020010
 8002e60:	40020028 	.word	0x40020028
 8002e64:	40020040 	.word	0x40020040
 8002e68:	40020058 	.word	0x40020058
 8002e6c:	40020070 	.word	0x40020070
 8002e70:	40020088 	.word	0x40020088
 8002e74:	400200a0 	.word	0x400200a0
 8002e78:	400200b8 	.word	0x400200b8
 8002e7c:	40020410 	.word	0x40020410
 8002e80:	40020428 	.word	0x40020428
 8002e84:	40020440 	.word	0x40020440
 8002e88:	40020458 	.word	0x40020458
 8002e8c:	40020470 	.word	0x40020470
 8002e90:	40020488 	.word	0x40020488
 8002e94:	400204a0 	.word	0x400204a0
 8002e98:	400204b8 	.word	0x400204b8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8087 	beq.w	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eba:	f003 031f 	and.w	r3, r3, #31
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	409a      	lsls	r2, r3
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	d139      	bne.n	8002f46 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0216 	bic.w	r2, r2, #22
 8002ee0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <HAL_DMA_IRQHandler+0x736>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d007      	beq.n	8002f12 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0208 	bic.w	r2, r2, #8
 8002f10:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f16:	f003 031f 	and.w	r3, r3, #31
 8002f1a:	223f      	movs	r2, #63	; 0x3f
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	6a3b      	ldr	r3, [r7, #32]
 8002f20:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 834a 	beq.w	80035d0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
          }
          return;
 8002f44:	e344      	b.n	80035d0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d108      	bne.n	8002f74 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d02c      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
 8002f72:	e027      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
 8002f84:	e01e      	b.n	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10f      	bne.n	8002fb4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 8306 	beq.w	80035da <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 8088 	beq.w	80030ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a7a      	ldr	r2, [pc, #488]	; (80031d4 <HAL_DMA_IRQHandler+0xa08>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04a      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a79      	ldr	r2, [pc, #484]	; (80031d8 <HAL_DMA_IRQHandler+0xa0c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d045      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_DMA_IRQHandler+0xa10>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d040      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a76      	ldr	r2, [pc, #472]	; (80031e0 <HAL_DMA_IRQHandler+0xa14>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d03b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a74      	ldr	r2, [pc, #464]	; (80031e4 <HAL_DMA_IRQHandler+0xa18>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d036      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a73      	ldr	r2, [pc, #460]	; (80031e8 <HAL_DMA_IRQHandler+0xa1c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d031      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a71      	ldr	r2, [pc, #452]	; (80031ec <HAL_DMA_IRQHandler+0xa20>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a70      	ldr	r2, [pc, #448]	; (80031f0 <HAL_DMA_IRQHandler+0xa24>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d027      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a6e      	ldr	r2, [pc, #440]	; (80031f4 <HAL_DMA_IRQHandler+0xa28>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a6d      	ldr	r2, [pc, #436]	; (80031f8 <HAL_DMA_IRQHandler+0xa2c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d01d      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6b      	ldr	r2, [pc, #428]	; (80031fc <HAL_DMA_IRQHandler+0xa30>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6a      	ldr	r2, [pc, #424]	; (8003200 <HAL_DMA_IRQHandler+0xa34>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a68      	ldr	r2, [pc, #416]	; (8003204 <HAL_DMA_IRQHandler+0xa38>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a67      	ldr	r2, [pc, #412]	; (8003208 <HAL_DMA_IRQHandler+0xa3c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a65      	ldr	r2, [pc, #404]	; (800320c <HAL_DMA_IRQHandler+0xa40>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_DMA_IRQHandler+0x8b8>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a64      	ldr	r2, [pc, #400]	; (8003210 <HAL_DMA_IRQHandler+0xa44>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d108      	bne.n	8003096 <HAL_DMA_IRQHandler+0x8ca>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0201 	bic.w	r2, r2, #1
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	e007      	b.n	80030a6 <HAL_DMA_IRQHandler+0x8da>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0201 	bic.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3301      	adds	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d307      	bcc.n	80030c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f2      	bne.n	80030a6 <HAL_DMA_IRQHandler+0x8da>
 80030c0:	e000      	b.n	80030c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80030c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2203      	movs	r2, #3
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80030da:	e003      	b.n	80030e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8272 	beq.w	80035da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e26c      	b.n	80035da <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a43      	ldr	r2, [pc, #268]	; (8003214 <HAL_DMA_IRQHandler+0xa48>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d022      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a42      	ldr	r2, [pc, #264]	; (8003218 <HAL_DMA_IRQHandler+0xa4c>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d01d      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a40      	ldr	r2, [pc, #256]	; (800321c <HAL_DMA_IRQHandler+0xa50>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d018      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a3f      	ldr	r2, [pc, #252]	; (8003220 <HAL_DMA_IRQHandler+0xa54>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d013      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a3d      	ldr	r2, [pc, #244]	; (8003224 <HAL_DMA_IRQHandler+0xa58>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00e      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a3c      	ldr	r2, [pc, #240]	; (8003228 <HAL_DMA_IRQHandler+0xa5c>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d009      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a3a      	ldr	r2, [pc, #232]	; (800322c <HAL_DMA_IRQHandler+0xa60>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d004      	beq.n	8003150 <HAL_DMA_IRQHandler+0x984>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a39      	ldr	r2, [pc, #228]	; (8003230 <HAL_DMA_IRQHandler+0xa64>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d101      	bne.n	8003154 <HAL_DMA_IRQHandler+0x988>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_DMA_IRQHandler+0x98a>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	f000 823f 	beq.w	80035da <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	2204      	movs	r2, #4
 800316e:	409a      	lsls	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80cd 	beq.w	8003314 <HAL_DMA_IRQHandler+0xb48>
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80c7 	beq.w	8003314 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f003 031f 	and.w	r3, r3, #31
 800318e:	2204      	movs	r2, #4
 8003190:	409a      	lsls	r2, r3
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d049      	beq.n	8003234 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8210 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031bc:	e20a      	b.n	80035d4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	f000 8206 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80031d0:	e200      	b.n	80035d4 <HAL_DMA_IRQHandler+0xe08>
 80031d2:	bf00      	nop
 80031d4:	40020010 	.word	0x40020010
 80031d8:	40020028 	.word	0x40020028
 80031dc:	40020040 	.word	0x40020040
 80031e0:	40020058 	.word	0x40020058
 80031e4:	40020070 	.word	0x40020070
 80031e8:	40020088 	.word	0x40020088
 80031ec:	400200a0 	.word	0x400200a0
 80031f0:	400200b8 	.word	0x400200b8
 80031f4:	40020410 	.word	0x40020410
 80031f8:	40020428 	.word	0x40020428
 80031fc:	40020440 	.word	0x40020440
 8003200:	40020458 	.word	0x40020458
 8003204:	40020470 	.word	0x40020470
 8003208:	40020488 	.word	0x40020488
 800320c:	400204a0 	.word	0x400204a0
 8003210:	400204b8 	.word	0x400204b8
 8003214:	58025408 	.word	0x58025408
 8003218:	5802541c 	.word	0x5802541c
 800321c:	58025430 	.word	0x58025430
 8003220:	58025444 	.word	0x58025444
 8003224:	58025458 	.word	0x58025458
 8003228:	5802546c 	.word	0x5802546c
 800322c:	58025480 	.word	0x58025480
 8003230:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b00      	cmp	r3, #0
 800323c:	d160      	bne.n	8003300 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a7f      	ldr	r2, [pc, #508]	; (8003440 <HAL_DMA_IRQHandler+0xc74>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d04a      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7d      	ldr	r2, [pc, #500]	; (8003444 <HAL_DMA_IRQHandler+0xc78>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d045      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a7c      	ldr	r2, [pc, #496]	; (8003448 <HAL_DMA_IRQHandler+0xc7c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d040      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a7a      	ldr	r2, [pc, #488]	; (800344c <HAL_DMA_IRQHandler+0xc80>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d03b      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a79      	ldr	r2, [pc, #484]	; (8003450 <HAL_DMA_IRQHandler+0xc84>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d036      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a77      	ldr	r2, [pc, #476]	; (8003454 <HAL_DMA_IRQHandler+0xc88>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d031      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a76      	ldr	r2, [pc, #472]	; (8003458 <HAL_DMA_IRQHandler+0xc8c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d02c      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a74      	ldr	r2, [pc, #464]	; (800345c <HAL_DMA_IRQHandler+0xc90>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d027      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a73      	ldr	r2, [pc, #460]	; (8003460 <HAL_DMA_IRQHandler+0xc94>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d022      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a71      	ldr	r2, [pc, #452]	; (8003464 <HAL_DMA_IRQHandler+0xc98>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01d      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a70      	ldr	r2, [pc, #448]	; (8003468 <HAL_DMA_IRQHandler+0xc9c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d018      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a6e      	ldr	r2, [pc, #440]	; (800346c <HAL_DMA_IRQHandler+0xca0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6d      	ldr	r2, [pc, #436]	; (8003470 <HAL_DMA_IRQHandler+0xca4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00e      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a6b      	ldr	r2, [pc, #428]	; (8003474 <HAL_DMA_IRQHandler+0xca8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d009      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a6a      	ldr	r2, [pc, #424]	; (8003478 <HAL_DMA_IRQHandler+0xcac>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d004      	beq.n	80032de <HAL_DMA_IRQHandler+0xb12>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a68      	ldr	r2, [pc, #416]	; (800347c <HAL_DMA_IRQHandler+0xcb0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <HAL_DMA_IRQHandler+0xb24>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0208 	bic.w	r2, r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	e007      	b.n	8003300 <HAL_DMA_IRQHandler+0xb34>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0204 	bic.w	r2, r2, #4
 80032fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8165 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003312:	e15f      	b.n	80035d4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003318:	f003 031f 	and.w	r3, r3, #31
 800331c:	2202      	movs	r2, #2
 800331e:	409a      	lsls	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 80c5 	beq.w	80034b4 <HAL_DMA_IRQHandler+0xce8>
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	f000 80bf 	beq.w	80034b4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	2202      	movs	r2, #2
 8003340:	409a      	lsls	r2, r3
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d018      	beq.n	8003382 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 813a 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800336c:	e134      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	f000 8130 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003380:	e12a      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	f040 8089 	bne.w	80034a0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2b      	ldr	r2, [pc, #172]	; (8003440 <HAL_DMA_IRQHandler+0xc74>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d04a      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_DMA_IRQHandler+0xc78>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d045      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <HAL_DMA_IRQHandler+0xc7c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d040      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	; (800344c <HAL_DMA_IRQHandler+0xc80>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d03b      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a25      	ldr	r2, [pc, #148]	; (8003450 <HAL_DMA_IRQHandler+0xc84>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d036      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a23      	ldr	r2, [pc, #140]	; (8003454 <HAL_DMA_IRQHandler+0xc88>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d031      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a22      	ldr	r2, [pc, #136]	; (8003458 <HAL_DMA_IRQHandler+0xc8c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d02c      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_DMA_IRQHandler+0xc90>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d027      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_DMA_IRQHandler+0xc94>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d022      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1d      	ldr	r2, [pc, #116]	; (8003464 <HAL_DMA_IRQHandler+0xc98>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d01d      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1c      	ldr	r2, [pc, #112]	; (8003468 <HAL_DMA_IRQHandler+0xc9c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d018      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1a      	ldr	r2, [pc, #104]	; (800346c <HAL_DMA_IRQHandler+0xca0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d013      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <HAL_DMA_IRQHandler+0xca4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d00e      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a17      	ldr	r2, [pc, #92]	; (8003474 <HAL_DMA_IRQHandler+0xca8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a16      	ldr	r2, [pc, #88]	; (8003478 <HAL_DMA_IRQHandler+0xcac>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_DMA_IRQHandler+0xc62>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a14      	ldr	r2, [pc, #80]	; (800347c <HAL_DMA_IRQHandler+0xcb0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d128      	bne.n	8003480 <HAL_DMA_IRQHandler+0xcb4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f022 0214 	bic.w	r2, r2, #20
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e027      	b.n	8003490 <HAL_DMA_IRQHandler+0xcc4>
 8003440:	40020010 	.word	0x40020010
 8003444:	40020028 	.word	0x40020028
 8003448:	40020040 	.word	0x40020040
 800344c:	40020058 	.word	0x40020058
 8003450:	40020070 	.word	0x40020070
 8003454:	40020088 	.word	0x40020088
 8003458:	400200a0 	.word	0x400200a0
 800345c:	400200b8 	.word	0x400200b8
 8003460:	40020410 	.word	0x40020410
 8003464:	40020428 	.word	0x40020428
 8003468:	40020440 	.word	0x40020440
 800346c:	40020458 	.word	0x40020458
 8003470:	40020470 	.word	0x40020470
 8003474:	40020488 	.word	0x40020488
 8003478:	400204a0 	.word	0x400204a0
 800347c:	400204b8 	.word	0x400204b8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 020a 	bic.w	r2, r2, #10
 800348e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8097 	beq.w	80035d8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b2:	e091      	b.n	80035d8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034b8:	f003 031f 	and.w	r3, r3, #31
 80034bc:	2208      	movs	r2, #8
 80034be:	409a      	lsls	r2, r3
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 8088 	beq.w	80035da <HAL_DMA_IRQHandler+0xe0e>
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8082 	beq.w	80035da <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a41      	ldr	r2, [pc, #260]	; (80035e0 <HAL_DMA_IRQHandler+0xe14>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d04a      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3f      	ldr	r2, [pc, #252]	; (80035e4 <HAL_DMA_IRQHandler+0xe18>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d045      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a3e      	ldr	r2, [pc, #248]	; (80035e8 <HAL_DMA_IRQHandler+0xe1c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d040      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a3c      	ldr	r2, [pc, #240]	; (80035ec <HAL_DMA_IRQHandler+0xe20>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d03b      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a3b      	ldr	r2, [pc, #236]	; (80035f0 <HAL_DMA_IRQHandler+0xe24>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d036      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a39      	ldr	r2, [pc, #228]	; (80035f4 <HAL_DMA_IRQHandler+0xe28>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d031      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a38      	ldr	r2, [pc, #224]	; (80035f8 <HAL_DMA_IRQHandler+0xe2c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d02c      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a36      	ldr	r2, [pc, #216]	; (80035fc <HAL_DMA_IRQHandler+0xe30>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d027      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a35      	ldr	r2, [pc, #212]	; (8003600 <HAL_DMA_IRQHandler+0xe34>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a33      	ldr	r2, [pc, #204]	; (8003604 <HAL_DMA_IRQHandler+0xe38>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01d      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a32      	ldr	r2, [pc, #200]	; (8003608 <HAL_DMA_IRQHandler+0xe3c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a30      	ldr	r2, [pc, #192]	; (800360c <HAL_DMA_IRQHandler+0xe40>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a2f      	ldr	r2, [pc, #188]	; (8003610 <HAL_DMA_IRQHandler+0xe44>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2d      	ldr	r2, [pc, #180]	; (8003614 <HAL_DMA_IRQHandler+0xe48>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a2c      	ldr	r2, [pc, #176]	; (8003618 <HAL_DMA_IRQHandler+0xe4c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_DMA_IRQHandler+0xdaa>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2a      	ldr	r2, [pc, #168]	; (800361c <HAL_DMA_IRQHandler+0xe50>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d108      	bne.n	8003588 <HAL_DMA_IRQHandler+0xdbc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 021c 	bic.w	r2, r2, #28
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e007      	b.n	8003598 <HAL_DMA_IRQHandler+0xdcc>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 020e 	bic.w	r2, r2, #14
 8003596:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800359c:	f003 031f 	and.w	r3, r3, #31
 80035a0:	2201      	movs	r2, #1
 80035a2:	409a      	lsls	r2, r3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d009      	beq.n	80035da <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4798      	blx	r3
 80035ce:	e004      	b.n	80035da <HAL_DMA_IRQHandler+0xe0e>
          return;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	40020010 	.word	0x40020010
 80035e4:	40020028 	.word	0x40020028
 80035e8:	40020040 	.word	0x40020040
 80035ec:	40020058 	.word	0x40020058
 80035f0:	40020070 	.word	0x40020070
 80035f4:	40020088 	.word	0x40020088
 80035f8:	400200a0 	.word	0x400200a0
 80035fc:	400200b8 	.word	0x400200b8
 8003600:	40020410 	.word	0x40020410
 8003604:	40020428 	.word	0x40020428
 8003608:	40020440 	.word	0x40020440
 800360c:	40020458 	.word	0x40020458
 8003610:	40020470 	.word	0x40020470
 8003614:	40020488 	.word	0x40020488
 8003618:	400204a0 	.word	0x400204a0
 800361c:	400204b8 	.word	0x400204b8

08003620 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a42      	ldr	r2, [pc, #264]	; (8003738 <DMA_CalcBaseAndBitshift+0x118>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04a      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a41      	ldr	r2, [pc, #260]	; (800373c <DMA_CalcBaseAndBitshift+0x11c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d045      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a3f      	ldr	r2, [pc, #252]	; (8003740 <DMA_CalcBaseAndBitshift+0x120>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d040      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a3e      	ldr	r2, [pc, #248]	; (8003744 <DMA_CalcBaseAndBitshift+0x124>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d03b      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3c      	ldr	r2, [pc, #240]	; (8003748 <DMA_CalcBaseAndBitshift+0x128>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d036      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3b      	ldr	r2, [pc, #236]	; (800374c <DMA_CalcBaseAndBitshift+0x12c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d031      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a39      	ldr	r2, [pc, #228]	; (8003750 <DMA_CalcBaseAndBitshift+0x130>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02c      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a38      	ldr	r2, [pc, #224]	; (8003754 <DMA_CalcBaseAndBitshift+0x134>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d027      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a36      	ldr	r2, [pc, #216]	; (8003758 <DMA_CalcBaseAndBitshift+0x138>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a35      	ldr	r2, [pc, #212]	; (800375c <DMA_CalcBaseAndBitshift+0x13c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a33      	ldr	r2, [pc, #204]	; (8003760 <DMA_CalcBaseAndBitshift+0x140>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a32      	ldr	r2, [pc, #200]	; (8003764 <DMA_CalcBaseAndBitshift+0x144>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a30      	ldr	r2, [pc, #192]	; (8003768 <DMA_CalcBaseAndBitshift+0x148>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a2f      	ldr	r2, [pc, #188]	; (800376c <DMA_CalcBaseAndBitshift+0x14c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2d      	ldr	r2, [pc, #180]	; (8003770 <DMA_CalcBaseAndBitshift+0x150>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <DMA_CalcBaseAndBitshift+0xa8>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2c      	ldr	r2, [pc, #176]	; (8003774 <DMA_CalcBaseAndBitshift+0x154>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <DMA_CalcBaseAndBitshift+0xac>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <DMA_CalcBaseAndBitshift+0xae>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d024      	beq.n	800371c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	3b10      	subs	r3, #16
 80036da:	4a27      	ldr	r2, [pc, #156]	; (8003778 <DMA_CalcBaseAndBitshift+0x158>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	4a24      	ldr	r2, [pc, #144]	; (800377c <DMA_CalcBaseAndBitshift+0x15c>)
 80036ec:	5cd3      	ldrb	r3, [r2, r3]
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d908      	bls.n	800370c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	461a      	mov	r2, r3
 8003700:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <DMA_CalcBaseAndBitshift+0x160>)
 8003702:	4013      	ands	r3, r2
 8003704:	1d1a      	adds	r2, r3, #4
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	659a      	str	r2, [r3, #88]	; 0x58
 800370a:	e00d      	b.n	8003728 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <DMA_CalcBaseAndBitshift+0x160>)
 8003714:	4013      	ands	r3, r2
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	; 0x58
 800371a:	e005      	b.n	8003728 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40020010 	.word	0x40020010
 800373c:	40020028 	.word	0x40020028
 8003740:	40020040 	.word	0x40020040
 8003744:	40020058 	.word	0x40020058
 8003748:	40020070 	.word	0x40020070
 800374c:	40020088 	.word	0x40020088
 8003750:	400200a0 	.word	0x400200a0
 8003754:	400200b8 	.word	0x400200b8
 8003758:	40020410 	.word	0x40020410
 800375c:	40020428 	.word	0x40020428
 8003760:	40020440 	.word	0x40020440
 8003764:	40020458 	.word	0x40020458
 8003768:	40020470 	.word	0x40020470
 800376c:	40020488 	.word	0x40020488
 8003770:	400204a0 	.word	0x400204a0
 8003774:	400204b8 	.word	0x400204b8
 8003778:	aaaaaaab 	.word	0xaaaaaaab
 800377c:	08009a14 	.word	0x08009a14
 8003780:	fffffc00 	.word	0xfffffc00

08003784 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d120      	bne.n	80037da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	2b03      	cmp	r3, #3
 800379e:	d858      	bhi.n	8003852 <DMA_CheckFifoParam+0xce>
 80037a0:	a201      	add	r2, pc, #4	; (adr r2, 80037a8 <DMA_CheckFifoParam+0x24>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	080037b9 	.word	0x080037b9
 80037ac:	080037cb 	.word	0x080037cb
 80037b0:	080037b9 	.word	0x080037b9
 80037b4:	08003853 	.word	0x08003853
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d048      	beq.n	8003856 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037c8:	e045      	b.n	8003856 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d2:	d142      	bne.n	800385a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80037d8:	e03f      	b.n	800385a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037e2:	d123      	bne.n	800382c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d838      	bhi.n	800385e <DMA_CheckFifoParam+0xda>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <DMA_CheckFifoParam+0x70>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003805 	.word	0x08003805
 80037f8:	0800380b 	.word	0x0800380b
 80037fc:	08003805 	.word	0x08003805
 8003800:	0800381d 	.word	0x0800381d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	73fb      	strb	r3, [r7, #15]
        break;
 8003808:	e030      	b.n	800386c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800380e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d025      	beq.n	8003862 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800381a:	e022      	b.n	8003862 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003824:	d11f      	bne.n	8003866 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800382a:	e01c      	b.n	8003866 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b02      	cmp	r3, #2
 8003832:	d902      	bls.n	800383a <DMA_CheckFifoParam+0xb6>
 8003834:	2b03      	cmp	r3, #3
 8003836:	d003      	beq.n	8003840 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003838:	e018      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	73fb      	strb	r3, [r7, #15]
        break;
 800383e:	e015      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
    break;
 8003850:	e00b      	b.n	800386a <DMA_CheckFifoParam+0xe6>
        break;
 8003852:	bf00      	nop
 8003854:	e00a      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        break;
 8003856:	bf00      	nop
 8003858:	e008      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        break;
 800385a:	bf00      	nop
 800385c:	e006      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        break;
 800385e:	bf00      	nop
 8003860:	e004      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        break;
 8003862:	bf00      	nop
 8003864:	e002      	b.n	800386c <DMA_CheckFifoParam+0xe8>
        break;
 8003866:	bf00      	nop
 8003868:	e000      	b.n	800386c <DMA_CheckFifoParam+0xe8>
    break;
 800386a:	bf00      	nop
    }
  }

  return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3714      	adds	r7, #20
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop

0800387c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a38      	ldr	r2, [pc, #224]	; (8003970 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a36      	ldr	r2, [pc, #216]	; (8003974 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01d      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a35      	ldr	r2, [pc, #212]	; (8003978 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d018      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a33      	ldr	r2, [pc, #204]	; (800397c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d013      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a32      	ldr	r2, [pc, #200]	; (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00e      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a30      	ldr	r2, [pc, #192]	; (8003984 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d009      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2f      	ldr	r2, [pc, #188]	; (8003988 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d004      	beq.n	80038da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a2d      	ldr	r2, [pc, #180]	; (800398c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80038de:	2300      	movs	r3, #0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d01a      	beq.n	800391a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	3b08      	subs	r3, #8
 80038ec:	4a28      	ldr	r2, [pc, #160]	; (8003990 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80038fa:	4413      	add	r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	461a      	mov	r2, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a24      	ldr	r2, [pc, #144]	; (8003998 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003908:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2201      	movs	r2, #1
 8003912:	409a      	lsls	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003918:	e024      	b.n	8003964 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	b2db      	uxtb	r3, r3
 8003920:	3b10      	subs	r3, #16
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003924:	fba2 2303 	umull	r2, r3, r2, r3
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4a1c      	ldr	r2, [pc, #112]	; (80039a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d806      	bhi.n	8003942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	4a1b      	ldr	r2, [pc, #108]	; (80039a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	3308      	adds	r3, #8
 8003940:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	4b18      	ldr	r3, [pc, #96]	; (80039a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	461a      	mov	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003954:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	2201      	movs	r2, #1
 800395e:	409a      	lsls	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003964:	bf00      	nop
 8003966:	3714      	adds	r7, #20
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	58025408 	.word	0x58025408
 8003974:	5802541c 	.word	0x5802541c
 8003978:	58025430 	.word	0x58025430
 800397c:	58025444 	.word	0x58025444
 8003980:	58025458 	.word	0x58025458
 8003984:	5802546c 	.word	0x5802546c
 8003988:	58025480 	.word	0x58025480
 800398c:	58025494 	.word	0x58025494
 8003990:	cccccccd 	.word	0xcccccccd
 8003994:	16009600 	.word	0x16009600
 8003998:	58025880 	.word	0x58025880
 800399c:	aaaaaaab 	.word	0xaaaaaaab
 80039a0:	400204b8 	.word	0x400204b8
 80039a4:	4002040f 	.word	0x4002040f
 80039a8:	10008200 	.word	0x10008200
 80039ac:	40020880 	.word	0x40020880

080039b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d04a      	beq.n	8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b08      	cmp	r3, #8
 80039ca:	d847      	bhi.n	8003a5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d01d      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a22      	ldr	r2, [pc, #136]	; (8003a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d018      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a21      	ldr	r2, [pc, #132]	; (8003a74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d013      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00e      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d009      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1c      	ldr	r2, [pc, #112]	; (8003a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d004      	beq.n	8003a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d101      	bne.n	8003a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003a20:	2300      	movs	r3, #0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a26:	68fa      	ldr	r2, [r7, #12]
 8003a28:	4b17      	ldr	r3, [pc, #92]	; (8003a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	461a      	mov	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a15      	ldr	r2, [pc, #84]	; (8003a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003a38:	671a      	str	r2, [r3, #112]	; 0x70
 8003a3a:	e009      	b.n	8003a50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003a40:	4413      	add	r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a11      	ldr	r2, [pc, #68]	; (8003a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003a4e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	2201      	movs	r2, #1
 8003a56:	409a      	lsls	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	58025408 	.word	0x58025408
 8003a6c:	5802541c 	.word	0x5802541c
 8003a70:	58025430 	.word	0x58025430
 8003a74:	58025444 	.word	0x58025444
 8003a78:	58025458 	.word	0x58025458
 8003a7c:	5802546c 	.word	0x5802546c
 8003a80:	58025480 	.word	0x58025480
 8003a84:	58025494 	.word	0x58025494
 8003a88:	1600963f 	.word	0x1600963f
 8003a8c:	58025940 	.word	0x58025940
 8003a90:	1000823f 	.word	0x1000823f
 8003a94:	40020940 	.word	0x40020940

08003a98 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0cf      	b.n	8003c4a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2223      	movs	r2, #35	; 0x23
 8003ab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f7fd f8ef 	bl	8000ca0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac2:	4b64      	ldr	r3, [pc, #400]	; (8003c54 <HAL_ETH_Init+0x1bc>)
 8003ac4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ac8:	4a62      	ldr	r2, [pc, #392]	; (8003c54 <HAL_ETH_Init+0x1bc>)
 8003aca:	f043 0302 	orr.w	r3, r3, #2
 8003ace:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ad2:	4b60      	ldr	r3, [pc, #384]	; (8003c54 <HAL_ETH_Init+0x1bc>)
 8003ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	60bb      	str	r3, [r7, #8]
 8003ade:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	7a1b      	ldrb	r3, [r3, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7fd fc8f 	bl	800140c <HAL_SYSCFG_ETHInterfaceSelect>
 8003aee:	e003      	b.n	8003af8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003af0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003af4:	f7fd fc8a 	bl	800140c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_ETH_Init+0x1c0>)
 8003afa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6812      	ldr	r2, [r2, #0]
 8003b0a:	f043 0301 	orr.w	r3, r3, #1
 8003b0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b14:	f7fd fc6e 	bl	80013f4 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b1a:	e011      	b.n	8003b40 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003b1c:	f7fd fc6a 	bl	80013f4 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003b2a:	d909      	bls.n	8003b40 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2204      	movs	r2, #4
 8003b30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	22e0      	movs	r2, #224	; 0xe0
 8003b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e084      	b.n	8003c4a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e4      	bne.n	8003b1c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f886 	bl	8003c64 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003b58:	f001 fcc8 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	4a3f      	ldr	r2, [pc, #252]	; (8003c5c <HAL_ETH_Init+0x1c4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0c9a      	lsrs	r2, r3, #18
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3a01      	subs	r2, #1
 8003b6c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fa71 	bl	8004058 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003b7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003b82:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003b92:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	22e0      	movs	r2, #224	; 0xe0
 8003bae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e049      	b.n	8003c4a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bbe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003bc2:	4b27      	ldr	r3, [pc, #156]	; (8003c60 <HAL_ETH_Init+0x1c8>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	6952      	ldr	r2, [r2, #20]
 8003bca:	0051      	lsls	r1, r2, #1
 8003bcc:	687a      	ldr	r2, [r7, #4]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003bd6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fad9 	bl	8004192 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fb1f 	bl	8004224 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	3305      	adds	r3, #5
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	021a      	lsls	r2, r3, #8
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	3303      	adds	r3, #3
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	061a      	lsls	r2, r3, #24
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3302      	adds	r3, #2
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	041b      	lsls	r3, r3, #16
 8003c18:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c24:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003c32:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003c34:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2210      	movs	r2, #16
 8003c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
 8003c58:	58000400 	.word	0x58000400
 8003c5c:	431bde83 	.word	0x431bde83
 8003c60:	ffff8001 	.word	0xffff8001

08003c64 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003c7e:	f001 fc35 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8003c82:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	4a1e      	ldr	r2, [pc, #120]	; (8003d00 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d908      	bls.n	8003c9e <HAL_ETH_SetMDIOClockRange+0x3a>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d804      	bhi.n	8003c9e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	e027      	b.n	8003cee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d908      	bls.n	8003cb8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d204      	bcs.n	8003cb8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	e01a      	b.n	8003cee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d303      	bcc.n	8003cc8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4a12      	ldr	r2, [pc, #72]	; (8003d0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d911      	bls.n	8003cec <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d908      	bls.n	8003ce2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4a0f      	ldr	r2, [pc, #60]	; (8003d10 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d804      	bhi.n	8003ce2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	e005      	b.n	8003cee <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e000      	b.n	8003cee <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003cec:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003cf8:	bf00      	nop
 8003cfa:	3710      	adds	r7, #16
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	01312cff 	.word	0x01312cff
 8003d04:	02160ebf 	.word	0x02160ebf
 8003d08:	03938700 	.word	0x03938700
 8003d0c:	05f5e0ff 	.word	0x05f5e0ff
 8003d10:	08f0d17f 	.word	0x08f0d17f

08003d14 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003d26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	791b      	ldrb	r3, [r3, #4]
 8003d2c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003d2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	7b1b      	ldrb	r3, [r3, #12]
 8003d34:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003d36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	7b5b      	ldrb	r3, [r3, #13]
 8003d3c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	7b9b      	ldrb	r3, [r3, #14]
 8003d44:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	7bdb      	ldrb	r3, [r3, #15]
 8003d4c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003d4e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	7c12      	ldrb	r2, [r2, #16]
 8003d54:	2a00      	cmp	r2, #0
 8003d56:	d102      	bne.n	8003d5e <ETH_SetMACConfig+0x4a>
 8003d58:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003d5c:	e000      	b.n	8003d60 <ETH_SetMACConfig+0x4c>
 8003d5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003d60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	7c52      	ldrb	r2, [r2, #17]
 8003d66:	2a00      	cmp	r2, #0
 8003d68:	d102      	bne.n	8003d70 <ETH_SetMACConfig+0x5c>
 8003d6a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d6e:	e000      	b.n	8003d72 <ETH_SetMACConfig+0x5e>
 8003d70:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	7c9b      	ldrb	r3, [r3, #18]
 8003d78:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003d7a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003d80:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003d86:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	7f1b      	ldrb	r3, [r3, #28]
 8003d8c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	7f5b      	ldrb	r3, [r3, #29]
 8003d94:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003d96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	7f92      	ldrb	r2, [r2, #30]
 8003d9c:	2a00      	cmp	r2, #0
 8003d9e:	d102      	bne.n	8003da6 <ETH_SetMACConfig+0x92>
 8003da0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003da4:	e000      	b.n	8003da8 <ETH_SetMACConfig+0x94>
 8003da6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003da8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7fdb      	ldrb	r3, [r3, #31]
 8003dae:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003db0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003db8:	2a00      	cmp	r2, #0
 8003dba:	d102      	bne.n	8003dc2 <ETH_SetMACConfig+0xae>
 8003dbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dc0:	e000      	b.n	8003dc4 <ETH_SetMACConfig+0xb0>
 8003dc2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003dc4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dd2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003dd4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	4b56      	ldr	r3, [pc, #344]	; (8003f40 <ETH_SetMACConfig+0x22c>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	430b      	orrs	r3, r1
 8003df0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dfe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e00:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e08:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003e0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003e12:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003e14:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003e1c:	2a00      	cmp	r2, #0
 8003e1e:	d102      	bne.n	8003e26 <ETH_SetMACConfig+0x112>
 8003e20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003e24:	e000      	b.n	8003e28 <ETH_SetMACConfig+0x114>
 8003e26:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003e28:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4b42      	ldr	r3, [pc, #264]	; (8003f44 <ETH_SetMACConfig+0x230>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	68f9      	ldr	r1, [r7, #12]
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e4c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	4b3a      	ldr	r3, [pc, #232]	; (8003f48 <ETH_SetMACConfig+0x234>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	6812      	ldr	r2, [r2, #0]
 8003e64:	68f9      	ldr	r1, [r7, #12]
 8003e66:	430b      	orrs	r3, r1
 8003e68:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003e70:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e76:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	d101      	bne.n	8003e86 <ETH_SetMACConfig+0x172>
 8003e82:	2280      	movs	r2, #128	; 0x80
 8003e84:	e000      	b.n	8003e88 <ETH_SetMACConfig+0x174>
 8003e86:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003e88:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003e90:	4313      	orrs	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e9a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	68f9      	ldr	r1, [r7, #12]
 8003ea6:	430b      	orrs	r3, r1
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003eb0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003eb8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 0103 	bic.w	r1, r3, #3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003ede:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	d101      	bne.n	8003f02 <ETH_SetMACConfig+0x1ee>
 8003efe:	2240      	movs	r2, #64	; 0x40
 8003f00:	e000      	b.n	8003f04 <ETH_SetMACConfig+0x1f0>
 8003f02:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003f04:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003f0c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003f0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003f16:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f24:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003f34:	bf00      	nop
 8003f36:	3714      	adds	r7, #20
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	00048083 	.word	0x00048083
 8003f44:	c0f88000 	.word	0xc0f88000
 8003f48:	fffffef0 	.word	0xfffffef0

08003f4c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	4b38      	ldr	r3, [pc, #224]	; (8004044 <ETH_SetDMAConfig+0xf8>)
 8003f62:	4013      	ands	r3, r2
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	6811      	ldr	r1, [r2, #0]
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6812      	ldr	r2, [r2, #0]
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f72:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	791b      	ldrb	r3, [r3, #4]
 8003f78:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f7e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	7b1b      	ldrb	r3, [r3, #12]
 8003f84:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	4b2c      	ldr	r3, [pc, #176]	; (8004048 <ETH_SetDMAConfig+0xfc>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	68f9      	ldr	r1, [r7, #12]
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fa4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	7b5b      	ldrb	r3, [r3, #13]
 8003faa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fbc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <ETH_SetDMAConfig+0x100>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	68f9      	ldr	r1, [r7, #12]
 8003fca:	430b      	orrs	r3, r1
 8003fcc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003fd0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	7d1b      	ldrb	r3, [r3, #20]
 8003fdc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fde:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	7f5b      	ldrb	r3, [r3, #29]
 8003fe4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003ff6:	4b16      	ldr	r3, [pc, #88]	; (8004050 <ETH_SetDMAConfig+0x104>)
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6812      	ldr	r2, [r2, #0]
 8003ffe:	68f9      	ldr	r1, [r7, #12]
 8004000:	430b      	orrs	r3, r1
 8004002:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004006:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	7f1b      	ldrb	r3, [r3, #28]
 800400e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004014:	4313      	orrs	r3, r2
 8004016:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004020:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004024:	4b0b      	ldr	r3, [pc, #44]	; (8004054 <ETH_SetDMAConfig+0x108>)
 8004026:	4013      	ands	r3, r2
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	430b      	orrs	r3, r1
 8004030:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004034:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	ffff87fd 	.word	0xffff87fd
 8004048:	ffff2ffe 	.word	0xffff2ffe
 800404c:	fffec000 	.word	0xfffec000
 8004050:	ffc0efef 	.word	0xffc0efef
 8004054:	7fc0ffff 	.word	0x7fc0ffff

08004058 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b0a4      	sub	sp, #144	; 0x90
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004066:	2300      	movs	r3, #0
 8004068:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004070:	2300      	movs	r3, #0
 8004072:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004088:	2300      	movs	r3, #0
 800408a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004098:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800409a:	2300      	movs	r3, #0
 800409c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80040a0:	2300      	movs	r3, #0
 80040a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80040aa:	2300      	movs	r3, #0
 80040ac:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80040b0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80040b4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80040b6:	2300      	movs	r3, #0
 80040b8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80040bc:	2300      	movs	r3, #0
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80040c6:	2300      	movs	r3, #0
 80040c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80040cc:	2300      	movs	r3, #0
 80040ce:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80040d2:	2300      	movs	r3, #0
 80040d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80040da:	2300      	movs	r3, #0
 80040dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80040de:	2300      	movs	r3, #0
 80040e0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80040f0:	2320      	movs	r3, #32
 80040f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004102:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004108:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800410c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800410e:	2300      	movs	r3, #0
 8004110:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004114:	2302      	movs	r3, #2
 8004116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004120:	2300      	movs	r3, #0
 8004122:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004132:	2300      	movs	r3, #0
 8004134:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800413c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004140:	4619      	mov	r1, r3
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7ff fde6 	bl	8003d14 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004148:	2301      	movs	r3, #1
 800414a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800414c:	2301      	movs	r3, #1
 800414e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004154:	2300      	movs	r3, #0
 8004156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800415a:	2300      	movs	r3, #0
 800415c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800415e:	2300      	movs	r3, #0
 8004160:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004162:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004166:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004168:	2300      	movs	r3, #0
 800416a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800416c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004170:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004178:	f44f 7306 	mov.w	r3, #536	; 0x218
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4619      	mov	r1, r3
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7ff fee1 	bl	8003f4c <ETH_SetDMAConfig>
}
 800418a:	bf00      	nop
 800418c:	3790      	adds	r7, #144	; 0x90
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}

08004192 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e01d      	b.n	80041dc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68d9      	ldr	r1, [r3, #12]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4613      	mov	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	4413      	add	r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	440b      	add	r3, r1
 80041b0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	2200      	movs	r2, #0
 80041bc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	3206      	adds	r2, #6
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3301      	adds	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d9de      	bls.n	80041a0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041f0:	461a      	mov	r2, r3
 80041f2:	2303      	movs	r3, #3
 80041f4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68da      	ldr	r2, [r3, #12]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004204:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004214:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	e023      	b.n	800427a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6919      	ldr	r1, [r3, #16]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2200      	movs	r2, #0
 800425a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2200      	movs	r2, #0
 8004266:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	3212      	adds	r2, #18
 8004270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d9d8      	bls.n	8004232 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042a6:	461a      	mov	r2, r3
 80042a8:	2303      	movs	r3, #3
 80042aa:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691a      	ldr	r2, [r3, #16]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ba:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ce:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80042ee:	4b86      	ldr	r3, [pc, #536]	; (8004508 <HAL_GPIO_Init+0x228>)
 80042f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042f2:	e18c      	b.n	800460e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	2101      	movs	r1, #1
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	4013      	ands	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 817e 	beq.w	8004608 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	2b01      	cmp	r3, #1
 8004316:	d005      	beq.n	8004324 <HAL_GPIO_Init+0x44>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d130      	bne.n	8004386 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	005b      	lsls	r3, r3, #1
 800432e:	2203      	movs	r2, #3
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	43db      	mvns	r3, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4013      	ands	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	fa02 f303 	lsl.w	r3, r2, r3
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	4313      	orrs	r3, r2
 800434c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800435a:	2201      	movs	r2, #1
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43db      	mvns	r3, r3
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4013      	ands	r3, r2
 8004368:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	091b      	lsrs	r3, r3, #4
 8004370:	f003 0201 	and.w	r2, r3, #1
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69ba      	ldr	r2, [r7, #24]
 8004384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 0303 	and.w	r3, r3, #3
 800438e:	2b03      	cmp	r3, #3
 8004390:	d017      	beq.n	80043c2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	2203      	movs	r2, #3
 800439e:	fa02 f303 	lsl.w	r3, r2, r3
 80043a2:	43db      	mvns	r3, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4013      	ands	r3, r2
 80043a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	005b      	lsls	r3, r3, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d123      	bne.n	8004416 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	08da      	lsrs	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3208      	adds	r2, #8
 80043d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	220f      	movs	r2, #15
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	691a      	ldr	r2, [r3, #16]
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	f003 0307 	and.w	r3, r3, #7
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4313      	orrs	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	08da      	lsrs	r2, r3, #3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3208      	adds	r2, #8
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	005b      	lsls	r3, r3, #1
 8004420:	2203      	movs	r2, #3
 8004422:	fa02 f303 	lsl.w	r3, r2, r3
 8004426:	43db      	mvns	r3, r3
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	4013      	ands	r3, r2
 800442c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0203 	and.w	r2, r3, #3
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	005b      	lsls	r3, r3, #1
 800443a:	fa02 f303 	lsl.w	r3, r2, r3
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 80d8 	beq.w	8004608 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004458:	4b2c      	ldr	r3, [pc, #176]	; (800450c <HAL_GPIO_Init+0x22c>)
 800445a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800445e:	4a2b      	ldr	r2, [pc, #172]	; (800450c <HAL_GPIO_Init+0x22c>)
 8004460:	f043 0302 	orr.w	r3, r3, #2
 8004464:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004468:	4b28      	ldr	r3, [pc, #160]	; (800450c <HAL_GPIO_Init+0x22c>)
 800446a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004476:	4a26      	ldr	r2, [pc, #152]	; (8004510 <HAL_GPIO_Init+0x230>)
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	220f      	movs	r2, #15
 800448e:	fa02 f303 	lsl.w	r3, r2, r3
 8004492:	43db      	mvns	r3, r3
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	4013      	ands	r3, r2
 8004498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <HAL_GPIO_Init+0x234>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d04a      	beq.n	8004538 <HAL_GPIO_Init+0x258>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_GPIO_Init+0x238>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02b      	beq.n	8004502 <HAL_GPIO_Init+0x222>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_GPIO_Init+0x23c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d025      	beq.n	80044fe <HAL_GPIO_Init+0x21e>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_GPIO_Init+0x240>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d01f      	beq.n	80044fa <HAL_GPIO_Init+0x21a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_GPIO_Init+0x244>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d019      	beq.n	80044f6 <HAL_GPIO_Init+0x216>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a18      	ldr	r2, [pc, #96]	; (8004528 <HAL_GPIO_Init+0x248>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d013      	beq.n	80044f2 <HAL_GPIO_Init+0x212>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a17      	ldr	r2, [pc, #92]	; (800452c <HAL_GPIO_Init+0x24c>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00d      	beq.n	80044ee <HAL_GPIO_Init+0x20e>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a16      	ldr	r2, [pc, #88]	; (8004530 <HAL_GPIO_Init+0x250>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d007      	beq.n	80044ea <HAL_GPIO_Init+0x20a>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_GPIO_Init+0x254>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d101      	bne.n	80044e6 <HAL_GPIO_Init+0x206>
 80044e2:	2309      	movs	r3, #9
 80044e4:	e029      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044e6:	230a      	movs	r3, #10
 80044e8:	e027      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044ea:	2307      	movs	r3, #7
 80044ec:	e025      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044ee:	2306      	movs	r3, #6
 80044f0:	e023      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044f2:	2305      	movs	r3, #5
 80044f4:	e021      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044f6:	2304      	movs	r3, #4
 80044f8:	e01f      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044fa:	2303      	movs	r3, #3
 80044fc:	e01d      	b.n	800453a <HAL_GPIO_Init+0x25a>
 80044fe:	2302      	movs	r3, #2
 8004500:	e01b      	b.n	800453a <HAL_GPIO_Init+0x25a>
 8004502:	2301      	movs	r3, #1
 8004504:	e019      	b.n	800453a <HAL_GPIO_Init+0x25a>
 8004506:	bf00      	nop
 8004508:	58000080 	.word	0x58000080
 800450c:	58024400 	.word	0x58024400
 8004510:	58000400 	.word	0x58000400
 8004514:	58020000 	.word	0x58020000
 8004518:	58020400 	.word	0x58020400
 800451c:	58020800 	.word	0x58020800
 8004520:	58020c00 	.word	0x58020c00
 8004524:	58021000 	.word	0x58021000
 8004528:	58021400 	.word	0x58021400
 800452c:	58021800 	.word	0x58021800
 8004530:	58021c00 	.word	0x58021c00
 8004534:	58022400 	.word	0x58022400
 8004538:	2300      	movs	r3, #0
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	f002 0203 	and.w	r2, r2, #3
 8004540:	0092      	lsls	r2, r2, #2
 8004542:	4093      	lsls	r3, r2
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4313      	orrs	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800454a:	4938      	ldr	r1, [pc, #224]	; (800462c <HAL_GPIO_Init+0x34c>)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	3302      	adds	r3, #2
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	43db      	mvns	r3, r3
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	4013      	ands	r3, r2
 8004568:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004572:	2b00      	cmp	r3, #0
 8004574:	d003      	beq.n	800457e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4313      	orrs	r3, r2
 800457c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800457e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004586:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	43db      	mvns	r3, r3
 8004592:	69ba      	ldr	r2, [r7, #24]
 8004594:	4013      	ands	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d003      	beq.n	80045ac <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	3301      	adds	r3, #1
 800460c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	f47f ae6b 	bne.w	80042f4 <HAL_GPIO_Init+0x14>
  }
}
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	3724      	adds	r7, #36	; 0x24
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	58000400 	.word	0x58000400

08004630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	460b      	mov	r3, r1
 800463a:	807b      	strh	r3, [r7, #2]
 800463c:	4613      	mov	r3, r2
 800463e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004640:	787b      	ldrb	r3, [r7, #1]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004646:	887a      	ldrh	r2, [r7, #2]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800464c:	e003      	b.n	8004656 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800464e:	887b      	ldrh	r3, [r7, #2]
 8004650:	041a      	lsls	r2, r3, #16
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	619a      	str	r2, [r3, #24]
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_PWREx_ConfigSupply+0x70>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d00a      	beq.n	800468e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <HAL_PWREx_ConfigSupply+0x70>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	429a      	cmp	r2, r3
 8004684:	d001      	beq.n	800468a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e01f      	b.n	80046ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e01d      	b.n	80046ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 0207 	bic.w	r2, r3, #7
 8004696:	490f      	ldr	r1, [pc, #60]	; (80046d4 <HAL_PWREx_ConfigSupply+0x70>)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4313      	orrs	r3, r2
 800469c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800469e:	f7fc fea9 	bl	80013f4 <HAL_GetTick>
 80046a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046a4:	e009      	b.n	80046ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046a6:	f7fc fea5 	bl	80013f4 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046b4:	d901      	bls.n	80046ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e007      	b.n	80046ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046ba:	4b06      	ldr	r3, [pc, #24]	; (80046d4 <HAL_PWREx_ConfigSupply+0x70>)
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d1ee      	bne.n	80046a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	58024800 	.word	0x58024800

080046d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b08c      	sub	sp, #48	; 0x30
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e3c8      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 8087 	beq.w	8004806 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046f8:	4b88      	ldr	r3, [pc, #544]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004702:	4b86      	ldr	r3, [pc, #536]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004706:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	2b10      	cmp	r3, #16
 800470c:	d007      	beq.n	800471e <HAL_RCC_OscConfig+0x46>
 800470e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004710:	2b18      	cmp	r3, #24
 8004712:	d110      	bne.n	8004736 <HAL_RCC_OscConfig+0x5e>
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	f003 0303 	and.w	r3, r3, #3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d10b      	bne.n	8004736 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800471e:	4b7f      	ldr	r3, [pc, #508]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d06c      	beq.n	8004804 <HAL_RCC_OscConfig+0x12c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d168      	bne.n	8004804 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e3a2      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800473e:	d106      	bne.n	800474e <HAL_RCC_OscConfig+0x76>
 8004740:	4b76      	ldr	r3, [pc, #472]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a75      	ldr	r2, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	e02e      	b.n	80047ac <HAL_RCC_OscConfig+0xd4>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10c      	bne.n	8004770 <HAL_RCC_OscConfig+0x98>
 8004756:	4b71      	ldr	r3, [pc, #452]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a70      	ldr	r2, [pc, #448]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800475c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	4b6e      	ldr	r3, [pc, #440]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a6d      	ldr	r2, [pc, #436]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	e01d      	b.n	80047ac <HAL_RCC_OscConfig+0xd4>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004778:	d10c      	bne.n	8004794 <HAL_RCC_OscConfig+0xbc>
 800477a:	4b68      	ldr	r3, [pc, #416]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a67      	ldr	r2, [pc, #412]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	4b65      	ldr	r3, [pc, #404]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a64      	ldr	r2, [pc, #400]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800478c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	e00b      	b.n	80047ac <HAL_RCC_OscConfig+0xd4>
 8004794:	4b61      	ldr	r3, [pc, #388]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a60      	ldr	r2, [pc, #384]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800479a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b5e      	ldr	r3, [pc, #376]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5d      	ldr	r2, [pc, #372]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80047a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d013      	beq.n	80047dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b4:	f7fc fe1e 	bl	80013f4 <HAL_GetTick>
 80047b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fc fe1a 	bl	80013f4 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e356      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047ce:	4b53      	ldr	r3, [pc, #332]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d0f0      	beq.n	80047bc <HAL_RCC_OscConfig+0xe4>
 80047da:	e014      	b.n	8004806 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fc fe0a 	bl	80013f4 <HAL_GetTick>
 80047e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e4:	f7fc fe06 	bl	80013f4 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b64      	cmp	r3, #100	; 0x64
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e342      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047f6:	4b49      	ldr	r3, [pc, #292]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x10c>
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 808c 	beq.w	800492c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004814:	4b41      	ldr	r3, [pc, #260]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800481c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800481e:	4b3f      	ldr	r3, [pc, #252]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004822:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004824:	6a3b      	ldr	r3, [r7, #32]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_RCC_OscConfig+0x162>
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	2b18      	cmp	r3, #24
 800482e:	d137      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1c8>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	f003 0303 	and.w	r3, r3, #3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d132      	bne.n	80048a0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800483a:	4b38      	ldr	r3, [pc, #224]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_RCC_OscConfig+0x17a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e314      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004852:	4b32      	ldr	r3, [pc, #200]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 0219 	bic.w	r2, r3, #25
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	492f      	ldr	r1, [pc, #188]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fc fdc6 	bl	80013f4 <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800486c:	f7fc fdc2 	bl	80013f4 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e2fe      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800487e:	4b27      	ldr	r3, [pc, #156]	; (800491c <HAL_RCC_OscConfig+0x244>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800488a:	4b24      	ldr	r3, [pc, #144]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	061b      	lsls	r3, r3, #24
 8004898:	4920      	ldr	r1, [pc, #128]	; (800491c <HAL_RCC_OscConfig+0x244>)
 800489a:	4313      	orrs	r3, r2
 800489c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800489e:	e045      	b.n	800492c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d026      	beq.n	80048f6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048a8:	4b1c      	ldr	r3, [pc, #112]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f023 0219 	bic.w	r2, r3, #25
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	4919      	ldr	r1, [pc, #100]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ba:	f7fc fd9b 	bl	80013f4 <HAL_GetTick>
 80048be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048c0:	e008      	b.n	80048d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c2:	f7fc fd97 	bl	80013f4 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e2d3      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0304 	and.w	r3, r3, #4
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0f0      	beq.n	80048c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e0:	4b0e      	ldr	r3, [pc, #56]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	490b      	ldr	r1, [pc, #44]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
 80048f4:	e01a      	b.n	800492c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048f6:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a08      	ldr	r2, [pc, #32]	; (800491c <HAL_RCC_OscConfig+0x244>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004902:	f7fc fd77 	bl	80013f4 <HAL_GetTick>
 8004906:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004908:	e00a      	b.n	8004920 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800490a:	f7fc fd73 	bl	80013f4 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d903      	bls.n	8004920 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e2af      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
 800491c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004920:	4b96      	ldr	r3, [pc, #600]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0304 	and.w	r3, r3, #4
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ee      	bne.n	800490a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d06a      	beq.n	8004a0e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004938:	4b90      	ldr	r3, [pc, #576]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004940:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004942:	4b8e      	ldr	r3, [pc, #568]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004946:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b08      	cmp	r3, #8
 800494c:	d007      	beq.n	800495e <HAL_RCC_OscConfig+0x286>
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b18      	cmp	r3, #24
 8004952:	d11b      	bne.n	800498c <HAL_RCC_OscConfig+0x2b4>
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	2b01      	cmp	r3, #1
 800495c:	d116      	bne.n	800498c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800495e:	4b87      	ldr	r3, [pc, #540]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <HAL_RCC_OscConfig+0x29e>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	2b80      	cmp	r3, #128	; 0x80
 8004970:	d001      	beq.n	8004976 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e282      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004976:	4b81      	ldr	r3, [pc, #516]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	061b      	lsls	r3, r3, #24
 8004984:	497d      	ldr	r1, [pc, #500]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800498a:	e040      	b.n	8004a0e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d023      	beq.n	80049dc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004994:	4b79      	ldr	r3, [pc, #484]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a78      	ldr	r2, [pc, #480]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 800499a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800499e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a0:	f7fc fd28 	bl	80013f4 <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049a8:	f7fc fd24 	bl	80013f4 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e260      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049ba:	4b70      	ldr	r3, [pc, #448]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c6:	4b6d      	ldr	r3, [pc, #436]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	061b      	lsls	r3, r3, #24
 80049d4:	4969      	ldr	r1, [pc, #420]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60cb      	str	r3, [r1, #12]
 80049da:	e018      	b.n	8004a0e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80049dc:	4b67      	ldr	r3, [pc, #412]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a66      	ldr	r2, [pc, #408]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 80049e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e8:	f7fc fd04 	bl	80013f4 <HAL_GetTick>
 80049ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049f0:	f7fc fd00 	bl	80013f4 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e23c      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a02:	4b5e      	ldr	r3, [pc, #376]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1f0      	bne.n	80049f0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0308 	and.w	r3, r3, #8
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d036      	beq.n	8004a88 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d019      	beq.n	8004a56 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a22:	4b56      	ldr	r3, [pc, #344]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a26:	4a55      	ldr	r2, [pc, #340]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a28:	f043 0301 	orr.w	r3, r3, #1
 8004a2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a2e:	f7fc fce1 	bl	80013f4 <HAL_GetTick>
 8004a32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a36:	f7fc fcdd 	bl	80013f4 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e219      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a48:	4b4c      	ldr	r3, [pc, #304]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x35e>
 8004a54:	e018      	b.n	8004a88 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a56:	4b49      	ldr	r3, [pc, #292]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5a:	4a48      	ldr	r2, [pc, #288]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a5c:	f023 0301 	bic.w	r3, r3, #1
 8004a60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a62:	f7fc fcc7 	bl	80013f4 <HAL_GetTick>
 8004a66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a68:	e008      	b.n	8004a7c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fc fcc3 	bl	80013f4 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d901      	bls.n	8004a7c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e1ff      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a7c:	4b3f      	ldr	r3, [pc, #252]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1f0      	bne.n	8004a6a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d036      	beq.n	8004b02 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a9c:	4b37      	ldr	r3, [pc, #220]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a36      	ldr	r2, [pc, #216]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004aa2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fca4 	bl	80013f4 <HAL_GetTick>
 8004aac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ab0:	f7fc fca0 	bl	80013f4 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1dc      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ac2:	4b2e      	ldr	r3, [pc, #184]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x3d8>
 8004ace:	e018      	b.n	8004b02 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a29      	ldr	r2, [pc, #164]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004ad6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ada:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004adc:	f7fc fc8a 	bl	80013f4 <HAL_GetTick>
 8004ae0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ae4:	f7fc fc86 	bl	80013f4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e1c2      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004af6:	4b21      	ldr	r3, [pc, #132]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 8086 	beq.w	8004c1c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b10:	4b1b      	ldr	r3, [pc, #108]	; (8004b80 <HAL_RCC_OscConfig+0x4a8>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1a      	ldr	r2, [pc, #104]	; (8004b80 <HAL_RCC_OscConfig+0x4a8>)
 8004b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b1c:	f7fc fc6a 	bl	80013f4 <HAL_GetTick>
 8004b20:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b24:	f7fc fc66 	bl	80013f4 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b64      	cmp	r3, #100	; 0x64
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e1a2      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b36:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <HAL_RCC_OscConfig+0x4a8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d106      	bne.n	8004b58 <HAL_RCC_OscConfig+0x480>
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4e:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b50:	f043 0301 	orr.w	r3, r3, #1
 8004b54:	6713      	str	r3, [r2, #112]	; 0x70
 8004b56:	e032      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e6>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d111      	bne.n	8004b84 <HAL_RCC_OscConfig+0x4ac>
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6c:	4b03      	ldr	r3, [pc, #12]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	4a02      	ldr	r2, [pc, #8]	; (8004b7c <HAL_RCC_OscConfig+0x4a4>)
 8004b72:	f023 0304 	bic.w	r3, r3, #4
 8004b76:	6713      	str	r3, [r2, #112]	; 0x70
 8004b78:	e021      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e6>
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	58024800 	.word	0x58024800
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x4ce>
 8004b8c:	4b83      	ldr	r3, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a82      	ldr	r2, [pc, #520]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b80      	ldr	r3, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a7f      	ldr	r2, [pc, #508]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCC_OscConfig+0x4e6>
 8004ba6:	4b7d      	ldr	r3, [pc, #500]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a7c      	ldr	r2, [pc, #496]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b7a      	ldr	r3, [pc, #488]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a79      	ldr	r2, [pc, #484]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fc fc15 	bl	80013f4 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fc fc11 	bl	80013f4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e14b      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be4:	4b6d      	ldr	r3, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x4f6>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fc fbff 	bl	80013f4 <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fc fbfb 	bl	80013f4 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e135      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c10:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 812a 	beq.w	8004e7a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c26:	4b5d      	ldr	r3, [pc, #372]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c2e:	2b18      	cmp	r3, #24
 8004c30:	f000 80ba 	beq.w	8004da8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	f040 8095 	bne.w	8004d68 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c3e:	4b57      	ldr	r3, [pc, #348]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a56      	ldr	r2, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c4a:	f7fc fbd3 	bl	80013f4 <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fc fbcf 	bl	80013f4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e10b      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c64:	4b4d      	ldr	r3, [pc, #308]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f0      	bne.n	8004c52 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c70:	4b4a      	ldr	r3, [pc, #296]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c74:	4b4a      	ldr	r3, [pc, #296]	; (8004da0 <HAL_RCC_OscConfig+0x6c8>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c80:	0112      	lsls	r2, r2, #4
 8004c82:	430a      	orrs	r2, r1
 8004c84:	4945      	ldr	r1, [pc, #276]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	628b      	str	r3, [r1, #40]	; 0x28
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	025b      	lsls	r3, r3, #9
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	041b      	lsls	r3, r3, #16
 8004ca8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	061b      	lsls	r3, r3, #24
 8004cb6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004cba:	4938      	ldr	r1, [pc, #224]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cc0:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4a35      	ldr	r2, [pc, #212]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cc6:	f023 0301 	bic.w	r3, r3, #1
 8004cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cd0:	4b34      	ldr	r3, [pc, #208]	; (8004da4 <HAL_RCC_OscConfig+0x6cc>)
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cd8:	00d2      	lsls	r2, r2, #3
 8004cda:	4930      	ldr	r1, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ce0:	4b2e      	ldr	r3, [pc, #184]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	f023 020c 	bic.w	r2, r3, #12
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	492b      	ldr	r1, [pc, #172]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cf2:	4b2a      	ldr	r3, [pc, #168]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf6:	f023 0202 	bic.w	r2, r3, #2
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfe:	4927      	ldr	r1, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d04:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d10:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d1c:	4b1f      	ldr	r3, [pc, #124]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d20:	4a1e      	ldr	r2, [pc, #120]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d28:	4b1c      	ldr	r3, [pc, #112]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d2e:	f043 0301 	orr.w	r3, r3, #1
 8004d32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d34:	4b19      	ldr	r3, [pc, #100]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a18      	ldr	r2, [pc, #96]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fc fb58 	bl	80013f4 <HAL_GetTick>
 8004d44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d48:	f7fc fb54 	bl	80013f4 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e090      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d5a:	4b10      	ldr	r3, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0x670>
 8004d66:	e088      	b.n	8004e7a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d68:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a0b      	ldr	r2, [pc, #44]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fb3e 	bl	80013f4 <HAL_GetTick>
 8004d78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fc fb3a 	bl	80013f4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e076      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d8e:	4b03      	ldr	r3, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0x6c4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x6a4>
 8004d9a:	e06e      	b.n	8004e7a <HAL_RCC_OscConfig+0x7a2>
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	fffffc0c 	.word	0xfffffc0c
 8004da4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004da8:	4b36      	ldr	r3, [pc, #216]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dae:	4b35      	ldr	r3, [pc, #212]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d031      	beq.n	8004e20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d12a      	bne.n	8004e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	091b      	lsrs	r3, r3, #4
 8004dce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d122      	bne.n	8004e20 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d11a      	bne.n	8004e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	0a5b      	lsrs	r3, r3, #9
 8004dee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d111      	bne.n	8004e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	0c1b      	lsrs	r3, r3, #16
 8004e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e08:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d108      	bne.n	8004e20 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	0e1b      	lsrs	r3, r3, #24
 8004e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d001      	beq.n	8004e24 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e02b      	b.n	8004e7c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e24:	4b17      	ldr	r3, [pc, #92]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	08db      	lsrs	r3, r3, #3
 8004e2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e2e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d01f      	beq.n	8004e7a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	4a11      	ldr	r2, [pc, #68]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e46:	f7fc fad5 	bl	80013f4 <HAL_GetTick>
 8004e4a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e4c:	bf00      	nop
 8004e4e:	f7fc fad1 	bl	80013f4 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d0f9      	beq.n	8004e4e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <HAL_RCC_OscConfig+0x7b0>)
 8004e60:	4013      	ands	r3, r2
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004e66:	00d2      	lsls	r2, r2, #3
 8004e68:	4906      	ldr	r1, [pc, #24]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e6e:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e72:	4a04      	ldr	r2, [pc, #16]	; (8004e84 <HAL_RCC_OscConfig+0x7ac>)
 8004e74:	f043 0301 	orr.w	r3, r3, #1
 8004e78:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3730      	adds	r7, #48	; 0x30
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	58024400 	.word	0x58024400
 8004e88:	ffff0007 	.word	0xffff0007

08004e8c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e19c      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b8a      	ldr	r3, [pc, #552]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d910      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b87      	ldr	r3, [pc, #540]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 020f 	bic.w	r2, r3, #15
 8004eb6:	4985      	ldr	r1, [pc, #532]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b83      	ldr	r3, [pc, #524]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e184      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	4b7b      	ldr	r3, [pc, #492]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004eec:	4b78      	ldr	r3, [pc, #480]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	4975      	ldr	r1, [pc, #468]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	695a      	ldr	r2, [r3, #20]
 8004f0e:	4b70      	ldr	r3, [pc, #448]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d908      	bls.n	8004f2c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f1a:	4b6d      	ldr	r3, [pc, #436]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	496a      	ldr	r1, [pc, #424]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	4b64      	ldr	r3, [pc, #400]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	69db      	ldr	r3, [r3, #28]
 8004f40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d908      	bls.n	8004f5a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	495e      	ldr	r1, [pc, #376]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d010      	beq.n	8004f88 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	4b59      	ldr	r3, [pc, #356]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d908      	bls.n	8004f88 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f76:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4953      	ldr	r1, [pc, #332]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	4b4d      	ldr	r3, [pc, #308]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 030f 	and.w	r3, r3, #15
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d908      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa4:	4b4a      	ldr	r3, [pc, #296]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f023 020f 	bic.w	r2, r3, #15
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	4947      	ldr	r1, [pc, #284]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d055      	beq.n	800506e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fc2:	4b43      	ldr	r3, [pc, #268]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	4940      	ldr	r1, [pc, #256]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d107      	bne.n	8004fec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fdc:	4b3c      	ldr	r3, [pc, #240]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d121      	bne.n	800502c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0f6      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ff4:	4b36      	ldr	r3, [pc, #216]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d115      	bne.n	800502c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0ea      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d107      	bne.n	800501c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800500c:	4b30      	ldr	r3, [pc, #192]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005014:	2b00      	cmp	r3, #0
 8005016:	d109      	bne.n	800502c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e0de      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800501c:	4b2c      	ldr	r3, [pc, #176]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0304 	and.w	r3, r3, #4
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e0d6      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800502c:	4b28      	ldr	r3, [pc, #160]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800502e:	691b      	ldr	r3, [r3, #16]
 8005030:	f023 0207 	bic.w	r2, r3, #7
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4925      	ldr	r1, [pc, #148]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800503e:	f7fc f9d9 	bl	80013f4 <HAL_GetTick>
 8005042:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005044:	e00a      	b.n	800505c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005046:	f7fc f9d5 	bl	80013f4 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	4293      	cmp	r3, r2
 8005056:	d901      	bls.n	800505c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e0be      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505c:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	00db      	lsls	r3, r3, #3
 800506a:	429a      	cmp	r2, r3
 800506c:	d1eb      	bne.n	8005046 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d010      	beq.n	800509c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	429a      	cmp	r2, r3
 8005088:	d208      	bcs.n	800509c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508a:	4b11      	ldr	r3, [pc, #68]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f023 020f 	bic.w	r2, r3, #15
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	490e      	ldr	r1, [pc, #56]	; (80050d0 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 030f 	and.w	r3, r3, #15
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d214      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050aa:	4b08      	ldr	r3, [pc, #32]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f023 020f 	bic.w	r2, r3, #15
 80050b2:	4906      	ldr	r1, [pc, #24]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_RCC_ClockConfig+0x240>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d005      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e086      	b.n	80051da <HAL_RCC_ClockConfig+0x34e>
 80050cc:	52002000 	.word	0x52002000
 80050d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	691a      	ldr	r2, [r3, #16]
 80050e4:	4b3f      	ldr	r3, [pc, #252]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d208      	bcs.n	8005102 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050f0:	4b3c      	ldr	r3, [pc, #240]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	4939      	ldr	r1, [pc, #228]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0308 	and.w	r3, r3, #8
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695a      	ldr	r2, [r3, #20]
 8005112:	4b34      	ldr	r3, [pc, #208]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800511a:	429a      	cmp	r2, r3
 800511c:	d208      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800511e:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	492e      	ldr	r1, [pc, #184]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 800512c:	4313      	orrs	r3, r2
 800512e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b00      	cmp	r3, #0
 800513a:	d010      	beq.n	800515e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4b28      	ldr	r3, [pc, #160]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005148:	429a      	cmp	r2, r3
 800514a:	d208      	bcs.n	800515e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800514c:	4b25      	ldr	r3, [pc, #148]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4922      	ldr	r1, [pc, #136]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 800515a:	4313      	orrs	r3, r2
 800515c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0320 	and.w	r3, r3, #32
 8005166:	2b00      	cmp	r3, #0
 8005168:	d010      	beq.n	800518c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	69da      	ldr	r2, [r3, #28]
 800516e:	4b1d      	ldr	r3, [pc, #116]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005176:	429a      	cmp	r2, r3
 8005178:	d208      	bcs.n	800518c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800517a:	4b1a      	ldr	r3, [pc, #104]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	4917      	ldr	r1, [pc, #92]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005188:	4313      	orrs	r3, r2
 800518a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800518c:	f000 f834 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 8005190:	4602      	mov	r2, r0
 8005192:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	0a1b      	lsrs	r3, r3, #8
 8005198:	f003 030f 	and.w	r3, r3, #15
 800519c:	4912      	ldr	r1, [pc, #72]	; (80051e8 <HAL_RCC_ClockConfig+0x35c>)
 800519e:	5ccb      	ldrb	r3, [r1, r3]
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	fa22 f303 	lsr.w	r3, r2, r3
 80051a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051aa:	4b0e      	ldr	r3, [pc, #56]	; (80051e4 <HAL_RCC_ClockConfig+0x358>)
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	4a0d      	ldr	r2, [pc, #52]	; (80051e8 <HAL_RCC_ClockConfig+0x35c>)
 80051b4:	5cd3      	ldrb	r3, [r2, r3]
 80051b6:	f003 031f 	and.w	r3, r3, #31
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	fa22 f303 	lsr.w	r3, r2, r3
 80051c0:	4a0a      	ldr	r2, [pc, #40]	; (80051ec <HAL_RCC_ClockConfig+0x360>)
 80051c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c4:	4a0a      	ldr	r2, [pc, #40]	; (80051f0 <HAL_RCC_ClockConfig+0x364>)
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <HAL_RCC_ClockConfig+0x368>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc f8c6 	bl	8001360 <HAL_InitTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	58024400 	.word	0x58024400
 80051e8:	08009a04 	.word	0x08009a04
 80051ec:	24000004 	.word	0x24000004
 80051f0:	24000000 	.word	0x24000000
 80051f4:	24000008 	.word	0x24000008

080051f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	; 0x24
 80051fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051fe:	4bb3      	ldr	r3, [pc, #716]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005206:	2b18      	cmp	r3, #24
 8005208:	f200 8155 	bhi.w	80054b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800520c:	a201      	add	r2, pc, #4	; (adr r2, 8005214 <HAL_RCC_GetSysClockFreq+0x1c>)
 800520e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005212:	bf00      	nop
 8005214:	08005279 	.word	0x08005279
 8005218:	080054b7 	.word	0x080054b7
 800521c:	080054b7 	.word	0x080054b7
 8005220:	080054b7 	.word	0x080054b7
 8005224:	080054b7 	.word	0x080054b7
 8005228:	080054b7 	.word	0x080054b7
 800522c:	080054b7 	.word	0x080054b7
 8005230:	080054b7 	.word	0x080054b7
 8005234:	0800529f 	.word	0x0800529f
 8005238:	080054b7 	.word	0x080054b7
 800523c:	080054b7 	.word	0x080054b7
 8005240:	080054b7 	.word	0x080054b7
 8005244:	080054b7 	.word	0x080054b7
 8005248:	080054b7 	.word	0x080054b7
 800524c:	080054b7 	.word	0x080054b7
 8005250:	080054b7 	.word	0x080054b7
 8005254:	080052a5 	.word	0x080052a5
 8005258:	080054b7 	.word	0x080054b7
 800525c:	080054b7 	.word	0x080054b7
 8005260:	080054b7 	.word	0x080054b7
 8005264:	080054b7 	.word	0x080054b7
 8005268:	080054b7 	.word	0x080054b7
 800526c:	080054b7 	.word	0x080054b7
 8005270:	080054b7 	.word	0x080054b7
 8005274:	080052ab 	.word	0x080052ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005278:	4b94      	ldr	r3, [pc, #592]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d009      	beq.n	8005298 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005284:	4b91      	ldr	r3, [pc, #580]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	08db      	lsrs	r3, r3, #3
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	4a90      	ldr	r2, [pc, #576]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005290:	fa22 f303 	lsr.w	r3, r2, r3
 8005294:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005296:	e111      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005298:	4b8d      	ldr	r3, [pc, #564]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800529a:	61bb      	str	r3, [r7, #24]
      break;
 800529c:	e10e      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800529e:	4b8d      	ldr	r3, [pc, #564]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052a0:	61bb      	str	r3, [r7, #24]
      break;
 80052a2:	e10b      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052a4:	4b8c      	ldr	r3, [pc, #560]	; (80054d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052a6:	61bb      	str	r3, [r7, #24]
      break;
 80052a8:	e108      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052aa:	4b88      	ldr	r3, [pc, #544]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052b4:	4b85      	ldr	r3, [pc, #532]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	091b      	lsrs	r3, r3, #4
 80052ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052c0:	4b82      	ldr	r3, [pc, #520]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052ca:	4b80      	ldr	r3, [pc, #512]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	08db      	lsrs	r3, r3, #3
 80052d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80e1 	beq.w	80054b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f000 8083 	beq.w	80053fc <HAL_RCC_GetSysClockFreq+0x204>
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	f200 80a1 	bhi.w	8005440 <HAL_RCC_GetSysClockFreq+0x248>
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x114>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d056      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800530a:	e099      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800530c:	4b6f      	ldr	r3, [pc, #444]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d02d      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005318:	4b6c      	ldr	r3, [pc, #432]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	08db      	lsrs	r3, r3, #3
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	4a6b      	ldr	r2, [pc, #428]	; (80054d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005324:	fa22 f303 	lsr.w	r3, r2, r3
 8005328:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	ee07 3a90 	vmov	s15, r3
 8005330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	ee07 3a90 	vmov	s15, r3
 800533a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800533e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005342:	4b62      	ldr	r3, [pc, #392]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005352:	ed97 6a02 	vldr	s12, [r7, #8]
 8005356:	eddf 5a61 	vldr	s11, [pc, #388]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800535a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005362:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800536a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005372:	e087      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80054e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005386:	4b51      	ldr	r3, [pc, #324]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538e:	ee07 3a90 	vmov	s15, r3
 8005392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005396:	ed97 6a02 	vldr	s12, [r7, #8]
 800539a:	eddf 5a50 	vldr	s11, [pc, #320]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800539e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053b6:	e065      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053c2:	eddf 6a48 	vldr	s13, [pc, #288]	; 80054e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ca:	4b40      	ldr	r3, [pc, #256]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053d2:	ee07 3a90 	vmov	s15, r3
 80053d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053da:	ed97 6a02 	vldr	s12, [r7, #8]
 80053de:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80053e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053fa:	e043      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005406:	eddf 6a38 	vldr	s13, [pc, #224]	; 80054e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800540a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800540e:	4b2f      	ldr	r3, [pc, #188]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800541e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005422:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8005426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800542a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800542e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800543a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800543e:	e021      	b.n	8005484 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800544a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80054e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800544e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005452:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005462:	ed97 6a02 	vldr	s12, [r7, #8]
 8005466:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80054dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800546a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800546e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800547e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005482:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005484:	4b11      	ldr	r3, [pc, #68]	; (80054cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	0a5b      	lsrs	r3, r3, #9
 800548a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800548e:	3301      	adds	r3, #1
 8005490:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800549c:	edd7 6a07 	vldr	s13, [r7, #28]
 80054a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a8:	ee17 3a90 	vmov	r3, s15
 80054ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054ae:	e005      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
      break;
 80054b4:	e002      	b.n	80054bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054b6:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054b8:	61bb      	str	r3, [r7, #24]
      break;
 80054ba:	bf00      	nop
  }

  return sysclockfreq;
 80054bc:	69bb      	ldr	r3, [r7, #24]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3724      	adds	r7, #36	; 0x24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	58024400 	.word	0x58024400
 80054d0:	03d09000 	.word	0x03d09000
 80054d4:	003d0900 	.word	0x003d0900
 80054d8:	007a1200 	.word	0x007a1200
 80054dc:	46000000 	.word	0x46000000
 80054e0:	4c742400 	.word	0x4c742400
 80054e4:	4a742400 	.word	0x4a742400
 80054e8:	4af42400 	.word	0x4af42400

080054ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80054f2:	f7ff fe81 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80054f6:	4602      	mov	r2, r0
 80054f8:	4b10      	ldr	r3, [pc, #64]	; (800553c <HAL_RCC_GetHCLKFreq+0x50>)
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	0a1b      	lsrs	r3, r3, #8
 80054fe:	f003 030f 	and.w	r3, r3, #15
 8005502:	490f      	ldr	r1, [pc, #60]	; (8005540 <HAL_RCC_GetHCLKFreq+0x54>)
 8005504:	5ccb      	ldrb	r3, [r1, r3]
 8005506:	f003 031f 	and.w	r3, r3, #31
 800550a:	fa22 f303 	lsr.w	r3, r2, r3
 800550e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <HAL_RCC_GetHCLKFreq+0x50>)
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	4a09      	ldr	r2, [pc, #36]	; (8005540 <HAL_RCC_GetHCLKFreq+0x54>)
 800551a:	5cd3      	ldrb	r3, [r2, r3]
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	fa22 f303 	lsr.w	r3, r2, r3
 8005526:	4a07      	ldr	r2, [pc, #28]	; (8005544 <HAL_RCC_GetHCLKFreq+0x58>)
 8005528:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <HAL_RCC_GetHCLKFreq+0x5c>)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005530:	4b04      	ldr	r3, [pc, #16]	; (8005544 <HAL_RCC_GetHCLKFreq+0x58>)
 8005532:	681b      	ldr	r3, [r3, #0]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	58024400 	.word	0x58024400
 8005540:	08009a04 	.word	0x08009a04
 8005544:	24000004 	.word	0x24000004
 8005548:	24000000 	.word	0x24000000

0800554c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005550:	f7ff ffcc 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005554:	4602      	mov	r2, r0
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	091b      	lsrs	r3, r3, #4
 800555c:	f003 0307 	and.w	r3, r3, #7
 8005560:	4904      	ldr	r1, [pc, #16]	; (8005574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005562:	5ccb      	ldrb	r3, [r1, r3]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}
 8005570:	58024400 	.word	0x58024400
 8005574:	08009a04 	.word	0x08009a04

08005578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800557c:	f7ff ffb6 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b06      	ldr	r3, [pc, #24]	; (800559c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	0a1b      	lsrs	r3, r3, #8
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4904      	ldr	r1, [pc, #16]	; (80055a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	58024400 	.word	0x58024400
 80055a0:	08009a04 	.word	0x08009a04

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055a8:	b0c6      	sub	sp, #280	; 0x118
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055b0:	2300      	movs	r3, #0
 80055b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b6:	2300      	movs	r3, #0
 80055b8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80055c8:	2500      	movs	r5, #0
 80055ca:	ea54 0305 	orrs.w	r3, r4, r5
 80055ce:	d049      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80055d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055da:	d02f      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80055dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055e0:	d828      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055e6:	d01a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055ec:	d822      	bhi.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d003      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80055f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055f6:	d007      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f8:	e01c      	b.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fa:	4bab      	ldr	r3, [pc, #684]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80055fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055fe:	4aaa      	ldr	r2, [pc, #680]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005600:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005604:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005606:	e01a      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800560c:	3308      	adds	r3, #8
 800560e:	2102      	movs	r1, #2
 8005610:	4618      	mov	r0, r3
 8005612:	f001 fc25 	bl	8006e60 <RCCEx_PLL2_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800561c:	e00f      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800561e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005622:	3328      	adds	r3, #40	; 0x28
 8005624:	2102      	movs	r1, #2
 8005626:	4618      	mov	r0, r3
 8005628:	f001 fccc 	bl	8006fc4 <RCCEx_PLL3_Config>
 800562c:	4603      	mov	r3, r0
 800562e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005632:	e004      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800563a:	e000      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800563c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800563e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10a      	bne.n	800565c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005646:	4b98      	ldr	r3, [pc, #608]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800564e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005654:	4a94      	ldr	r2, [pc, #592]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005656:	430b      	orrs	r3, r1
 8005658:	6513      	str	r3, [r2, #80]	; 0x50
 800565a:	e003      	b.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800565c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005660:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005664:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8005670:	f04f 0900 	mov.w	r9, #0
 8005674:	ea58 0309 	orrs.w	r3, r8, r9
 8005678:	d047      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800567e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005680:	2b04      	cmp	r3, #4
 8005682:	d82a      	bhi.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056a1 	.word	0x080056a1
 8005690:	080056af 	.word	0x080056af
 8005694:	080056c5 	.word	0x080056c5
 8005698:	080056e3 	.word	0x080056e3
 800569c:	080056e3 	.word	0x080056e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056a0:	4b81      	ldr	r3, [pc, #516]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a4:	4a80      	ldr	r2, [pc, #512]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ac:	e01a      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b2:	3308      	adds	r3, #8
 80056b4:	2100      	movs	r1, #0
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 fbd2 	bl	8006e60 <RCCEx_PLL2_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056c2:	e00f      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c8:	3328      	adds	r3, #40	; 0x28
 80056ca:	2100      	movs	r1, #0
 80056cc:	4618      	mov	r0, r3
 80056ce:	f001 fc79 	bl	8006fc4 <RCCEx_PLL3_Config>
 80056d2:	4603      	mov	r3, r0
 80056d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d8:	e004      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80056e0:	e000      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80056e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056ec:	4b6e      	ldr	r3, [pc, #440]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f0:	f023 0107 	bic.w	r1, r3, #7
 80056f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fa:	4a6b      	ldr	r2, [pc, #428]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056fc:	430b      	orrs	r3, r1
 80056fe:	6513      	str	r3, [r2, #80]	; 0x50
 8005700:	e003      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005702:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005706:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800570a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8005716:	f04f 0b00 	mov.w	fp, #0
 800571a:	ea5a 030b 	orrs.w	r3, sl, fp
 800571e:	d05b      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005724:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005728:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800572c:	d03b      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800572e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8005732:	d834      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005734:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005738:	d037      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x206>
 800573a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573e:	d82e      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005740:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005744:	d033      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005746:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800574a:	d828      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800574c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005750:	d01a      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005756:	d822      	bhi.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800575c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005760:	d007      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8005762:	e01c      	b.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005764:	4b50      	ldr	r3, [pc, #320]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	4a4f      	ldr	r2, [pc, #316]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800576a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800576e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005770:	e01e      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005776:	3308      	adds	r3, #8
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f001 fb70 	bl	8006e60 <RCCEx_PLL2_Config>
 8005780:	4603      	mov	r3, r0
 8005782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005786:	e013      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005788:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800578c:	3328      	adds	r3, #40	; 0x28
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fc17 	bl	8006fc4 <RCCEx_PLL3_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800579c:	e008      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80057a4:	e004      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057a6:	bf00      	nop
 80057a8:	e002      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057aa:	bf00      	nop
 80057ac:	e000      	b.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057b8:	4b3b      	ldr	r3, [pc, #236]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057bc:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80057c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80057c8:	4a37      	ldr	r2, [pc, #220]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	6593      	str	r3, [r2, #88]	; 0x58
 80057ce:	e003      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80057d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80057e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80057e8:	2300      	movs	r3, #0
 80057ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80057ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80057f2:	460b      	mov	r3, r1
 80057f4:	4313      	orrs	r3, r2
 80057f6:	d05d      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80057f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80057fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005800:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8005804:	d03b      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005806:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800580a:	d834      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800580c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005810:	d037      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005812:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005816:	d82e      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005818:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800581c:	d033      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800581e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005822:	d828      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005828:	d01a      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800582a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582e:	d822      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005834:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005838:	d007      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800583a:	e01c      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005848:	e01e      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800584a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800584e:	3308      	adds	r3, #8
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fb04 	bl	8006e60 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800585e:	e013      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005864:	3328      	adds	r3, #40	; 0x28
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fbab 	bl	8006fc4 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005874:	e008      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800587c:	e004      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800587e:	bf00      	nop
 8005880:	e002      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005882:	bf00      	nop
 8005884:	e000      	b.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005886:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10d      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005894:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8005898:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800589c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058a0:	4a01      	ldr	r2, [pc, #4]	; (80058a8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058a2:	430b      	orrs	r3, r1
 80058a4:	6593      	str	r3, [r2, #88]	; 0x58
 80058a6:	e005      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80058a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80058b0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80058c0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80058c4:	2300      	movs	r3, #0
 80058c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80058ca:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4313      	orrs	r3, r2
 80058d2:	d03a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80058d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058da:	2b30      	cmp	r3, #48	; 0x30
 80058dc:	d01f      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80058de:	2b30      	cmp	r3, #48	; 0x30
 80058e0:	d819      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d00c      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80058e6:	2b20      	cmp	r3, #32
 80058e8:	d815      	bhi.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d019      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80058ee:	2b10      	cmp	r3, #16
 80058f0:	d111      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f2:	4baa      	ldr	r3, [pc, #680]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f6:	4aa9      	ldr	r2, [pc, #676]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80058f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80058fe:	e011      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005904:	3308      	adds	r3, #8
 8005906:	2102      	movs	r1, #2
 8005908:	4618      	mov	r0, r3
 800590a:	f001 faa9 	bl	8006e60 <RCCEx_PLL2_Config>
 800590e:	4603      	mov	r3, r0
 8005910:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005914:	e006      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800591c:	e002      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800591e:	bf00      	nop
 8005920:	e000      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005924:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10a      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800592c:	4b9b      	ldr	r3, [pc, #620]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800592e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005930:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800593a:	4a98      	ldr	r2, [pc, #608]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800593c:	430b      	orrs	r3, r1
 800593e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005942:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005946:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800594a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800594e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005952:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800595a:	2300      	movs	r3, #0
 800595c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005960:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8005964:	460b      	mov	r3, r1
 8005966:	4313      	orrs	r3, r2
 8005968:	d051      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005970:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005974:	d035      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800597a:	d82e      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x436>
 800597c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005980:	d031      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005982:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005986:	d828      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598c:	d01a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800598e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005992:	d822      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	d007      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800599e:	e01c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a0:	4b7e      	ldr	r3, [pc, #504]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a4:	4a7d      	ldr	r2, [pc, #500]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ac:	e01c      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059b2:	3308      	adds	r3, #8
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 fa52 	bl	8006e60 <RCCEx_PLL2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059c2:	e011      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059c8:	3328      	adds	r3, #40	; 0x28
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 faf9 	bl	8006fc4 <RCCEx_PLL3_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d8:	e006      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80059e0:	e002      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80059e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80059f0:	4b6a      	ldr	r3, [pc, #424]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80059f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80059fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059fe:	4a67      	ldr	r2, [pc, #412]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a00:	430b      	orrs	r3, r1
 8005a02:	6513      	str	r3, [r2, #80]	; 0x50
 8005a04:	e003      	b.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a06:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005a0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005a1a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a24:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8005a28:	460b      	mov	r3, r1
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	d053      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a38:	d033      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a3e:	d82c      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a44:	d02f      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a4a:	d826      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a50:	d02b      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a56:	d820      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5c:	d012      	beq.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a62:	d81a      	bhi.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d022      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d115      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a72:	3308      	adds	r3, #8
 8005a74:	2101      	movs	r1, #1
 8005a76:	4618      	mov	r0, r3
 8005a78:	f001 f9f2 	bl	8006e60 <RCCEx_PLL2_Config>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a82:	e015      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005a88:	3328      	adds	r3, #40	; 0x28
 8005a8a:	2101      	movs	r1, #1
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f001 fa99 	bl	8006fc4 <RCCEx_PLL3_Config>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005aa0:	e006      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005aa2:	bf00      	nop
 8005aa4:	e004      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005aa6:	bf00      	nop
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005aaa:	bf00      	nop
 8005aac:	e000      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ab0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ab8:	4b38      	ldr	r3, [pc, #224]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ac6:	4a35      	ldr	r2, [pc, #212]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ac8:	430b      	orrs	r3, r1
 8005aca:	6513      	str	r3, [r2, #80]	; 0x50
 8005acc:	e003      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ace:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ad2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8005ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005aec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005af0:	460b      	mov	r3, r1
 8005af2:	4313      	orrs	r3, r2
 8005af4:	d058      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005af6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005afa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005afe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b02:	d033      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005b04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b08:	d82c      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b0e:	d02f      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b14:	d826      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b1a:	d02b      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005b1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b20:	d820      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b26:	d012      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005b28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b2c:	d81a      	bhi.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d022      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b36:	d115      	bne.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 f98d 	bl	8006e60 <RCCEx_PLL2_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b4c:	e015      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b52:	3328      	adds	r3, #40	; 0x28
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 fa34 	bl	8006fc4 <RCCEx_PLL3_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b62:	e00a      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005b6a:	e006      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b6c:	bf00      	nop
 8005b6e:	e004      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b70:	bf00      	nop
 8005b72:	e002      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10e      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b82:	4b06      	ldr	r3, [pc, #24]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b86:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8005b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005b8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005b92:	4a02      	ldr	r2, [pc, #8]	; (8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6593      	str	r3, [r2, #88]	; 0x58
 8005b98:	e006      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005b9a:	bf00      	nop
 8005b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005ba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005bbe:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	d037      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd2:	d00e      	beq.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bd8:	d816      	bhi.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be2:	d111      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005be4:	4bc4      	ldr	r3, [pc, #784]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be8:	4ac3      	ldr	r2, [pc, #780]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005bf0:	e00f      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f001 f930 	bl	8006e60 <RCCEx_PLL2_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c06:	e004      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005c0e:	e000      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10a      	bne.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c1a:	4bb7      	ldr	r3, [pc, #732]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c1e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c28:	4ab3      	ldr	r2, [pc, #716]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	6513      	str	r3, [r2, #80]	; 0x50
 8005c2e:	e003      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005c34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c40:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005c44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c48:	2300      	movs	r3, #0
 8005c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005c52:	460b      	mov	r3, r1
 8005c54:	4313      	orrs	r3, r2
 8005c56:	d039      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d81c      	bhi.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c62:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c68:	08005ca5 	.word	0x08005ca5
 8005c6c:	08005c79 	.word	0x08005c79
 8005c70:	08005c87 	.word	0x08005c87
 8005c74:	08005ca5 	.word	0x08005ca5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c78:	4b9f      	ldr	r3, [pc, #636]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7c:	4a9e      	ldr	r2, [pc, #632]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c84:	e00f      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005c8a:	3308      	adds	r3, #8
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f001 f8e6 	bl	8006e60 <RCCEx_PLL2_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c9a:	e004      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005ca2:	e000      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ca6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cae:	4b92      	ldr	r3, [pc, #584]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	f023 0103 	bic.w	r1, r3, #3
 8005cb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	4a8e      	ldr	r2, [pc, #568]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cc2:	e003      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005cc8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ce2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	f000 8099 	beq.w	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cee:	4b83      	ldr	r3, [pc, #524]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a82      	ldr	r2, [pc, #520]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cfa:	f7fb fb7b 	bl	80013f4 <HAL_GetTick>
 8005cfe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d02:	e00b      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d04:	f7fb fb76 	bl	80013f4 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b64      	cmp	r3, #100	; 0x64
 8005d12:	d903      	bls.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005d1a:	e005      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1c:	4b77      	ldr	r3, [pc, #476]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0ed      	beq.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d173      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d30:	4b71      	ldr	r3, [pc, #452]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d3c:	4053      	eors	r3, r2
 8005d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d015      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d46:	4b6c      	ldr	r3, [pc, #432]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d52:	4b69      	ldr	r3, [pc, #420]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d56:	4a68      	ldr	r2, [pc, #416]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d5e:	4b66      	ldr	r3, [pc, #408]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d62:	4a65      	ldr	r2, [pc, #404]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d68:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d6a:	4a63      	ldr	r2, [pc, #396]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d70:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d7e:	d118      	bne.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d80:	f7fb fb38 	bl	80013f4 <HAL_GetTick>
 8005d84:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d88:	e00d      	b.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d8a:	f7fb fb33 	bl	80013f4 <HAL_GetTick>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d94:	1ad2      	subs	r2, r2, r3
 8005d96:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d903      	bls.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8005da4:	e005      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005da6:	4b54      	ldr	r3, [pc, #336]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005daa:	f003 0302 	and.w	r3, r3, #2
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d0eb      	beq.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005db2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d129      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dca:	d10e      	bne.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005dcc:	4b4a      	ldr	r3, [pc, #296]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ddc:	091a      	lsrs	r2, r3, #4
 8005dde:	4b48      	ldr	r3, [pc, #288]	; (8005f00 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	4a45      	ldr	r2, [pc, #276]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de4:	430b      	orrs	r3, r1
 8005de6:	6113      	str	r3, [r2, #16]
 8005de8:	e005      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005dea:	4b43      	ldr	r3, [pc, #268]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	4a42      	ldr	r2, [pc, #264]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005df4:	6113      	str	r3, [r2, #16]
 8005df6:	4b40      	ldr	r3, [pc, #256]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005df8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e06:	4a3c      	ldr	r2, [pc, #240]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e08:	430b      	orrs	r3, r1
 8005e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0c:	e008      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005e1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 0301 	and.w	r3, r2, #1
 8005e2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e36:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	f000 808f 	beq.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e48:	2b28      	cmp	r3, #40	; 0x28
 8005e4a:	d871      	bhi.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005f39 	.word	0x08005f39
 8005e58:	08005f31 	.word	0x08005f31
 8005e5c:	08005f31 	.word	0x08005f31
 8005e60:	08005f31 	.word	0x08005f31
 8005e64:	08005f31 	.word	0x08005f31
 8005e68:	08005f31 	.word	0x08005f31
 8005e6c:	08005f31 	.word	0x08005f31
 8005e70:	08005f31 	.word	0x08005f31
 8005e74:	08005f05 	.word	0x08005f05
 8005e78:	08005f31 	.word	0x08005f31
 8005e7c:	08005f31 	.word	0x08005f31
 8005e80:	08005f31 	.word	0x08005f31
 8005e84:	08005f31 	.word	0x08005f31
 8005e88:	08005f31 	.word	0x08005f31
 8005e8c:	08005f31 	.word	0x08005f31
 8005e90:	08005f31 	.word	0x08005f31
 8005e94:	08005f1b 	.word	0x08005f1b
 8005e98:	08005f31 	.word	0x08005f31
 8005e9c:	08005f31 	.word	0x08005f31
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f31 	.word	0x08005f31
 8005ea8:	08005f31 	.word	0x08005f31
 8005eac:	08005f31 	.word	0x08005f31
 8005eb0:	08005f31 	.word	0x08005f31
 8005eb4:	08005f39 	.word	0x08005f39
 8005eb8:	08005f31 	.word	0x08005f31
 8005ebc:	08005f31 	.word	0x08005f31
 8005ec0:	08005f31 	.word	0x08005f31
 8005ec4:	08005f31 	.word	0x08005f31
 8005ec8:	08005f31 	.word	0x08005f31
 8005ecc:	08005f31 	.word	0x08005f31
 8005ed0:	08005f31 	.word	0x08005f31
 8005ed4:	08005f39 	.word	0x08005f39
 8005ed8:	08005f31 	.word	0x08005f31
 8005edc:	08005f31 	.word	0x08005f31
 8005ee0:	08005f31 	.word	0x08005f31
 8005ee4:	08005f31 	.word	0x08005f31
 8005ee8:	08005f31 	.word	0x08005f31
 8005eec:	08005f31 	.word	0x08005f31
 8005ef0:	08005f31 	.word	0x08005f31
 8005ef4:	08005f39 	.word	0x08005f39
 8005ef8:	58024400 	.word	0x58024400
 8005efc:	58024800 	.word	0x58024800
 8005f00:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f08:	3308      	adds	r3, #8
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 ffa7 	bl	8006e60 <RCCEx_PLL2_Config>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f18:	e00f      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f1e:	3328      	adds	r3, #40	; 0x28
 8005f20:	2101      	movs	r1, #1
 8005f22:	4618      	mov	r0, r3
 8005f24:	f001 f84e 	bl	8006fc4 <RCCEx_PLL3_Config>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f2e:	e004      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005f36:	e000      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10a      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f42:	4bbf      	ldr	r3, [pc, #764]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f46:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8005f4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f50:	4abb      	ldr	r2, [pc, #748]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f52:	430b      	orrs	r3, r1
 8005f54:	6553      	str	r3, [r2, #84]	; 0x54
 8005f56:	e003      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005f5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f002 0302 	and.w	r3, r2, #2
 8005f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f76:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	d041      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d824      	bhi.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005f8a:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08005fdd 	.word	0x08005fdd
 8005f94:	08005fa9 	.word	0x08005fa9
 8005f98:	08005fbf 	.word	0x08005fbf
 8005f9c:	08005fdd 	.word	0x08005fdd
 8005fa0:	08005fdd 	.word	0x08005fdd
 8005fa4:	08005fdd 	.word	0x08005fdd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fac:	3308      	adds	r3, #8
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 ff55 	bl	8006e60 <RCCEx_PLL2_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fbc:	e00f      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005fc2:	3328      	adds	r3, #40	; 0x28
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f000 fffc 	bl	8006fc4 <RCCEx_PLL3_Config>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fd2:	e004      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8005fda:	e000      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8005fdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fde:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d10a      	bne.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005fe6:	4b96      	ldr	r3, [pc, #600]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fea:	f023 0107 	bic.w	r1, r3, #7
 8005fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ff4:	4a92      	ldr	r2, [pc, #584]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ff6:	430b      	orrs	r3, r1
 8005ff8:	6553      	str	r3, [r2, #84]	; 0x54
 8005ffa:	e003      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006000:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800600c:	f002 0304 	and.w	r3, r2, #4
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006014:	2300      	movs	r3, #0
 8006016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800601a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800601e:	460b      	mov	r3, r1
 8006020:	4313      	orrs	r3, r2
 8006022:	d044      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006024:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602c:	2b05      	cmp	r3, #5
 800602e:	d825      	bhi.n	800607c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006030:	a201      	add	r2, pc, #4	; (adr r2, 8006038 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006036:	bf00      	nop
 8006038:	08006085 	.word	0x08006085
 800603c:	08006051 	.word	0x08006051
 8006040:	08006067 	.word	0x08006067
 8006044:	08006085 	.word	0x08006085
 8006048:	08006085 	.word	0x08006085
 800604c:	08006085 	.word	0x08006085
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006054:	3308      	adds	r3, #8
 8006056:	2101      	movs	r1, #1
 8006058:	4618      	mov	r0, r3
 800605a:	f000 ff01 	bl	8006e60 <RCCEx_PLL2_Config>
 800605e:	4603      	mov	r3, r0
 8006060:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006064:	e00f      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800606a:	3328      	adds	r3, #40	; 0x28
 800606c:	2101      	movs	r1, #1
 800606e:	4618      	mov	r0, r3
 8006070:	f000 ffa8 	bl	8006fc4 <RCCEx_PLL3_Config>
 8006074:	4603      	mov	r3, r0
 8006076:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800607a:	e004      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800607c:	2301      	movs	r3, #1
 800607e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006082:	e000      	b.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8006084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006086:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800608e:	4b6c      	ldr	r3, [pc, #432]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006092:	f023 0107 	bic.w	r1, r3, #7
 8006096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800609a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609e:	4a68      	ldr	r2, [pc, #416]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a0:	430b      	orrs	r3, r1
 80060a2:	6593      	str	r3, [r2, #88]	; 0x58
 80060a4:	e003      	b.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80060aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f002 0320 	and.w	r3, r2, #32
 80060ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4313      	orrs	r3, r2
 80060cc:	d055      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80060d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060da:	d033      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 80060dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060e0:	d82c      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e6:	d02f      	beq.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80060e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ec:	d826      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f2:	d02b      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80060f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80060f8:	d820      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80060fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060fe:	d012      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006100:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006104:	d81a      	bhi.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d022      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800610a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800610e:	d115      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006114:	3308      	adds	r3, #8
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fea1 	bl	8006e60 <RCCEx_PLL2_Config>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006124:	e015      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006126:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800612a:	3328      	adds	r3, #40	; 0x28
 800612c:	2102      	movs	r1, #2
 800612e:	4618      	mov	r0, r3
 8006130:	f000 ff48 	bl	8006fc4 <RCCEx_PLL3_Config>
 8006134:	4603      	mov	r3, r0
 8006136:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800613a:	e00a      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006142:	e006      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006144:	bf00      	nop
 8006146:	e004      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006148:	bf00      	nop
 800614a:	e002      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800614c:	bf00      	nop
 800614e:	e000      	b.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006152:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10b      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800615a:	4b39      	ldr	r3, [pc, #228]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800615c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8006162:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006166:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800616a:	4a35      	ldr	r2, [pc, #212]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800616c:	430b      	orrs	r3, r1
 800616e:	6553      	str	r3, [r2, #84]	; 0x54
 8006170:	e003      	b.n	800617a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006172:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006176:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800617a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006182:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006186:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800618a:	2300      	movs	r3, #0
 800618c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006190:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006194:	460b      	mov	r3, r1
 8006196:	4313      	orrs	r3, r2
 8006198:	d058      	beq.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800619a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800619e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80061a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061a6:	d033      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80061a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80061ac:	d82c      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b2:	d02f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80061b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b8:	d826      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061be:	d02b      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80061c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061c4:	d820      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ca:	d012      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80061cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061d0:	d81a      	bhi.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d022      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 80061d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061da:	d115      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e0:	3308      	adds	r3, #8
 80061e2:	2100      	movs	r1, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	f000 fe3b 	bl	8006e60 <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80061f0:	e015      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061f6:	3328      	adds	r3, #40	; 0x28
 80061f8:	2102      	movs	r1, #2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fee2 	bl	8006fc4 <RCCEx_PLL3_Config>
 8006200:	4603      	mov	r3, r0
 8006202:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006206:	e00a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800620e:	e006      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006210:	bf00      	nop
 8006212:	e004      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006214:	bf00      	nop
 8006216:	e002      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006218:	bf00      	nop
 800621a:	e000      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800621c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10e      	bne.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006226:	4b06      	ldr	r3, [pc, #24]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800622e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006232:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006236:	4a02      	ldr	r2, [pc, #8]	; (8006240 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006238:	430b      	orrs	r3, r1
 800623a:	6593      	str	r3, [r2, #88]	; 0x58
 800623c:	e006      	b.n	800624c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006244:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006248:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800624c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006254:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006258:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800625c:	2300      	movs	r3, #0
 800625e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006262:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006266:	460b      	mov	r3, r1
 8006268:	4313      	orrs	r3, r2
 800626a:	d055      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800626c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006274:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006278:	d033      	beq.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800627a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800627e:	d82c      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006284:	d02f      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8006286:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800628a:	d826      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800628c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006290:	d02b      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8006292:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006296:	d820      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800629c:	d012      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800629e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062a2:	d81a      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d022      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80062a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ac:	d115      	bne.n	80062da <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062b2:	3308      	adds	r3, #8
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fdd2 	bl	8006e60 <RCCEx_PLL2_Config>
 80062bc:	4603      	mov	r3, r0
 80062be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062c2:	e015      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80062c8:	3328      	adds	r3, #40	; 0x28
 80062ca:	2102      	movs	r1, #2
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fe79 	bl	8006fc4 <RCCEx_PLL3_Config>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062d8:	e00a      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80062e0:	e006      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062e2:	bf00      	nop
 80062e4:	e004      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062e6:	bf00      	nop
 80062e8:	e002      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062ea:	bf00      	nop
 80062ec:	e000      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80062ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10b      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80062f8:	4ba0      	ldr	r3, [pc, #640]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80062fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062fc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8006300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006304:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006308:	4a9c      	ldr	r2, [pc, #624]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800630a:	430b      	orrs	r3, r1
 800630c:	6593      	str	r3, [r2, #88]	; 0x58
 800630e:	e003      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006310:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006314:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800631c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006320:	f002 0308 	and.w	r3, r2, #8
 8006324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800632e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006332:	460b      	mov	r3, r1
 8006334:	4313      	orrs	r3, r2
 8006336:	d01e      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800633c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006344:	d10c      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800634a:	3328      	adds	r3, #40	; 0x28
 800634c:	2102      	movs	r1, #2
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fe38 	bl	8006fc4 <RCCEx_PLL3_Config>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006360:	4b86      	ldr	r3, [pc, #536]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006364:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	4a82      	ldr	r2, [pc, #520]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006372:	430b      	orrs	r3, r1
 8006374:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006376:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f002 0310 	and.w	r3, r2, #16
 8006382:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006386:	2300      	movs	r3, #0
 8006388:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800638c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006390:	460b      	mov	r3, r1
 8006392:	4313      	orrs	r3, r2
 8006394:	d01e      	beq.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8006396:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800639a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800639e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063a2:	d10c      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063a8:	3328      	adds	r3, #40	; 0x28
 80063aa:	2102      	movs	r1, #2
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fe09 	bl	8006fc4 <RCCEx_PLL3_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063be:	4b6f      	ldr	r3, [pc, #444]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063ce:	4a6b      	ldr	r2, [pc, #428]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063dc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80063e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80063e2:	2300      	movs	r3, #0
 80063e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80063ea:	460b      	mov	r3, r1
 80063ec:	4313      	orrs	r3, r2
 80063ee:	d03e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80063f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80063f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063fc:	d022      	beq.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80063fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006402:	d81b      	bhi.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640c:	d00b      	beq.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800640e:	e015      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006414:	3308      	adds	r3, #8
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f000 fd21 	bl	8006e60 <RCCEx_PLL2_Config>
 800641e:	4603      	mov	r3, r0
 8006420:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006424:	e00f      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800642a:	3328      	adds	r3, #40	; 0x28
 800642c:	2102      	movs	r1, #2
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fdc8 	bl	8006fc4 <RCCEx_PLL3_Config>
 8006434:	4603      	mov	r3, r0
 8006436:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800643a:	e004      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006442:	e000      	b.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006446:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10b      	bne.n	8006466 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800644e:	4b4b      	ldr	r3, [pc, #300]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006452:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800645a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800645e:	4a47      	ldr	r2, [pc, #284]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006460:	430b      	orrs	r3, r1
 8006462:	6593      	str	r3, [r2, #88]	; 0x58
 8006464:	e003      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006466:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800646a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800646e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006476:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800647a:	673b      	str	r3, [r7, #112]	; 0x70
 800647c:	2300      	movs	r3, #0
 800647e:	677b      	str	r3, [r7, #116]	; 0x74
 8006480:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006484:	460b      	mov	r3, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	d03b      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800648a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800648e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006496:	d01f      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006498:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800649c:	d818      	bhi.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800649e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064a2:	d003      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80064a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064a8:	d007      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80064aa:	e011      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ac:	4b33      	ldr	r3, [pc, #204]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	4a32      	ldr	r2, [pc, #200]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064b8:	e00f      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064be:	3328      	adds	r3, #40	; 0x28
 80064c0:	2101      	movs	r1, #1
 80064c2:	4618      	mov	r0, r3
 80064c4:	f000 fd7e 	bl	8006fc4 <RCCEx_PLL3_Config>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80064ce:	e004      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80064d6:	e000      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80064d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064e2:	4b26      	ldr	r3, [pc, #152]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80064ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064f4:	430b      	orrs	r3, r1
 80064f6:	6553      	str	r3, [r2, #84]	; 0x54
 80064f8:	e003      	b.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80064fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800650e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006510:	2300      	movs	r3, #0
 8006512:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006514:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006518:	460b      	mov	r3, r1
 800651a:	4313      	orrs	r3, r2
 800651c:	d034      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800651e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006524:	2b00      	cmp	r3, #0
 8006526:	d003      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d007      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800652e:	e011      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4a11      	ldr	r2, [pc, #68]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800653a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800653c:	e00e      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800653e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006542:	3308      	adds	r3, #8
 8006544:	2102      	movs	r1, #2
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fc8a 	bl	8006e60 <RCCEx_PLL2_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006552:	e003      	b.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800655a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10d      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006564:	4b05      	ldr	r3, [pc, #20]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006568:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800656c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006572:	4a02      	ldr	r2, [pc, #8]	; (800657c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006574:	430b      	orrs	r3, r1
 8006576:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006578:	e006      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800657a:	bf00      	nop
 800657c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006580:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006584:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800658c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006590:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8006594:	663b      	str	r3, [r7, #96]	; 0x60
 8006596:	2300      	movs	r3, #0
 8006598:	667b      	str	r3, [r7, #100]	; 0x64
 800659a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800659e:	460b      	mov	r3, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	d00c      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065a8:	3328      	adds	r3, #40	; 0x28
 80065aa:	2102      	movs	r1, #2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f000 fd09 	bl	8006fc4 <RCCEx_PLL3_Config>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80065ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80065cc:	2300      	movs	r3, #0
 80065ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80065d4:	460b      	mov	r3, r1
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d036      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e4:	d018      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80065e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ea:	d811      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80065ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f0:	d014      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80065f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f6:	d80b      	bhi.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d011      	beq.n	8006620 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006600:	d106      	bne.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006602:	4bb7      	ldr	r3, [pc, #732]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006606:	4ab6      	ldr	r2, [pc, #728]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006608:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800660c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800660e:	e008      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8006616:	e004      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006618:	bf00      	nop
 800661a:	e002      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800661c:	bf00      	nop
 800661e:	e000      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006622:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006626:	2b00      	cmp	r3, #0
 8006628:	d10a      	bne.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800662a:	4bad      	ldr	r3, [pc, #692]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006632:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006636:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006638:	4aa9      	ldr	r2, [pc, #676]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800663a:	430b      	orrs	r3, r1
 800663c:	6553      	str	r3, [r2, #84]	; 0x54
 800663e:	e003      	b.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006640:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006644:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006648:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800664c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006650:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
 8006656:	2300      	movs	r3, #0
 8006658:	657b      	str	r3, [r7, #84]	; 0x54
 800665a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800665e:	460b      	mov	r3, r1
 8006660:	4313      	orrs	r3, r2
 8006662:	d009      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006664:	4b9e      	ldr	r3, [pc, #632]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800666c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006672:	4a9b      	ldr	r2, [pc, #620]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006674:	430b      	orrs	r3, r1
 8006676:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006678:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800667c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006680:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006684:	64bb      	str	r3, [r7, #72]	; 0x48
 8006686:	2300      	movs	r3, #0
 8006688:	64fb      	str	r3, [r7, #76]	; 0x4c
 800668a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800668e:	460b      	mov	r3, r1
 8006690:	4313      	orrs	r3, r2
 8006692:	d009      	beq.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006694:	4b92      	ldr	r3, [pc, #584]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006698:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800669c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a2:	4a8f      	ldr	r2, [pc, #572]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066a4:	430b      	orrs	r3, r1
 80066a6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80066b4:	643b      	str	r3, [r7, #64]	; 0x40
 80066b6:	2300      	movs	r3, #0
 80066b8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ba:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80066be:	460b      	mov	r3, r1
 80066c0:	4313      	orrs	r3, r2
 80066c2:	d00e      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066c4:	4b86      	ldr	r3, [pc, #536]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	4a85      	ldr	r2, [pc, #532]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80066ce:	6113      	str	r3, [r2, #16]
 80066d0:	4b83      	ldr	r3, [pc, #524]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066d2:	6919      	ldr	r1, [r3, #16]
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066de:	430b      	orrs	r3, r1
 80066e0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80066e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ea:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80066f0:	2300      	movs	r3, #0
 80066f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066f4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80066f8:	460b      	mov	r3, r1
 80066fa:	4313      	orrs	r3, r2
 80066fc:	d009      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80066fe:	4b78      	ldr	r3, [pc, #480]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006702:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8006706:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800670a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670c:	4a74      	ldr	r2, [pc, #464]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800670e:	430b      	orrs	r3, r1
 8006710:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800671e:	633b      	str	r3, [r7, #48]	; 0x30
 8006720:	2300      	movs	r3, #0
 8006722:	637b      	str	r3, [r7, #52]	; 0x34
 8006724:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006728:	460b      	mov	r3, r1
 800672a:	4313      	orrs	r3, r2
 800672c:	d00a      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800672e:	4b6c      	ldr	r3, [pc, #432]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006732:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8006736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800673a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800673e:	4a68      	ldr	r2, [pc, #416]	; (80068e0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006740:	430b      	orrs	r3, r1
 8006742:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	2100      	movs	r1, #0
 800674e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006750:	f003 0301 	and.w	r3, r3, #1
 8006754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006756:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800675a:	460b      	mov	r3, r1
 800675c:	4313      	orrs	r3, r2
 800675e:	d011      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006764:	3308      	adds	r3, #8
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f000 fb79 	bl	8006e60 <RCCEx_PLL2_Config>
 800676e:	4603      	mov	r3, r0
 8006770:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006774:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006780:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	2100      	movs	r1, #0
 800678e:	6239      	str	r1, [r7, #32]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	627b      	str	r3, [r7, #36]	; 0x24
 8006796:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d011      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067a4:	3308      	adds	r3, #8
 80067a6:	2101      	movs	r1, #1
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fb59 	bl	8006e60 <RCCEx_PLL2_Config>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80067b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	2100      	movs	r1, #0
 80067ce:	61b9      	str	r1, [r7, #24]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	61fb      	str	r3, [r7, #28]
 80067d6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80067da:	460b      	mov	r3, r1
 80067dc:	4313      	orrs	r3, r2
 80067de:	d011      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80067e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067e4:	3308      	adds	r3, #8
 80067e6:	2102      	movs	r1, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fb39 	bl	8006e60 <RCCEx_PLL2_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80067f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006800:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006804:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	2100      	movs	r1, #0
 800680e:	6139      	str	r1, [r7, #16]
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800681a:	460b      	mov	r3, r1
 800681c:	4313      	orrs	r3, r2
 800681e:	d011      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006824:	3328      	adds	r3, #40	; 0x28
 8006826:	2100      	movs	r1, #0
 8006828:	4618      	mov	r0, r3
 800682a:	f000 fbcb 	bl	8006fc4 <RCCEx_PLL3_Config>
 800682e:	4603      	mov	r3, r0
 8006830:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8006834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006838:	2b00      	cmp	r3, #0
 800683a:	d003      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800683c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006840:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684c:	2100      	movs	r1, #0
 800684e:	60b9      	str	r1, [r7, #8]
 8006850:	f003 0310 	and.w	r3, r3, #16
 8006854:	60fb      	str	r3, [r7, #12]
 8006856:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800685a:	460b      	mov	r3, r1
 800685c:	4313      	orrs	r3, r2
 800685e:	d011      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006860:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006864:	3328      	adds	r3, #40	; 0x28
 8006866:	2101      	movs	r1, #1
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fbab 	bl	8006fc4 <RCCEx_PLL3_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8006874:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8006880:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688c:	2100      	movs	r1, #0
 800688e:	6039      	str	r1, [r7, #0]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	e9d7 1200 	ldrd	r1, r2, [r7]
 800689a:	460b      	mov	r3, r1
 800689c:	4313      	orrs	r3, r2
 800689e:	d011      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068a4:	3328      	adds	r3, #40	; 0x28
 80068a6:	2102      	movs	r1, #2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 fb8b 	bl	8006fc4 <RCCEx_PLL3_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 80068b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80068c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 80068c4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80068d8:	46bd      	mov	sp, r7
 80068da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068de:	bf00      	nop
 80068e0:	58024400 	.word	0x58024400

080068e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80068e8:	f7fe fe00 	bl	80054ec <HAL_RCC_GetHCLKFreq>
 80068ec:	4602      	mov	r2, r0
 80068ee:	4b06      	ldr	r3, [pc, #24]	; (8006908 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	f003 0307 	and.w	r3, r3, #7
 80068f8:	4904      	ldr	r1, [pc, #16]	; (800690c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80068fa:	5ccb      	ldrb	r3, [r1, r3]
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006904:	4618      	mov	r0, r3
 8006906:	bd80      	pop	{r7, pc}
 8006908:	58024400 	.word	0x58024400
 800690c:	08009a04 	.word	0x08009a04

08006910 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006910:	b480      	push	{r7}
 8006912:	b089      	sub	sp, #36	; 0x24
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006918:	4ba1      	ldr	r3, [pc, #644]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800691a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006922:	4b9f      	ldr	r3, [pc, #636]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	0b1b      	lsrs	r3, r3, #12
 8006928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800692c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800692e:	4b9c      	ldr	r3, [pc, #624]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	091b      	lsrs	r3, r3, #4
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800693a:	4b99      	ldr	r3, [pc, #612]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800693c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	fb02 f303 	mul.w	r3, r2, r3
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	2b00      	cmp	r3, #0
 800695a:	f000 8111 	beq.w	8006b80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b02      	cmp	r3, #2
 8006962:	f000 8083 	beq.w	8006a6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b02      	cmp	r3, #2
 800696a:	f200 80a1 	bhi.w	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d056      	beq.n	8006a28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800697a:	e099      	b.n	8006ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0320 	and.w	r3, r3, #32
 8006984:	2b00      	cmp	r3, #0
 8006986:	d02d      	beq.n	80069e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006988:	4b85      	ldr	r3, [pc, #532]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f003 0303 	and.w	r3, r3, #3
 8006992:	4a84      	ldr	r2, [pc, #528]	; (8006ba4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006994:	fa22 f303 	lsr.w	r3, r2, r3
 8006998:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069b2:	4b7b      	ldr	r3, [pc, #492]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069c6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80069d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069e2:	e087      	b.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b6a      	ldr	r3, [pc, #424]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a26:	e065      	b.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b59      	ldr	r3, [pc, #356]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6a:	e043      	b.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b48      	ldr	r3, [pc, #288]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aae:	e021      	b.n	8006af4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b37      	ldr	r3, [pc, #220]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ad6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006af4:	4b2a      	ldr	r3, [pc, #168]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af8:	0a5b      	lsrs	r3, r3, #9
 8006afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006afe:	ee07 3a90 	vmov	s15, r3
 8006b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b1a:	ee17 2a90 	vmov	r2, s15
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b22:	4b1f      	ldr	r3, [pc, #124]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	0c1b      	lsrs	r3, r3, #16
 8006b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b2c:	ee07 3a90 	vmov	s15, r3
 8006b30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b48:	ee17 2a90 	vmov	r2, s15
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b50:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	0e1b      	lsrs	r3, r3, #24
 8006b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b5a:	ee07 3a90 	vmov	s15, r3
 8006b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006b66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b76:	ee17 2a90 	vmov	r2, s15
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b7e:	e008      	b.n	8006b92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
}
 8006b92:	bf00      	nop
 8006b94:	3724      	adds	r7, #36	; 0x24
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	03d09000 	.word	0x03d09000
 8006ba8:	46000000 	.word	0x46000000
 8006bac:	4c742400 	.word	0x4c742400
 8006bb0:	4a742400 	.word	0x4a742400
 8006bb4:	4af42400 	.word	0x4af42400

08006bb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b089      	sub	sp, #36	; 0x24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bc0:	4ba1      	ldr	r3, [pc, #644]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc4:	f003 0303 	and.w	r3, r3, #3
 8006bc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bca:	4b9f      	ldr	r3, [pc, #636]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	0d1b      	lsrs	r3, r3, #20
 8006bd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006bd6:	4b9c      	ldr	r3, [pc, #624]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	0a1b      	lsrs	r3, r3, #8
 8006bdc:	f003 0301 	and.w	r3, r3, #1
 8006be0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006be2:	4b99      	ldr	r3, [pc, #612]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be6:	08db      	lsrs	r3, r3, #3
 8006be8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	fb02 f303 	mul.w	r3, r2, r3
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 8111 	beq.w	8006e28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c06:	69bb      	ldr	r3, [r7, #24]
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	f000 8083 	beq.w	8006d14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	f200 80a1 	bhi.w	8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d056      	beq.n	8006cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c22:	e099      	b.n	8006d58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c24:	4b88      	ldr	r3, [pc, #544]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02d      	beq.n	8006c8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c30:	4b85      	ldr	r3, [pc, #532]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	08db      	lsrs	r3, r3, #3
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	4a84      	ldr	r2, [pc, #528]	; (8006e4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006c40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	ee07 3a90 	vmov	s15, r3
 8006c48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c5a:	4b7b      	ldr	r3, [pc, #492]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c8a:	e087      	b.n	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c9e:	4b6a      	ldr	r3, [pc, #424]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cce:	e065      	b.n	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce2:	4b59      	ldr	r3, [pc, #356]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cea:	ee07 3a90 	vmov	s15, r3
 8006cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d12:	e043      	b.n	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d26:	4b48      	ldr	r3, [pc, #288]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d56:	e021      	b.n	8006d9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6a:	4b37      	ldr	r3, [pc, #220]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d72:	ee07 3a90 	vmov	s15, r3
 8006d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d9c:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da0:	0a5b      	lsrs	r3, r3, #9
 8006da2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006da6:	ee07 3a90 	vmov	s15, r3
 8006daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006db2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dc2:	ee17 2a90 	vmov	r2, s15
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006dca:	4b1f      	ldr	r3, [pc, #124]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	0c1b      	lsrs	r3, r3, #16
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	ee07 3a90 	vmov	s15, r3
 8006dd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ddc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006de0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df0:	ee17 2a90 	vmov	r2, s15
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006df8:	4b13      	ldr	r3, [pc, #76]	; (8006e48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfc:	0e1b      	lsrs	r3, r3, #24
 8006dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e02:	ee07 3a90 	vmov	s15, r3
 8006e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e12:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1e:	ee17 2a90 	vmov	r2, s15
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e26:	e008      	b.n	8006e3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	609a      	str	r2, [r3, #8]
}
 8006e3a:	bf00      	nop
 8006e3c:	3724      	adds	r7, #36	; 0x24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	03d09000 	.word	0x03d09000
 8006e50:	46000000 	.word	0x46000000
 8006e54:	4c742400 	.word	0x4c742400
 8006e58:	4a742400 	.word	0x4a742400
 8006e5c:	4af42400 	.word	0x4af42400

08006e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e6e:	4b53      	ldr	r3, [pc, #332]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e72:	f003 0303 	and.w	r3, r3, #3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d101      	bne.n	8006e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e099      	b.n	8006fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e7e:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a4e      	ldr	r2, [pc, #312]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e8a:	f7fa fab3 	bl	80013f4 <HAL_GetTick>
 8006e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e90:	e008      	b.n	8006ea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e92:	f7fa faaf 	bl	80013f4 <HAL_GetTick>
 8006e96:	4602      	mov	r2, r0
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d901      	bls.n	8006ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e086      	b.n	8006fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ea4:	4b45      	ldr	r3, [pc, #276]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d1f0      	bne.n	8006e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006eb0:	4b42      	ldr	r3, [pc, #264]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	031b      	lsls	r3, r3, #12
 8006ebe:	493f      	ldr	r1, [pc, #252]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	025b      	lsls	r3, r3, #9
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006ee6:	431a      	orrs	r2, r3
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	691b      	ldr	r3, [r3, #16]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	061b      	lsls	r3, r3, #24
 8006ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006ef4:	4931      	ldr	r1, [pc, #196]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006efa:	4b30      	ldr	r3, [pc, #192]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	492d      	ldr	r1, [pc, #180]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f0c:	4b2b      	ldr	r3, [pc, #172]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f10:	f023 0220 	bic.w	r2, r3, #32
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	4928      	ldr	r1, [pc, #160]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f1e:	4b27      	ldr	r3, [pc, #156]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f22:	4a26      	ldr	r2, [pc, #152]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f24:	f023 0310 	bic.w	r3, r3, #16
 8006f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f2a:	4b24      	ldr	r3, [pc, #144]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f2e:	4b24      	ldr	r3, [pc, #144]	; (8006fc0 <RCCEx_PLL2_Config+0x160>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	69d2      	ldr	r2, [r2, #28]
 8006f36:	00d2      	lsls	r2, r2, #3
 8006f38:	4920      	ldr	r1, [pc, #128]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f3e:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a1e      	ldr	r2, [pc, #120]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f44:	f043 0310 	orr.w	r3, r3, #16
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d106      	bne.n	8006f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f50:	4b1a      	ldr	r3, [pc, #104]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f54:	4a19      	ldr	r2, [pc, #100]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f5c:	e00f      	b.n	8006f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d106      	bne.n	8006f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f64:	4b15      	ldr	r3, [pc, #84]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	4a14      	ldr	r2, [pc, #80]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006f70:	e005      	b.n	8006f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a0e      	ldr	r2, [pc, #56]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f8a:	f7fa fa33 	bl	80013f4 <HAL_GetTick>
 8006f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f90:	e008      	b.n	8006fa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f92:	f7fa fa2f 	bl	80013f4 <HAL_GetTick>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	1ad3      	subs	r3, r2, r3
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	d901      	bls.n	8006fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e006      	b.n	8006fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <RCCEx_PLL2_Config+0x15c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d0f0      	beq.n	8006f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	58024400 	.word	0x58024400
 8006fc0:	ffff0007 	.word	0xffff0007

08006fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fd2:	4b53      	ldr	r3, [pc, #332]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d101      	bne.n	8006fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e099      	b.n	8007116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006fe2:	4b4f      	ldr	r3, [pc, #316]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a4e      	ldr	r2, [pc, #312]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8006fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fee:	f7fa fa01 	bl	80013f4 <HAL_GetTick>
 8006ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ff4:	e008      	b.n	8007008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ff6:	f7fa f9fd 	bl	80013f4 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e086      	b.n	8007116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007008:	4b45      	ldr	r3, [pc, #276]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1f0      	bne.n	8006ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007014:	4b42      	ldr	r3, [pc, #264]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	051b      	lsls	r3, r3, #20
 8007022:	493f      	ldr	r1, [pc, #252]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007024:	4313      	orrs	r3, r2
 8007026:	628b      	str	r3, [r1, #40]	; 0x28
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	3b01      	subs	r3, #1
 800702e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	025b      	lsls	r3, r3, #9
 800703a:	b29b      	uxth	r3, r3
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	3b01      	subs	r3, #1
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	3b01      	subs	r3, #1
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007058:	4931      	ldr	r1, [pc, #196]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800705a:	4313      	orrs	r3, r2
 800705c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800705e:	4b30      	ldr	r3, [pc, #192]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	492d      	ldr	r1, [pc, #180]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007070:	4b2b      	ldr	r3, [pc, #172]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	4928      	ldr	r1, [pc, #160]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800707e:	4313      	orrs	r3, r2
 8007080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007082:	4b27      	ldr	r3, [pc, #156]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007086:	4a26      	ldr	r2, [pc, #152]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800708c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800708e:	4b24      	ldr	r3, [pc, #144]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 8007090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <RCCEx_PLL3_Config+0x160>)
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	69d2      	ldr	r2, [r2, #28]
 800709a:	00d2      	lsls	r2, r2, #3
 800709c:	4920      	ldr	r1, [pc, #128]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070a2:	4b1f      	ldr	r3, [pc, #124]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070b4:	4b1a      	ldr	r3, [pc, #104]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b8:	4a19      	ldr	r2, [pc, #100]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80070be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070c0:	e00f      	b.n	80070e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d106      	bne.n	80070d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	4a14      	ldr	r2, [pc, #80]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80070d4:	e005      	b.n	80070e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80070d6:	4b12      	ldr	r3, [pc, #72]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070da:	4a11      	ldr	r2, [pc, #68]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80070e2:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0e      	ldr	r2, [pc, #56]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 80070e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ee:	f7fa f981 	bl	80013f4 <HAL_GetTick>
 80070f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80070f4:	e008      	b.n	8007108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070f6:	f7fa f97d 	bl	80013f4 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e006      	b.n	8007116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007108:	4b05      	ldr	r3, [pc, #20]	; (8007120 <RCCEx_PLL3_Config+0x15c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
 8007124:	ffff0007 	.word	0xffff0007

08007128 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e049      	b.n	80071ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d106      	bne.n	8007154 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f7f9 fe74 	bl	8000e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	3304      	adds	r3, #4
 8007164:	4619      	mov	r1, r3
 8007166:	4610      	mov	r0, r2
 8007168:	f000 f94a 	bl	8007400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e0ff      	b.n	80073f6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2b14      	cmp	r3, #20
 8007202:	f200 80f0 	bhi.w	80073e6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007206:	a201      	add	r2, pc, #4	; (adr r2, 800720c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800720c:	08007261 	.word	0x08007261
 8007210:	080073e7 	.word	0x080073e7
 8007214:	080073e7 	.word	0x080073e7
 8007218:	080073e7 	.word	0x080073e7
 800721c:	080072a1 	.word	0x080072a1
 8007220:	080073e7 	.word	0x080073e7
 8007224:	080073e7 	.word	0x080073e7
 8007228:	080073e7 	.word	0x080073e7
 800722c:	080072e3 	.word	0x080072e3
 8007230:	080073e7 	.word	0x080073e7
 8007234:	080073e7 	.word	0x080073e7
 8007238:	080073e7 	.word	0x080073e7
 800723c:	08007323 	.word	0x08007323
 8007240:	080073e7 	.word	0x080073e7
 8007244:	080073e7 	.word	0x080073e7
 8007248:	080073e7 	.word	0x080073e7
 800724c:	08007365 	.word	0x08007365
 8007250:	080073e7 	.word	0x080073e7
 8007254:	080073e7 	.word	0x080073e7
 8007258:	080073e7 	.word	0x080073e7
 800725c:	080073a5 	.word	0x080073a5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68b9      	ldr	r1, [r7, #8]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 f970 	bl	800754c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	699a      	ldr	r2, [r3, #24]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f042 0208 	orr.w	r2, r2, #8
 800727a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	699a      	ldr	r2, [r3, #24]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f022 0204 	bic.w	r2, r2, #4
 800728a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	6999      	ldr	r1, [r3, #24]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	691a      	ldr	r2, [r3, #16]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	619a      	str	r2, [r3, #24]
      break;
 800729e:	e0a5      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 f9e0 	bl	800766c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	699a      	ldr	r2, [r3, #24]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	699a      	ldr	r2, [r3, #24]
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	6999      	ldr	r1, [r3, #24]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	021a      	lsls	r2, r3, #8
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	619a      	str	r2, [r3, #24]
      break;
 80072e0:	e084      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68b9      	ldr	r1, [r7, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 fa49 	bl	8007780 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	69da      	ldr	r2, [r3, #28]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0208 	orr.w	r2, r2, #8
 80072fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	69da      	ldr	r2, [r3, #28]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0204 	bic.w	r2, r2, #4
 800730c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69d9      	ldr	r1, [r3, #28]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	691a      	ldr	r2, [r3, #16]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	430a      	orrs	r2, r1
 800731e:	61da      	str	r2, [r3, #28]
      break;
 8007320:	e064      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	4618      	mov	r0, r3
 800732a:	f000 fab1 	bl	8007890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69da      	ldr	r2, [r3, #28]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	69da      	ldr	r2, [r3, #28]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800734c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	69d9      	ldr	r1, [r3, #28]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	021a      	lsls	r2, r3, #8
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	61da      	str	r2, [r3, #28]
      break;
 8007362:	e043      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68b9      	ldr	r1, [r7, #8]
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fafa 	bl	8007964 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0208 	orr.w	r2, r2, #8
 800737e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f022 0204 	bic.w	r2, r2, #4
 800738e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	691a      	ldr	r2, [r3, #16]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	430a      	orrs	r2, r1
 80073a0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073a2:	e023      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68b9      	ldr	r1, [r7, #8]
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb3e 	bl	8007a2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	021a      	lsls	r2, r3, #8
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073e4:	e002      	b.n	80073ec <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3718      	adds	r7, #24
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a44      	ldr	r2, [pc, #272]	; (8007524 <TIM_Base_SetConfig+0x124>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d013      	beq.n	8007440 <TIM_Base_SetConfig+0x40>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800741e:	d00f      	beq.n	8007440 <TIM_Base_SetConfig+0x40>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	4a41      	ldr	r2, [pc, #260]	; (8007528 <TIM_Base_SetConfig+0x128>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d00b      	beq.n	8007440 <TIM_Base_SetConfig+0x40>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a40      	ldr	r2, [pc, #256]	; (800752c <TIM_Base_SetConfig+0x12c>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d007      	beq.n	8007440 <TIM_Base_SetConfig+0x40>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a3f      	ldr	r2, [pc, #252]	; (8007530 <TIM_Base_SetConfig+0x130>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d003      	beq.n	8007440 <TIM_Base_SetConfig+0x40>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	4a3e      	ldr	r2, [pc, #248]	; (8007534 <TIM_Base_SetConfig+0x134>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d108      	bne.n	8007452 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007446:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	4313      	orrs	r3, r2
 8007450:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a33      	ldr	r2, [pc, #204]	; (8007524 <TIM_Base_SetConfig+0x124>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d027      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007460:	d023      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a30      	ldr	r2, [pc, #192]	; (8007528 <TIM_Base_SetConfig+0x128>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d01f      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a2f      	ldr	r2, [pc, #188]	; (800752c <TIM_Base_SetConfig+0x12c>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d01b      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	4a2e      	ldr	r2, [pc, #184]	; (8007530 <TIM_Base_SetConfig+0x130>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d017      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	4a2d      	ldr	r2, [pc, #180]	; (8007534 <TIM_Base_SetConfig+0x134>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d013      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	4a2c      	ldr	r2, [pc, #176]	; (8007538 <TIM_Base_SetConfig+0x138>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00f      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a2b      	ldr	r2, [pc, #172]	; (800753c <TIM_Base_SetConfig+0x13c>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d00b      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	4a2a      	ldr	r2, [pc, #168]	; (8007540 <TIM_Base_SetConfig+0x140>)
 8007496:	4293      	cmp	r3, r2
 8007498:	d007      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4a29      	ldr	r2, [pc, #164]	; (8007544 <TIM_Base_SetConfig+0x144>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d003      	beq.n	80074aa <TIM_Base_SetConfig+0xaa>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a28      	ldr	r2, [pc, #160]	; (8007548 <TIM_Base_SetConfig+0x148>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d108      	bne.n	80074bc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	68fa      	ldr	r2, [r7, #12]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a10      	ldr	r2, [pc, #64]	; (8007524 <TIM_Base_SetConfig+0x124>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d00f      	beq.n	8007508 <TIM_Base_SetConfig+0x108>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a12      	ldr	r2, [pc, #72]	; (8007534 <TIM_Base_SetConfig+0x134>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d00b      	beq.n	8007508 <TIM_Base_SetConfig+0x108>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a11      	ldr	r2, [pc, #68]	; (8007538 <TIM_Base_SetConfig+0x138>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d007      	beq.n	8007508 <TIM_Base_SetConfig+0x108>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a10      	ldr	r2, [pc, #64]	; (800753c <TIM_Base_SetConfig+0x13c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d003      	beq.n	8007508 <TIM_Base_SetConfig+0x108>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <TIM_Base_SetConfig+0x140>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d103      	bne.n	8007510 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	691a      	ldr	r2, [r3, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	615a      	str	r2, [r3, #20]
}
 8007516:	bf00      	nop
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	40010000 	.word	0x40010000
 8007528:	40000400 	.word	0x40000400
 800752c:	40000800 	.word	0x40000800
 8007530:	40000c00 	.word	0x40000c00
 8007534:	40010400 	.word	0x40010400
 8007538:	40014000 	.word	0x40014000
 800753c:	40014400 	.word	0x40014400
 8007540:	40014800 	.word	0x40014800
 8007544:	4000e000 	.word	0x4000e000
 8007548:	4000e400 	.word	0x4000e400

0800754c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	f023 0201 	bic.w	r2, r3, #1
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007574:	68fa      	ldr	r2, [r7, #12]
 8007576:	4b37      	ldr	r3, [pc, #220]	; (8007654 <TIM_OC1_SetConfig+0x108>)
 8007578:	4013      	ands	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f023 0303 	bic.w	r3, r3, #3
 8007582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 0302 	bic.w	r3, r3, #2
 8007594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a2d      	ldr	r2, [pc, #180]	; (8007658 <TIM_OC1_SetConfig+0x10c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00f      	beq.n	80075c8 <TIM_OC1_SetConfig+0x7c>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a2c      	ldr	r2, [pc, #176]	; (800765c <TIM_OC1_SetConfig+0x110>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d00b      	beq.n	80075c8 <TIM_OC1_SetConfig+0x7c>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a2b      	ldr	r2, [pc, #172]	; (8007660 <TIM_OC1_SetConfig+0x114>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d007      	beq.n	80075c8 <TIM_OC1_SetConfig+0x7c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a2a      	ldr	r2, [pc, #168]	; (8007664 <TIM_OC1_SetConfig+0x118>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d003      	beq.n	80075c8 <TIM_OC1_SetConfig+0x7c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a29      	ldr	r2, [pc, #164]	; (8007668 <TIM_OC1_SetConfig+0x11c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d10c      	bne.n	80075e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f023 0308 	bic.w	r3, r3, #8
 80075ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 0304 	bic.w	r3, r3, #4
 80075e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a1c      	ldr	r2, [pc, #112]	; (8007658 <TIM_OC1_SetConfig+0x10c>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00f      	beq.n	800760a <TIM_OC1_SetConfig+0xbe>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a1b      	ldr	r2, [pc, #108]	; (800765c <TIM_OC1_SetConfig+0x110>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d00b      	beq.n	800760a <TIM_OC1_SetConfig+0xbe>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1a      	ldr	r2, [pc, #104]	; (8007660 <TIM_OC1_SetConfig+0x114>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d007      	beq.n	800760a <TIM_OC1_SetConfig+0xbe>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <TIM_OC1_SetConfig+0x118>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d003      	beq.n	800760a <TIM_OC1_SetConfig+0xbe>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a18      	ldr	r2, [pc, #96]	; (8007668 <TIM_OC1_SetConfig+0x11c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d111      	bne.n	800762e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	4313      	orrs	r3, r2
 8007622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	693a      	ldr	r2, [r7, #16]
 800762a:	4313      	orrs	r3, r2
 800762c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	693a      	ldr	r2, [r7, #16]
 8007632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	621a      	str	r2, [r3, #32]
}
 8007648:	bf00      	nop
 800764a:	371c      	adds	r7, #28
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	fffeff8f 	.word	0xfffeff8f
 8007658:	40010000 	.word	0x40010000
 800765c:	40010400 	.word	0x40010400
 8007660:	40014000 	.word	0x40014000
 8007664:	40014400 	.word	0x40014400
 8007668:	40014800 	.word	0x40014800

0800766c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800766c:	b480      	push	{r7}
 800766e:	b087      	sub	sp, #28
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f023 0210 	bic.w	r2, r3, #16
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007694:	68fa      	ldr	r2, [r7, #12]
 8007696:	4b34      	ldr	r3, [pc, #208]	; (8007768 <TIM_OC2_SetConfig+0xfc>)
 8007698:	4013      	ands	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	021b      	lsls	r3, r3, #8
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f023 0320 	bic.w	r3, r3, #32
 80076b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	011b      	lsls	r3, r3, #4
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	4a29      	ldr	r2, [pc, #164]	; (800776c <TIM_OC2_SetConfig+0x100>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d003      	beq.n	80076d4 <TIM_OC2_SetConfig+0x68>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	4a28      	ldr	r2, [pc, #160]	; (8007770 <TIM_OC2_SetConfig+0x104>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d10d      	bne.n	80076f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	697a      	ldr	r2, [r7, #20]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a1e      	ldr	r2, [pc, #120]	; (800776c <TIM_OC2_SetConfig+0x100>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00f      	beq.n	8007718 <TIM_OC2_SetConfig+0xac>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a1d      	ldr	r2, [pc, #116]	; (8007770 <TIM_OC2_SetConfig+0x104>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d00b      	beq.n	8007718 <TIM_OC2_SetConfig+0xac>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a1c      	ldr	r2, [pc, #112]	; (8007774 <TIM_OC2_SetConfig+0x108>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d007      	beq.n	8007718 <TIM_OC2_SetConfig+0xac>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <TIM_OC2_SetConfig+0x10c>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d003      	beq.n	8007718 <TIM_OC2_SetConfig+0xac>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a1a      	ldr	r2, [pc, #104]	; (800777c <TIM_OC2_SetConfig+0x110>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d113      	bne.n	8007740 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800771e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007726:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4313      	orrs	r3, r2
 800773e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	feff8fff 	.word	0xfeff8fff
 800776c:	40010000 	.word	0x40010000
 8007770:	40010400 	.word	0x40010400
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800

08007780 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4b33      	ldr	r3, [pc, #204]	; (8007878 <TIM_OC3_SetConfig+0xf8>)
 80077ac:	4013      	ands	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80077c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	021b      	lsls	r3, r3, #8
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a28      	ldr	r2, [pc, #160]	; (800787c <TIM_OC3_SetConfig+0xfc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d003      	beq.n	80077e6 <TIM_OC3_SetConfig+0x66>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <TIM_OC3_SetConfig+0x100>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10d      	bne.n	8007802 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80077e6:	697b      	ldr	r3, [r7, #20]
 80077e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80077ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	021b      	lsls	r3, r3, #8
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <TIM_OC3_SetConfig+0xfc>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC3_SetConfig+0xaa>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1c      	ldr	r2, [pc, #112]	; (8007880 <TIM_OC3_SetConfig+0x100>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC3_SetConfig+0xaa>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1b      	ldr	r2, [pc, #108]	; (8007884 <TIM_OC3_SetConfig+0x104>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC3_SetConfig+0xaa>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1a      	ldr	r2, [pc, #104]	; (8007888 <TIM_OC3_SetConfig+0x108>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC3_SetConfig+0xaa>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a19      	ldr	r2, [pc, #100]	; (800788c <TIM_OC3_SetConfig+0x10c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d113      	bne.n	8007852 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	011b      	lsls	r3, r3, #4
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4313      	orrs	r3, r2
 8007844:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	693a      	ldr	r2, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	697a      	ldr	r2, [r7, #20]
 800786a:	621a      	str	r2, [r3, #32]
}
 800786c:	bf00      	nop
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	fffeff8f 	.word	0xfffeff8f
 800787c:	40010000 	.word	0x40010000
 8007880:	40010400 	.word	0x40010400
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800

08007890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	4b24      	ldr	r3, [pc, #144]	; (800794c <TIM_OC4_SetConfig+0xbc>)
 80078bc:	4013      	ands	r3, r2
 80078be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	031b      	lsls	r3, r3, #12
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a19      	ldr	r2, [pc, #100]	; (8007950 <TIM_OC4_SetConfig+0xc0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d00f      	beq.n	8007910 <TIM_OC4_SetConfig+0x80>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a18      	ldr	r2, [pc, #96]	; (8007954 <TIM_OC4_SetConfig+0xc4>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00b      	beq.n	8007910 <TIM_OC4_SetConfig+0x80>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a17      	ldr	r2, [pc, #92]	; (8007958 <TIM_OC4_SetConfig+0xc8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d007      	beq.n	8007910 <TIM_OC4_SetConfig+0x80>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a16      	ldr	r2, [pc, #88]	; (800795c <TIM_OC4_SetConfig+0xcc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC4_SetConfig+0x80>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <TIM_OC4_SetConfig+0xd0>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d109      	bne.n	8007924 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007916:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	695b      	ldr	r3, [r3, #20]
 800791c:	019b      	lsls	r3, r3, #6
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr
 800794a:	bf00      	nop
 800794c:	feff8fff 	.word	0xfeff8fff
 8007950:	40010000 	.word	0x40010000
 8007954:	40010400 	.word	0x40010400
 8007958:	40014000 	.word	0x40014000
 800795c:	40014400 	.word	0x40014400
 8007960:	40014800 	.word	0x40014800

08007964 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a1b      	ldr	r3, [r3, #32]
 800797e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4b21      	ldr	r3, [pc, #132]	; (8007a14 <TIM_OC5_SetConfig+0xb0>)
 8007990:	4013      	ands	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	4313      	orrs	r3, r2
 800799c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	041b      	lsls	r3, r3, #16
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a18      	ldr	r2, [pc, #96]	; (8007a18 <TIM_OC5_SetConfig+0xb4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_OC5_SetConfig+0x76>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a17      	ldr	r2, [pc, #92]	; (8007a1c <TIM_OC5_SetConfig+0xb8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_OC5_SetConfig+0x76>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a16      	ldr	r2, [pc, #88]	; (8007a20 <TIM_OC5_SetConfig+0xbc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_OC5_SetConfig+0x76>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a15      	ldr	r2, [pc, #84]	; (8007a24 <TIM_OC5_SetConfig+0xc0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_OC5_SetConfig+0x76>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	4a14      	ldr	r2, [pc, #80]	; (8007a28 <TIM_OC5_SetConfig+0xc4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d109      	bne.n	80079ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	021b      	lsls	r3, r3, #8
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4313      	orrs	r3, r2
 80079ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	685a      	ldr	r2, [r3, #4]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	621a      	str	r2, [r3, #32]
}
 8007a08:	bf00      	nop
 8007a0a:	371c      	adds	r7, #28
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	fffeff8f 	.word	0xfffeff8f
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40010400 	.word	0x40010400
 8007a20:	40014000 	.word	0x40014000
 8007a24:	40014400 	.word	0x40014400
 8007a28:	40014800 	.word	0x40014800

08007a2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <TIM_OC6_SetConfig+0xb4>)
 8007a58:	4013      	ands	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	021b      	lsls	r3, r3, #8
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	051b      	lsls	r3, r3, #20
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a19      	ldr	r2, [pc, #100]	; (8007ae4 <TIM_OC6_SetConfig+0xb8>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00f      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x78>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a18      	ldr	r2, [pc, #96]	; (8007ae8 <TIM_OC6_SetConfig+0xbc>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d00b      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x78>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a17      	ldr	r2, [pc, #92]	; (8007aec <TIM_OC6_SetConfig+0xc0>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d007      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x78>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a16      	ldr	r2, [pc, #88]	; (8007af0 <TIM_OC6_SetConfig+0xc4>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d003      	beq.n	8007aa4 <TIM_OC6_SetConfig+0x78>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	4a15      	ldr	r2, [pc, #84]	; (8007af4 <TIM_OC6_SetConfig+0xc8>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d109      	bne.n	8007ab8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	695b      	ldr	r3, [r3, #20]
 8007ab0:	029b      	lsls	r3, r3, #10
 8007ab2:	697a      	ldr	r2, [r7, #20]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	685a      	ldr	r2, [r3, #4]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	621a      	str	r2, [r3, #32]
}
 8007ad2:	bf00      	nop
 8007ad4:	371c      	adds	r7, #28
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
 8007ade:	bf00      	nop
 8007ae0:	feff8fff 	.word	0xfeff8fff
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40010400 	.word	0x40010400
 8007aec:	40014000 	.word	0x40014000
 8007af0:	40014400 	.word	0x40014400
 8007af4:	40014800 	.word	0x40014800

08007af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007b0c:	2302      	movs	r3, #2
 8007b0e:	e077      	b.n	8007c00 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2201      	movs	r2, #1
 8007b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a35      	ldr	r2, [pc, #212]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d004      	beq.n	8007b44 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a34      	ldr	r2, [pc, #208]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d108      	bne.n	8007b56 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007b4a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a25      	ldr	r2, [pc, #148]	; (8007c0c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d02c      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b82:	d027      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a22      	ldr	r2, [pc, #136]	; (8007c14 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d022      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a21      	ldr	r2, [pc, #132]	; (8007c18 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d01d      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1f      	ldr	r2, [pc, #124]	; (8007c1c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d018      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a1a      	ldr	r2, [pc, #104]	; (8007c10 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d013      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	; (8007c20 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00e      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a1a      	ldr	r2, [pc, #104]	; (8007c24 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d009      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d004      	beq.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a17      	ldr	r2, [pc, #92]	; (8007c2c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d10c      	bne.n	8007bee <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	68ba      	ldr	r2, [r7, #8]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	40010000 	.word	0x40010000
 8007c10:	40010400 	.word	0x40010400
 8007c14:	40000400 	.word	0x40000400
 8007c18:	40000800 	.word	0x40000800
 8007c1c:	40000c00 	.word	0x40000c00
 8007c20:	40001800 	.word	0x40001800
 8007c24:	40014000 	.word	0x40014000
 8007c28:	4000e000 	.word	0x4000e000
 8007c2c:	4000e400 	.word	0x4000e400

08007c30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d101      	bne.n	8007c4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e087      	b.n	8007d5c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	041b      	lsls	r3, r3, #16
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a27      	ldr	r2, [pc, #156]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d004      	beq.n	8007cda <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a25      	ldr	r2, [pc, #148]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d106      	bne.n	8007ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a1e      	ldr	r2, [pc, #120]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d004      	beq.n	8007cfc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a1d      	ldr	r2, [pc, #116]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d126      	bne.n	8007d4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	051b      	lsls	r3, r3, #20
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	6a1b      	ldr	r3, [r3, #32]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a0d      	ldr	r2, [pc, #52]	; (8007d6c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d106      	bne.n	8007d4a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3714      	adds	r7, #20
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	40010000 	.word	0x40010000
 8007d6c:	40010400 	.word	0x40010400

08007d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e042      	b.n	8007e08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7f9 f8af 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2224      	movs	r2, #36	; 0x24
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 fc06 	bl	80085c4 <UART_SetConfig>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d101      	bne.n	8007dc2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e022      	b.n	8007e08 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d002      	beq.n	8007dd0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fa66 	bl	800929c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f001 faed 	bl	80093e0 <UART_CheckIdleState>
 8007e06:	4603      	mov	r3, r0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b0ba      	sub	sp, #232	; 0xe8
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	69db      	ldr	r3, [r3, #28]
 8007e1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007e36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007e3a:	f640 030f 	movw	r3, #2063	; 0x80f
 8007e3e:	4013      	ands	r3, r2
 8007e40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007e44:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d11b      	bne.n	8007e84 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d015      	beq.n	8007e84 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5c:	f003 0320 	and.w	r3, r3, #32
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d105      	bne.n	8007e70 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d009      	beq.n	8007e84 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8377 	beq.w	8008568 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	4798      	blx	r3
      }
      return;
 8007e82:	e371      	b.n	8008568 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	f000 8123 	beq.w	80080d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007e8e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007e92:	4b8d      	ldr	r3, [pc, #564]	; (80080c8 <HAL_UART_IRQHandler+0x2b8>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d106      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007e9a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e9e:	4b8b      	ldr	r3, [pc, #556]	; (80080cc <HAL_UART_IRQHandler+0x2bc>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 8116 	beq.w	80080d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d011      	beq.n	8007ed8 <HAL_UART_IRQHandler+0xc8>
 8007eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ece:	f043 0201 	orr.w	r2, r3, #1
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	f003 0302 	and.w	r3, r3, #2
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d011      	beq.n	8007f08 <HAL_UART_IRQHandler+0xf8>
 8007ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00b      	beq.n	8007f08 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	f043 0204 	orr.w	r2, r3, #4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f0c:	f003 0304 	and.w	r3, r3, #4
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d011      	beq.n	8007f38 <HAL_UART_IRQHandler+0x128>
 8007f14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f18:	f003 0301 	and.w	r3, r3, #1
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2204      	movs	r2, #4
 8007f26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2e:	f043 0202 	orr.w	r2, r3, #2
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f3c:	f003 0308 	and.w	r3, r3, #8
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d017      	beq.n	8007f74 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f48:	f003 0320 	and.w	r3, r3, #32
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d105      	bne.n	8007f5c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007f50:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f54:	4b5c      	ldr	r3, [pc, #368]	; (80080c8 <HAL_UART_IRQHandler+0x2b8>)
 8007f56:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00b      	beq.n	8007f74 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	2208      	movs	r2, #8
 8007f62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6a:	f043 0208 	orr.w	r2, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d012      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x196>
 8007f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d00c      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f9c:	f043 0220 	orr.w	r2, r3, #32
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f000 82dd 	beq.w	800856c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fb6:	f003 0320 	and.w	r3, r3, #32
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d013      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007fbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d105      	bne.n	8007fd6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d007      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d003      	beq.n	8007fe6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b40      	cmp	r3, #64	; 0x40
 8007ffc:	d005      	beq.n	800800a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008002:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008006:	2b00      	cmp	r3, #0
 8008008:	d054      	beq.n	80080b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f001 fafa 	bl	8009604 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d146      	bne.n	80080ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3308      	adds	r3, #8
 8008024:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008034:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	3308      	adds	r3, #8
 8008046:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800804a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800804e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008052:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008056:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800805a:	e841 2300 	strex	r3, r2, [r1]
 800805e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008062:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1d9      	bne.n	800801e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008070:	2b00      	cmp	r3, #0
 8008072:	d017      	beq.n	80080a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800807a:	4a15      	ldr	r2, [pc, #84]	; (80080d0 <HAL_UART_IRQHandler+0x2c0>)
 800807c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008084:	4618      	mov	r0, r3
 8008086:	f7fa f95b 	bl	8002340 <HAL_DMA_Abort_IT>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d019      	beq.n	80080c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008098:	687a      	ldr	r2, [r7, #4]
 800809a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800809e:	4610      	mov	r0, r2
 80080a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080a2:	e00f      	b.n	80080c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fa77 	bl	8008598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080aa:	e00b      	b.n	80080c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fa73 	bl	8008598 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b2:	e007      	b.n	80080c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 fa6f 	bl	8008598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80080c2:	e253      	b.n	800856c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c4:	bf00      	nop
    return;
 80080c6:	e251      	b.n	800856c <HAL_UART_IRQHandler+0x75c>
 80080c8:	10000001 	.word	0x10000001
 80080cc:	04000120 	.word	0x04000120
 80080d0:	080096d1 	.word	0x080096d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d8:	2b01      	cmp	r3, #1
 80080da:	f040 81e7 	bne.w	80084ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f003 0310 	and.w	r3, r3, #16
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 81e0 	beq.w	80084ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80080ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f0:	f003 0310 	and.w	r3, r3, #16
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 81d9 	beq.w	80084ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2210      	movs	r2, #16
 8008100:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800810c:	2b40      	cmp	r3, #64	; 0x40
 800810e:	f040 8151 	bne.w	80083b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a96      	ldr	r2, [pc, #600]	; (8008374 <HAL_UART_IRQHandler+0x564>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d068      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a93      	ldr	r2, [pc, #588]	; (8008378 <HAL_UART_IRQHandler+0x568>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d061      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a91      	ldr	r2, [pc, #580]	; (800837c <HAL_UART_IRQHandler+0x56c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d05a      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a8e      	ldr	r2, [pc, #568]	; (8008380 <HAL_UART_IRQHandler+0x570>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d053      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a8c      	ldr	r2, [pc, #560]	; (8008384 <HAL_UART_IRQHandler+0x574>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d04c      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a89      	ldr	r2, [pc, #548]	; (8008388 <HAL_UART_IRQHandler+0x578>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d045      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a87      	ldr	r2, [pc, #540]	; (800838c <HAL_UART_IRQHandler+0x57c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d03e      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a84      	ldr	r2, [pc, #528]	; (8008390 <HAL_UART_IRQHandler+0x580>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d037      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a82      	ldr	r2, [pc, #520]	; (8008394 <HAL_UART_IRQHandler+0x584>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d030      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a7f      	ldr	r2, [pc, #508]	; (8008398 <HAL_UART_IRQHandler+0x588>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d029      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a7d      	ldr	r2, [pc, #500]	; (800839c <HAL_UART_IRQHandler+0x58c>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d022      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a7a      	ldr	r2, [pc, #488]	; (80083a0 <HAL_UART_IRQHandler+0x590>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d01b      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a78      	ldr	r2, [pc, #480]	; (80083a4 <HAL_UART_IRQHandler+0x594>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d014      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a75      	ldr	r2, [pc, #468]	; (80083a8 <HAL_UART_IRQHandler+0x598>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00d      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a73      	ldr	r2, [pc, #460]	; (80083ac <HAL_UART_IRQHandler+0x59c>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d006      	beq.n	80081f2 <HAL_UART_IRQHandler+0x3e2>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a70      	ldr	r2, [pc, #448]	; (80083b0 <HAL_UART_IRQHandler+0x5a0>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d106      	bne.n	8008200 <HAL_UART_IRQHandler+0x3f0>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	e005      	b.n	800820c <HAL_UART_IRQHandler+0x3fc>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b29b      	uxth	r3, r3
 800820c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008210:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 81ab 	beq.w	8008570 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008220:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008224:	429a      	cmp	r2, r3
 8008226:	f080 81a3 	bcs.w	8008570 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800823a:	69db      	ldr	r3, [r3, #28]
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	f000 8087 	beq.w	8008352 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008250:	e853 3f00 	ldrex	r3, [r3]
 8008254:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008258:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800825c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800826e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008272:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800827a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800827e:	e841 2300 	strex	r3, r2, [r1]
 8008282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008286:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d1da      	bne.n	8008244 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3308      	adds	r3, #8
 8008294:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008298:	e853 3f00 	ldrex	r3, [r3]
 800829c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800829e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082be:	e841 2300 	strex	r3, r2, [r1]
 80082c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1e1      	bne.n	800828e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	3308      	adds	r3, #8
 80082d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082d4:	e853 3f00 	ldrex	r3, [r3]
 80082d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	3308      	adds	r3, #8
 80082ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082f6:	e841 2300 	strex	r3, r2, [r1]
 80082fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d1e3      	bne.n	80082ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2220      	movs	r2, #32
 8008306:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008318:	e853 3f00 	ldrex	r3, [r3]
 800831c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800831e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008320:	f023 0310 	bic.w	r3, r3, #16
 8008324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008332:	65bb      	str	r3, [r7, #88]	; 0x58
 8008334:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008336:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008338:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800833a:	e841 2300 	strex	r3, r2, [r1]
 800833e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008340:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008342:	2b00      	cmp	r3, #0
 8008344:	d1e4      	bne.n	8008310 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800834c:	4618      	mov	r0, r3
 800834e:	f7f9 fcd9 	bl	8001d04 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2202      	movs	r2, #2
 8008356:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008364:	b29b      	uxth	r3, r3
 8008366:	1ad3      	subs	r3, r2, r3
 8008368:	b29b      	uxth	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 f91d 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008372:	e0fd      	b.n	8008570 <HAL_UART_IRQHandler+0x760>
 8008374:	40020010 	.word	0x40020010
 8008378:	40020028 	.word	0x40020028
 800837c:	40020040 	.word	0x40020040
 8008380:	40020058 	.word	0x40020058
 8008384:	40020070 	.word	0x40020070
 8008388:	40020088 	.word	0x40020088
 800838c:	400200a0 	.word	0x400200a0
 8008390:	400200b8 	.word	0x400200b8
 8008394:	40020410 	.word	0x40020410
 8008398:	40020428 	.word	0x40020428
 800839c:	40020440 	.word	0x40020440
 80083a0:	40020458 	.word	0x40020458
 80083a4:	40020470 	.word	0x40020470
 80083a8:	40020488 	.word	0x40020488
 80083ac:	400204a0 	.word	0x400204a0
 80083b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f000 80cf 	beq.w	8008574 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80083d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 80ca 	beq.w	8008574 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	461a      	mov	r2, r3
 80083fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008402:	647b      	str	r3, [r7, #68]	; 0x44
 8008404:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800840a:	e841 2300 	strex	r3, r2, [r1]
 800840e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1e4      	bne.n	80083e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	3308      	adds	r3, #8
 800841c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	e853 3f00 	ldrex	r3, [r3]
 8008424:	623b      	str	r3, [r7, #32]
   return(result);
 8008426:	6a3a      	ldr	r2, [r7, #32]
 8008428:	4b55      	ldr	r3, [pc, #340]	; (8008580 <HAL_UART_IRQHandler+0x770>)
 800842a:	4013      	ands	r3, r2
 800842c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	3308      	adds	r3, #8
 8008436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800843a:	633a      	str	r2, [r7, #48]	; 0x30
 800843c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008442:	e841 2300 	strex	r3, r2, [r1]
 8008446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844a:	2b00      	cmp	r3, #0
 800844c:	d1e3      	bne.n	8008416 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2220      	movs	r2, #32
 8008452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	e853 3f00 	ldrex	r3, [r3]
 800846e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f023 0310 	bic.w	r3, r3, #16
 8008476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	69b9      	ldr	r1, [r7, #24]
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	617b      	str	r3, [r7, #20]
   return(result);
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e4      	bne.n	8008462 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2202      	movs	r2, #2
 800849c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800849e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a2:	4619      	mov	r1, r3
 80084a4:	6878      	ldr	r0, [r7, #4]
 80084a6:	f000 f881 	bl	80085ac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80084aa:	e063      	b.n	8008574 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80084ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00e      	beq.n	80084d6 <HAL_UART_IRQHandler+0x6c6>
 80084b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d008      	beq.n	80084d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80084cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f001 f93f 	bl	8009752 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80084d4:	e051      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80084d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d014      	beq.n	800850c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80084e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d105      	bne.n	80084fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d008      	beq.n	800850c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d03a      	beq.n	8008578 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	4798      	blx	r3
    }
    return;
 800850a:	e035      	b.n	8008578 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800850c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008514:	2b00      	cmp	r3, #0
 8008516:	d009      	beq.n	800852c <HAL_UART_IRQHandler+0x71c>
 8008518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800851c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f8e9 	bl	80096fc <UART_EndTransmit_IT>
    return;
 800852a:	e026      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800852c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008534:	2b00      	cmp	r3, #0
 8008536:	d009      	beq.n	800854c <HAL_UART_IRQHandler+0x73c>
 8008538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800853c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d003      	beq.n	800854c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f001 f918 	bl	800977a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800854a:	e016      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800854c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008550:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008554:	2b00      	cmp	r3, #0
 8008556:	d010      	beq.n	800857a <HAL_UART_IRQHandler+0x76a>
 8008558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800855c:	2b00      	cmp	r3, #0
 800855e:	da0c      	bge.n	800857a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f900 	bl	8009766 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008566:	e008      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
      return;
 8008568:	bf00      	nop
 800856a:	e006      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
    return;
 800856c:	bf00      	nop
 800856e:	e004      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
      return;
 8008570:	bf00      	nop
 8008572:	e002      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
      return;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <HAL_UART_IRQHandler+0x76a>
    return;
 8008578:	bf00      	nop
  }
}
 800857a:	37e8      	adds	r7, #232	; 0xe8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	effffffe 	.word	0xeffffffe

08008584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	460b      	mov	r3, r1
 80085b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80085b8:	bf00      	nop
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085c8:	b092      	sub	sp, #72	; 0x48
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	689a      	ldr	r2, [r3, #8]
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	431a      	orrs	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	695b      	ldr	r3, [r3, #20]
 80085e2:	431a      	orrs	r2, r3
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4bbe      	ldr	r3, [pc, #760]	; (80088ec <UART_SetConfig+0x328>)
 80085f4:	4013      	ands	r3, r2
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	68da      	ldr	r2, [r3, #12]
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4ab3      	ldr	r2, [pc, #716]	; (80088f0 <UART_SetConfig+0x32c>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d004      	beq.n	8008630 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800862c:	4313      	orrs	r3, r2
 800862e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	4baf      	ldr	r3, [pc, #700]	; (80088f4 <UART_SetConfig+0x330>)
 8008638:	4013      	ands	r3, r2
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	6812      	ldr	r2, [r2, #0]
 800863e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008640:	430b      	orrs	r3, r1
 8008642:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800864a:	f023 010f 	bic.w	r1, r3, #15
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	430a      	orrs	r2, r1
 8008658:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4aa6      	ldr	r2, [pc, #664]	; (80088f8 <UART_SetConfig+0x334>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d177      	bne.n	8008754 <UART_SetConfig+0x190>
 8008664:	4ba5      	ldr	r3, [pc, #660]	; (80088fc <UART_SetConfig+0x338>)
 8008666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008668:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800866c:	2b28      	cmp	r3, #40	; 0x28
 800866e:	d86d      	bhi.n	800874c <UART_SetConfig+0x188>
 8008670:	a201      	add	r2, pc, #4	; (adr r2, 8008678 <UART_SetConfig+0xb4>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	0800871d 	.word	0x0800871d
 800867c:	0800874d 	.word	0x0800874d
 8008680:	0800874d 	.word	0x0800874d
 8008684:	0800874d 	.word	0x0800874d
 8008688:	0800874d 	.word	0x0800874d
 800868c:	0800874d 	.word	0x0800874d
 8008690:	0800874d 	.word	0x0800874d
 8008694:	0800874d 	.word	0x0800874d
 8008698:	08008725 	.word	0x08008725
 800869c:	0800874d 	.word	0x0800874d
 80086a0:	0800874d 	.word	0x0800874d
 80086a4:	0800874d 	.word	0x0800874d
 80086a8:	0800874d 	.word	0x0800874d
 80086ac:	0800874d 	.word	0x0800874d
 80086b0:	0800874d 	.word	0x0800874d
 80086b4:	0800874d 	.word	0x0800874d
 80086b8:	0800872d 	.word	0x0800872d
 80086bc:	0800874d 	.word	0x0800874d
 80086c0:	0800874d 	.word	0x0800874d
 80086c4:	0800874d 	.word	0x0800874d
 80086c8:	0800874d 	.word	0x0800874d
 80086cc:	0800874d 	.word	0x0800874d
 80086d0:	0800874d 	.word	0x0800874d
 80086d4:	0800874d 	.word	0x0800874d
 80086d8:	08008735 	.word	0x08008735
 80086dc:	0800874d 	.word	0x0800874d
 80086e0:	0800874d 	.word	0x0800874d
 80086e4:	0800874d 	.word	0x0800874d
 80086e8:	0800874d 	.word	0x0800874d
 80086ec:	0800874d 	.word	0x0800874d
 80086f0:	0800874d 	.word	0x0800874d
 80086f4:	0800874d 	.word	0x0800874d
 80086f8:	0800873d 	.word	0x0800873d
 80086fc:	0800874d 	.word	0x0800874d
 8008700:	0800874d 	.word	0x0800874d
 8008704:	0800874d 	.word	0x0800874d
 8008708:	0800874d 	.word	0x0800874d
 800870c:	0800874d 	.word	0x0800874d
 8008710:	0800874d 	.word	0x0800874d
 8008714:	0800874d 	.word	0x0800874d
 8008718:	08008745 	.word	0x08008745
 800871c:	2301      	movs	r3, #1
 800871e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008722:	e326      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008724:	2304      	movs	r3, #4
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e322      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800872c:	2308      	movs	r3, #8
 800872e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008732:	e31e      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008734:	2310      	movs	r3, #16
 8008736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873a:	e31a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800873c:	2320      	movs	r3, #32
 800873e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008742:	e316      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008744:	2340      	movs	r3, #64	; 0x40
 8008746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874a:	e312      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800874c:	2380      	movs	r3, #128	; 0x80
 800874e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008752:	e30e      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a69      	ldr	r2, [pc, #420]	; (8008900 <UART_SetConfig+0x33c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d130      	bne.n	80087c0 <UART_SetConfig+0x1fc>
 800875e:	4b67      	ldr	r3, [pc, #412]	; (80088fc <UART_SetConfig+0x338>)
 8008760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b05      	cmp	r3, #5
 8008768:	d826      	bhi.n	80087b8 <UART_SetConfig+0x1f4>
 800876a:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x1ac>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	08008789 	.word	0x08008789
 8008774:	08008791 	.word	0x08008791
 8008778:	08008799 	.word	0x08008799
 800877c:	080087a1 	.word	0x080087a1
 8008780:	080087a9 	.word	0x080087a9
 8008784:	080087b1 	.word	0x080087b1
 8008788:	2300      	movs	r3, #0
 800878a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800878e:	e2f0      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008790:	2304      	movs	r3, #4
 8008792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008796:	e2ec      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008798:	2308      	movs	r3, #8
 800879a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800879e:	e2e8      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087a0:	2310      	movs	r3, #16
 80087a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087a6:	e2e4      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087a8:	2320      	movs	r3, #32
 80087aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ae:	e2e0      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087b0:	2340      	movs	r3, #64	; 0x40
 80087b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b6:	e2dc      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087b8:	2380      	movs	r3, #128	; 0x80
 80087ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087be:	e2d8      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a4f      	ldr	r2, [pc, #316]	; (8008904 <UART_SetConfig+0x340>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d130      	bne.n	800882c <UART_SetConfig+0x268>
 80087ca:	4b4c      	ldr	r3, [pc, #304]	; (80088fc <UART_SetConfig+0x338>)
 80087cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b05      	cmp	r3, #5
 80087d4:	d826      	bhi.n	8008824 <UART_SetConfig+0x260>
 80087d6:	a201      	add	r2, pc, #4	; (adr r2, 80087dc <UART_SetConfig+0x218>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087f5 	.word	0x080087f5
 80087e0:	080087fd 	.word	0x080087fd
 80087e4:	08008805 	.word	0x08008805
 80087e8:	0800880d 	.word	0x0800880d
 80087ec:	08008815 	.word	0x08008815
 80087f0:	0800881d 	.word	0x0800881d
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087fa:	e2ba      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80087fc:	2304      	movs	r3, #4
 80087fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008802:	e2b6      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008804:	2308      	movs	r3, #8
 8008806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800880a:	e2b2      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800880c:	2310      	movs	r3, #16
 800880e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008812:	e2ae      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008814:	2320      	movs	r3, #32
 8008816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881a:	e2aa      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800881c:	2340      	movs	r3, #64	; 0x40
 800881e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008822:	e2a6      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008824:	2380      	movs	r3, #128	; 0x80
 8008826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882a:	e2a2      	b.n	8008d72 <UART_SetConfig+0x7ae>
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a35      	ldr	r2, [pc, #212]	; (8008908 <UART_SetConfig+0x344>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d130      	bne.n	8008898 <UART_SetConfig+0x2d4>
 8008836:	4b31      	ldr	r3, [pc, #196]	; (80088fc <UART_SetConfig+0x338>)
 8008838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800883a:	f003 0307 	and.w	r3, r3, #7
 800883e:	2b05      	cmp	r3, #5
 8008840:	d826      	bhi.n	8008890 <UART_SetConfig+0x2cc>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <UART_SetConfig+0x284>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	08008861 	.word	0x08008861
 800884c:	08008869 	.word	0x08008869
 8008850:	08008871 	.word	0x08008871
 8008854:	08008879 	.word	0x08008879
 8008858:	08008881 	.word	0x08008881
 800885c:	08008889 	.word	0x08008889
 8008860:	2300      	movs	r3, #0
 8008862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008866:	e284      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008868:	2304      	movs	r3, #4
 800886a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800886e:	e280      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008870:	2308      	movs	r3, #8
 8008872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008876:	e27c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008878:	2310      	movs	r3, #16
 800887a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800887e:	e278      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008880:	2320      	movs	r3, #32
 8008882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008886:	e274      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008888:	2340      	movs	r3, #64	; 0x40
 800888a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888e:	e270      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008890:	2380      	movs	r3, #128	; 0x80
 8008892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008896:	e26c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a1b      	ldr	r2, [pc, #108]	; (800890c <UART_SetConfig+0x348>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d142      	bne.n	8008928 <UART_SetConfig+0x364>
 80088a2:	4b16      	ldr	r3, [pc, #88]	; (80088fc <UART_SetConfig+0x338>)
 80088a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a6:	f003 0307 	and.w	r3, r3, #7
 80088aa:	2b05      	cmp	r3, #5
 80088ac:	d838      	bhi.n	8008920 <UART_SetConfig+0x35c>
 80088ae:	a201      	add	r2, pc, #4	; (adr r2, 80088b4 <UART_SetConfig+0x2f0>)
 80088b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088b4:	080088cd 	.word	0x080088cd
 80088b8:	080088d5 	.word	0x080088d5
 80088bc:	080088dd 	.word	0x080088dd
 80088c0:	080088e5 	.word	0x080088e5
 80088c4:	08008911 	.word	0x08008911
 80088c8:	08008919 	.word	0x08008919
 80088cc:	2300      	movs	r3, #0
 80088ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088d2:	e24e      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80088d4:	2304      	movs	r3, #4
 80088d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088da:	e24a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80088dc:	2308      	movs	r3, #8
 80088de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088e2:	e246      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80088e4:	2310      	movs	r3, #16
 80088e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ea:	e242      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80088ec:	cfff69f3 	.word	0xcfff69f3
 80088f0:	58000c00 	.word	0x58000c00
 80088f4:	11fff4ff 	.word	0x11fff4ff
 80088f8:	40011000 	.word	0x40011000
 80088fc:	58024400 	.word	0x58024400
 8008900:	40004400 	.word	0x40004400
 8008904:	40004800 	.word	0x40004800
 8008908:	40004c00 	.word	0x40004c00
 800890c:	40005000 	.word	0x40005000
 8008910:	2320      	movs	r3, #32
 8008912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008916:	e22c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008918:	2340      	movs	r3, #64	; 0x40
 800891a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800891e:	e228      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008920:	2380      	movs	r3, #128	; 0x80
 8008922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008926:	e224      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4ab1      	ldr	r2, [pc, #708]	; (8008bf4 <UART_SetConfig+0x630>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d176      	bne.n	8008a20 <UART_SetConfig+0x45c>
 8008932:	4bb1      	ldr	r3, [pc, #708]	; (8008bf8 <UART_SetConfig+0x634>)
 8008934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008936:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800893a:	2b28      	cmp	r3, #40	; 0x28
 800893c:	d86c      	bhi.n	8008a18 <UART_SetConfig+0x454>
 800893e:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0x380>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	080089e9 	.word	0x080089e9
 8008948:	08008a19 	.word	0x08008a19
 800894c:	08008a19 	.word	0x08008a19
 8008950:	08008a19 	.word	0x08008a19
 8008954:	08008a19 	.word	0x08008a19
 8008958:	08008a19 	.word	0x08008a19
 800895c:	08008a19 	.word	0x08008a19
 8008960:	08008a19 	.word	0x08008a19
 8008964:	080089f1 	.word	0x080089f1
 8008968:	08008a19 	.word	0x08008a19
 800896c:	08008a19 	.word	0x08008a19
 8008970:	08008a19 	.word	0x08008a19
 8008974:	08008a19 	.word	0x08008a19
 8008978:	08008a19 	.word	0x08008a19
 800897c:	08008a19 	.word	0x08008a19
 8008980:	08008a19 	.word	0x08008a19
 8008984:	080089f9 	.word	0x080089f9
 8008988:	08008a19 	.word	0x08008a19
 800898c:	08008a19 	.word	0x08008a19
 8008990:	08008a19 	.word	0x08008a19
 8008994:	08008a19 	.word	0x08008a19
 8008998:	08008a19 	.word	0x08008a19
 800899c:	08008a19 	.word	0x08008a19
 80089a0:	08008a19 	.word	0x08008a19
 80089a4:	08008a01 	.word	0x08008a01
 80089a8:	08008a19 	.word	0x08008a19
 80089ac:	08008a19 	.word	0x08008a19
 80089b0:	08008a19 	.word	0x08008a19
 80089b4:	08008a19 	.word	0x08008a19
 80089b8:	08008a19 	.word	0x08008a19
 80089bc:	08008a19 	.word	0x08008a19
 80089c0:	08008a19 	.word	0x08008a19
 80089c4:	08008a09 	.word	0x08008a09
 80089c8:	08008a19 	.word	0x08008a19
 80089cc:	08008a19 	.word	0x08008a19
 80089d0:	08008a19 	.word	0x08008a19
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a19 	.word	0x08008a19
 80089dc:	08008a19 	.word	0x08008a19
 80089e0:	08008a19 	.word	0x08008a19
 80089e4:	08008a11 	.word	0x08008a11
 80089e8:	2301      	movs	r3, #1
 80089ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089ee:	e1c0      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80089f0:	2304      	movs	r3, #4
 80089f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089f6:	e1bc      	b.n	8008d72 <UART_SetConfig+0x7ae>
 80089f8:	2308      	movs	r3, #8
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fe:	e1b8      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a00:	2310      	movs	r3, #16
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a06:	e1b4      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a08:	2320      	movs	r3, #32
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0e:	e1b0      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a10:	2340      	movs	r3, #64	; 0x40
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e1ac      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a18:	2380      	movs	r3, #128	; 0x80
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e1a8      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a75      	ldr	r2, [pc, #468]	; (8008bfc <UART_SetConfig+0x638>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d130      	bne.n	8008a8c <UART_SetConfig+0x4c8>
 8008a2a:	4b73      	ldr	r3, [pc, #460]	; (8008bf8 <UART_SetConfig+0x634>)
 8008a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a2e:	f003 0307 	and.w	r3, r3, #7
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d826      	bhi.n	8008a84 <UART_SetConfig+0x4c0>
 8008a36:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <UART_SetConfig+0x478>)
 8008a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3c:	08008a55 	.word	0x08008a55
 8008a40:	08008a5d 	.word	0x08008a5d
 8008a44:	08008a65 	.word	0x08008a65
 8008a48:	08008a6d 	.word	0x08008a6d
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	08008a7d 	.word	0x08008a7d
 8008a54:	2300      	movs	r3, #0
 8008a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a5a:	e18a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a5c:	2304      	movs	r3, #4
 8008a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a62:	e186      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a64:	2308      	movs	r3, #8
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e182      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a6c:	2310      	movs	r3, #16
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e17e      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a74:	2320      	movs	r3, #32
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e17a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a7c:	2340      	movs	r3, #64	; 0x40
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e176      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a84:	2380      	movs	r3, #128	; 0x80
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8a:	e172      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a5b      	ldr	r2, [pc, #364]	; (8008c00 <UART_SetConfig+0x63c>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d130      	bne.n	8008af8 <UART_SetConfig+0x534>
 8008a96:	4b58      	ldr	r3, [pc, #352]	; (8008bf8 <UART_SetConfig+0x634>)
 8008a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a9a:	f003 0307 	and.w	r3, r3, #7
 8008a9e:	2b05      	cmp	r3, #5
 8008aa0:	d826      	bhi.n	8008af0 <UART_SetConfig+0x52c>
 8008aa2:	a201      	add	r2, pc, #4	; (adr r2, 8008aa8 <UART_SetConfig+0x4e4>)
 8008aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa8:	08008ac1 	.word	0x08008ac1
 8008aac:	08008ac9 	.word	0x08008ac9
 8008ab0:	08008ad1 	.word	0x08008ad1
 8008ab4:	08008ad9 	.word	0x08008ad9
 8008ab8:	08008ae1 	.word	0x08008ae1
 8008abc:	08008ae9 	.word	0x08008ae9
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e154      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ac8:	2304      	movs	r3, #4
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e150      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ad0:	2308      	movs	r3, #8
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e14c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e148      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ae0:	2320      	movs	r3, #32
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e144      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ae8:	2340      	movs	r3, #64	; 0x40
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e140      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008af0:	2380      	movs	r3, #128	; 0x80
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e13c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a41      	ldr	r2, [pc, #260]	; (8008c04 <UART_SetConfig+0x640>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	f040 8082 	bne.w	8008c08 <UART_SetConfig+0x644>
 8008b04:	4b3c      	ldr	r3, [pc, #240]	; (8008bf8 <UART_SetConfig+0x634>)
 8008b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b0c:	2b28      	cmp	r3, #40	; 0x28
 8008b0e:	d86d      	bhi.n	8008bec <UART_SetConfig+0x628>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <UART_SetConfig+0x554>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008bbd 	.word	0x08008bbd
 8008b1c:	08008bed 	.word	0x08008bed
 8008b20:	08008bed 	.word	0x08008bed
 8008b24:	08008bed 	.word	0x08008bed
 8008b28:	08008bed 	.word	0x08008bed
 8008b2c:	08008bed 	.word	0x08008bed
 8008b30:	08008bed 	.word	0x08008bed
 8008b34:	08008bed 	.word	0x08008bed
 8008b38:	08008bc5 	.word	0x08008bc5
 8008b3c:	08008bed 	.word	0x08008bed
 8008b40:	08008bed 	.word	0x08008bed
 8008b44:	08008bed 	.word	0x08008bed
 8008b48:	08008bed 	.word	0x08008bed
 8008b4c:	08008bed 	.word	0x08008bed
 8008b50:	08008bed 	.word	0x08008bed
 8008b54:	08008bed 	.word	0x08008bed
 8008b58:	08008bcd 	.word	0x08008bcd
 8008b5c:	08008bed 	.word	0x08008bed
 8008b60:	08008bed 	.word	0x08008bed
 8008b64:	08008bed 	.word	0x08008bed
 8008b68:	08008bed 	.word	0x08008bed
 8008b6c:	08008bed 	.word	0x08008bed
 8008b70:	08008bed 	.word	0x08008bed
 8008b74:	08008bed 	.word	0x08008bed
 8008b78:	08008bd5 	.word	0x08008bd5
 8008b7c:	08008bed 	.word	0x08008bed
 8008b80:	08008bed 	.word	0x08008bed
 8008b84:	08008bed 	.word	0x08008bed
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008bed 	.word	0x08008bed
 8008b90:	08008bed 	.word	0x08008bed
 8008b94:	08008bed 	.word	0x08008bed
 8008b98:	08008bdd 	.word	0x08008bdd
 8008b9c:	08008bed 	.word	0x08008bed
 8008ba0:	08008bed 	.word	0x08008bed
 8008ba4:	08008bed 	.word	0x08008bed
 8008ba8:	08008bed 	.word	0x08008bed
 8008bac:	08008bed 	.word	0x08008bed
 8008bb0:	08008bed 	.word	0x08008bed
 8008bb4:	08008bed 	.word	0x08008bed
 8008bb8:	08008be5 	.word	0x08008be5
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc2:	e0d6      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bc4:	2304      	movs	r3, #4
 8008bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bca:	e0d2      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bcc:	2308      	movs	r3, #8
 8008bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd2:	e0ce      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bd4:	2310      	movs	r3, #16
 8008bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bda:	e0ca      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bdc:	2320      	movs	r3, #32
 8008bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008be2:	e0c6      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008be4:	2340      	movs	r3, #64	; 0x40
 8008be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bea:	e0c2      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bec:	2380      	movs	r3, #128	; 0x80
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e0be      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008bf4:	40011400 	.word	0x40011400
 8008bf8:	58024400 	.word	0x58024400
 8008bfc:	40007800 	.word	0x40007800
 8008c00:	40007c00 	.word	0x40007c00
 8008c04:	40011800 	.word	0x40011800
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4aad      	ldr	r2, [pc, #692]	; (8008ec4 <UART_SetConfig+0x900>)
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d176      	bne.n	8008d00 <UART_SetConfig+0x73c>
 8008c12:	4bad      	ldr	r3, [pc, #692]	; (8008ec8 <UART_SetConfig+0x904>)
 8008c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c1a:	2b28      	cmp	r3, #40	; 0x28
 8008c1c:	d86c      	bhi.n	8008cf8 <UART_SetConfig+0x734>
 8008c1e:	a201      	add	r2, pc, #4	; (adr r2, 8008c24 <UART_SetConfig+0x660>)
 8008c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c24:	08008cc9 	.word	0x08008cc9
 8008c28:	08008cf9 	.word	0x08008cf9
 8008c2c:	08008cf9 	.word	0x08008cf9
 8008c30:	08008cf9 	.word	0x08008cf9
 8008c34:	08008cf9 	.word	0x08008cf9
 8008c38:	08008cf9 	.word	0x08008cf9
 8008c3c:	08008cf9 	.word	0x08008cf9
 8008c40:	08008cf9 	.word	0x08008cf9
 8008c44:	08008cd1 	.word	0x08008cd1
 8008c48:	08008cf9 	.word	0x08008cf9
 8008c4c:	08008cf9 	.word	0x08008cf9
 8008c50:	08008cf9 	.word	0x08008cf9
 8008c54:	08008cf9 	.word	0x08008cf9
 8008c58:	08008cf9 	.word	0x08008cf9
 8008c5c:	08008cf9 	.word	0x08008cf9
 8008c60:	08008cf9 	.word	0x08008cf9
 8008c64:	08008cd9 	.word	0x08008cd9
 8008c68:	08008cf9 	.word	0x08008cf9
 8008c6c:	08008cf9 	.word	0x08008cf9
 8008c70:	08008cf9 	.word	0x08008cf9
 8008c74:	08008cf9 	.word	0x08008cf9
 8008c78:	08008cf9 	.word	0x08008cf9
 8008c7c:	08008cf9 	.word	0x08008cf9
 8008c80:	08008cf9 	.word	0x08008cf9
 8008c84:	08008ce1 	.word	0x08008ce1
 8008c88:	08008cf9 	.word	0x08008cf9
 8008c8c:	08008cf9 	.word	0x08008cf9
 8008c90:	08008cf9 	.word	0x08008cf9
 8008c94:	08008cf9 	.word	0x08008cf9
 8008c98:	08008cf9 	.word	0x08008cf9
 8008c9c:	08008cf9 	.word	0x08008cf9
 8008ca0:	08008cf9 	.word	0x08008cf9
 8008ca4:	08008ce9 	.word	0x08008ce9
 8008ca8:	08008cf9 	.word	0x08008cf9
 8008cac:	08008cf9 	.word	0x08008cf9
 8008cb0:	08008cf9 	.word	0x08008cf9
 8008cb4:	08008cf9 	.word	0x08008cf9
 8008cb8:	08008cf9 	.word	0x08008cf9
 8008cbc:	08008cf9 	.word	0x08008cf9
 8008cc0:	08008cf9 	.word	0x08008cf9
 8008cc4:	08008cf1 	.word	0x08008cf1
 8008cc8:	2301      	movs	r3, #1
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cce:	e050      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008cd0:	2304      	movs	r3, #4
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd6:	e04c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008cd8:	2308      	movs	r3, #8
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cde:	e048      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ce0:	2310      	movs	r3, #16
 8008ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce6:	e044      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008ce8:	2320      	movs	r3, #32
 8008cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cee:	e040      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008cf0:	2340      	movs	r3, #64	; 0x40
 8008cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf6:	e03c      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008cf8:	2380      	movs	r3, #128	; 0x80
 8008cfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfe:	e038      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a71      	ldr	r2, [pc, #452]	; (8008ecc <UART_SetConfig+0x908>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d130      	bne.n	8008d6c <UART_SetConfig+0x7a8>
 8008d0a:	4b6f      	ldr	r3, [pc, #444]	; (8008ec8 <UART_SetConfig+0x904>)
 8008d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0e:	f003 0307 	and.w	r3, r3, #7
 8008d12:	2b05      	cmp	r3, #5
 8008d14:	d826      	bhi.n	8008d64 <UART_SetConfig+0x7a0>
 8008d16:	a201      	add	r2, pc, #4	; (adr r2, 8008d1c <UART_SetConfig+0x758>)
 8008d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1c:	08008d35 	.word	0x08008d35
 8008d20:	08008d3d 	.word	0x08008d3d
 8008d24:	08008d45 	.word	0x08008d45
 8008d28:	08008d4d 	.word	0x08008d4d
 8008d2c:	08008d55 	.word	0x08008d55
 8008d30:	08008d5d 	.word	0x08008d5d
 8008d34:	2302      	movs	r3, #2
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e01a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d3c:	2304      	movs	r3, #4
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e016      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d44:	2308      	movs	r3, #8
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e012      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e00e      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d54:	2320      	movs	r3, #32
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e00a      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e006      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e002      	b.n	8008d72 <UART_SetConfig+0x7ae>
 8008d6c:	2380      	movs	r3, #128	; 0x80
 8008d6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a55      	ldr	r2, [pc, #340]	; (8008ecc <UART_SetConfig+0x908>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	f040 80f8 	bne.w	8008f6e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008d7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d82:	2b20      	cmp	r3, #32
 8008d84:	dc46      	bgt.n	8008e14 <UART_SetConfig+0x850>
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	db75      	blt.n	8008e76 <UART_SetConfig+0x8b2>
 8008d8a:	3b02      	subs	r3, #2
 8008d8c:	2b1e      	cmp	r3, #30
 8008d8e:	d872      	bhi.n	8008e76 <UART_SetConfig+0x8b2>
 8008d90:	a201      	add	r2, pc, #4	; (adr r2, 8008d98 <UART_SetConfig+0x7d4>)
 8008d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d96:	bf00      	nop
 8008d98:	08008e1b 	.word	0x08008e1b
 8008d9c:	08008e77 	.word	0x08008e77
 8008da0:	08008e23 	.word	0x08008e23
 8008da4:	08008e77 	.word	0x08008e77
 8008da8:	08008e77 	.word	0x08008e77
 8008dac:	08008e77 	.word	0x08008e77
 8008db0:	08008e33 	.word	0x08008e33
 8008db4:	08008e77 	.word	0x08008e77
 8008db8:	08008e77 	.word	0x08008e77
 8008dbc:	08008e77 	.word	0x08008e77
 8008dc0:	08008e77 	.word	0x08008e77
 8008dc4:	08008e77 	.word	0x08008e77
 8008dc8:	08008e77 	.word	0x08008e77
 8008dcc:	08008e77 	.word	0x08008e77
 8008dd0:	08008e43 	.word	0x08008e43
 8008dd4:	08008e77 	.word	0x08008e77
 8008dd8:	08008e77 	.word	0x08008e77
 8008ddc:	08008e77 	.word	0x08008e77
 8008de0:	08008e77 	.word	0x08008e77
 8008de4:	08008e77 	.word	0x08008e77
 8008de8:	08008e77 	.word	0x08008e77
 8008dec:	08008e77 	.word	0x08008e77
 8008df0:	08008e77 	.word	0x08008e77
 8008df4:	08008e77 	.word	0x08008e77
 8008df8:	08008e77 	.word	0x08008e77
 8008dfc:	08008e77 	.word	0x08008e77
 8008e00:	08008e77 	.word	0x08008e77
 8008e04:	08008e77 	.word	0x08008e77
 8008e08:	08008e77 	.word	0x08008e77
 8008e0c:	08008e77 	.word	0x08008e77
 8008e10:	08008e69 	.word	0x08008e69
 8008e14:	2b40      	cmp	r3, #64	; 0x40
 8008e16:	d02a      	beq.n	8008e6e <UART_SetConfig+0x8aa>
 8008e18:	e02d      	b.n	8008e76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008e1a:	f7fd fd63 	bl	80068e4 <HAL_RCCEx_GetD3PCLK1Freq>
 8008e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e20:	e02f      	b.n	8008e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7fd fd72 	bl	8006910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e30:	e027      	b.n	8008e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e32:	f107 0318 	add.w	r3, r7, #24
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd febe 	bl	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e3c:	69fb      	ldr	r3, [r7, #28]
 8008e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e40:	e01f      	b.n	8008e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e42:	4b21      	ldr	r3, [pc, #132]	; (8008ec8 <UART_SetConfig+0x904>)
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f003 0320 	and.w	r3, r3, #32
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d009      	beq.n	8008e62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e4e:	4b1e      	ldr	r3, [pc, #120]	; (8008ec8 <UART_SetConfig+0x904>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	08db      	lsrs	r3, r3, #3
 8008e54:	f003 0303 	and.w	r3, r3, #3
 8008e58:	4a1d      	ldr	r2, [pc, #116]	; (8008ed0 <UART_SetConfig+0x90c>)
 8008e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e60:	e00f      	b.n	8008e82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e62:	4b1b      	ldr	r3, [pc, #108]	; (8008ed0 <UART_SetConfig+0x90c>)
 8008e64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e66:	e00c      	b.n	8008e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e68:	4b1a      	ldr	r3, [pc, #104]	; (8008ed4 <UART_SetConfig+0x910>)
 8008e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e6c:	e009      	b.n	8008e82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e74:	e005      	b.n	8008e82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008e80:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	f000 81ee 	beq.w	8009266 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8e:	4a12      	ldr	r2, [pc, #72]	; (8008ed8 <UART_SetConfig+0x914>)
 8008e90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008e94:	461a      	mov	r2, r3
 8008e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e98:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e9c:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	005b      	lsls	r3, r3, #1
 8008ea6:	4413      	add	r3, r2
 8008ea8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d305      	bcc.n	8008eba <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d910      	bls.n	8008edc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008ec0:	e1d1      	b.n	8009266 <UART_SetConfig+0xca2>
 8008ec2:	bf00      	nop
 8008ec4:	40011c00 	.word	0x40011c00
 8008ec8:	58024400 	.word	0x58024400
 8008ecc:	58000c00 	.word	0x58000c00
 8008ed0:	03d09000 	.word	0x03d09000
 8008ed4:	003d0900 	.word	0x003d0900
 8008ed8:	08009a1c 	.word	0x08009a1c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ede:	2200      	movs	r2, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
 8008ee2:	60fa      	str	r2, [r7, #12]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	4ac0      	ldr	r2, [pc, #768]	; (80091ec <UART_SetConfig+0xc28>)
 8008eea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	603b      	str	r3, [r7, #0]
 8008ef4:	607a      	str	r2, [r7, #4]
 8008ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008efa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008efe:	f7f7 fa05 	bl	800030c <__aeabi_uldivmod>
 8008f02:	4602      	mov	r2, r0
 8008f04:	460b      	mov	r3, r1
 8008f06:	4610      	mov	r0, r2
 8008f08:	4619      	mov	r1, r3
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	020b      	lsls	r3, r1, #8
 8008f14:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008f18:	0202      	lsls	r2, r0, #8
 8008f1a:	6979      	ldr	r1, [r7, #20]
 8008f1c:	6849      	ldr	r1, [r1, #4]
 8008f1e:	0849      	lsrs	r1, r1, #1
 8008f20:	2000      	movs	r0, #0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4605      	mov	r5, r0
 8008f26:	eb12 0804 	adds.w	r8, r2, r4
 8008f2a:	eb43 0905 	adc.w	r9, r3, r5
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	469a      	mov	sl, r3
 8008f36:	4693      	mov	fp, r2
 8008f38:	4652      	mov	r2, sl
 8008f3a:	465b      	mov	r3, fp
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	4649      	mov	r1, r9
 8008f40:	f7f7 f9e4 	bl	800030c <__aeabi_uldivmod>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4613      	mov	r3, r2
 8008f4a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008f52:	d308      	bcc.n	8008f66 <UART_SetConfig+0x9a2>
 8008f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f5a:	d204      	bcs.n	8008f66 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008f62:	60da      	str	r2, [r3, #12]
 8008f64:	e17f      	b.n	8009266 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f6c:	e17b      	b.n	8009266 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	69db      	ldr	r3, [r3, #28]
 8008f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f76:	f040 80bd 	bne.w	80090f4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8008f7a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	dc48      	bgt.n	8009014 <UART_SetConfig+0xa50>
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	db7b      	blt.n	800907e <UART_SetConfig+0xaba>
 8008f86:	2b20      	cmp	r3, #32
 8008f88:	d879      	bhi.n	800907e <UART_SetConfig+0xaba>
 8008f8a:	a201      	add	r2, pc, #4	; (adr r2, 8008f90 <UART_SetConfig+0x9cc>)
 8008f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f90:	0800901b 	.word	0x0800901b
 8008f94:	08009023 	.word	0x08009023
 8008f98:	0800907f 	.word	0x0800907f
 8008f9c:	0800907f 	.word	0x0800907f
 8008fa0:	0800902b 	.word	0x0800902b
 8008fa4:	0800907f 	.word	0x0800907f
 8008fa8:	0800907f 	.word	0x0800907f
 8008fac:	0800907f 	.word	0x0800907f
 8008fb0:	0800903b 	.word	0x0800903b
 8008fb4:	0800907f 	.word	0x0800907f
 8008fb8:	0800907f 	.word	0x0800907f
 8008fbc:	0800907f 	.word	0x0800907f
 8008fc0:	0800907f 	.word	0x0800907f
 8008fc4:	0800907f 	.word	0x0800907f
 8008fc8:	0800907f 	.word	0x0800907f
 8008fcc:	0800907f 	.word	0x0800907f
 8008fd0:	0800904b 	.word	0x0800904b
 8008fd4:	0800907f 	.word	0x0800907f
 8008fd8:	0800907f 	.word	0x0800907f
 8008fdc:	0800907f 	.word	0x0800907f
 8008fe0:	0800907f 	.word	0x0800907f
 8008fe4:	0800907f 	.word	0x0800907f
 8008fe8:	0800907f 	.word	0x0800907f
 8008fec:	0800907f 	.word	0x0800907f
 8008ff0:	0800907f 	.word	0x0800907f
 8008ff4:	0800907f 	.word	0x0800907f
 8008ff8:	0800907f 	.word	0x0800907f
 8008ffc:	0800907f 	.word	0x0800907f
 8009000:	0800907f 	.word	0x0800907f
 8009004:	0800907f 	.word	0x0800907f
 8009008:	0800907f 	.word	0x0800907f
 800900c:	0800907f 	.word	0x0800907f
 8009010:	08009071 	.word	0x08009071
 8009014:	2b40      	cmp	r3, #64	; 0x40
 8009016:	d02e      	beq.n	8009076 <UART_SetConfig+0xab2>
 8009018:	e031      	b.n	800907e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800901a:	f7fc fa97 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 800901e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009020:	e033      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009022:	f7fc faa9 	bl	8005578 <HAL_RCC_GetPCLK2Freq>
 8009026:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009028:	e02f      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800902a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800902e:	4618      	mov	r0, r3
 8009030:	f7fd fc6e 	bl	8006910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009038:	e027      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800903a:	f107 0318 	add.w	r3, r7, #24
 800903e:	4618      	mov	r0, r3
 8009040:	f7fd fdba 	bl	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009044:	69fb      	ldr	r3, [r7, #28]
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009048:	e01f      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800904a:	4b69      	ldr	r3, [pc, #420]	; (80091f0 <UART_SetConfig+0xc2c>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f003 0320 	and.w	r3, r3, #32
 8009052:	2b00      	cmp	r3, #0
 8009054:	d009      	beq.n	800906a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009056:	4b66      	ldr	r3, [pc, #408]	; (80091f0 <UART_SetConfig+0xc2c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	08db      	lsrs	r3, r3, #3
 800905c:	f003 0303 	and.w	r3, r3, #3
 8009060:	4a64      	ldr	r2, [pc, #400]	; (80091f4 <UART_SetConfig+0xc30>)
 8009062:	fa22 f303 	lsr.w	r3, r2, r3
 8009066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009068:	e00f      	b.n	800908a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800906a:	4b62      	ldr	r3, [pc, #392]	; (80091f4 <UART_SetConfig+0xc30>)
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	e00c      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009070:	4b61      	ldr	r3, [pc, #388]	; (80091f8 <UART_SetConfig+0xc34>)
 8009072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009074:	e009      	b.n	800908a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800907a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800907c:	e005      	b.n	800908a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800907e:	2300      	movs	r3, #0
 8009080:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009082:	2301      	movs	r3, #1
 8009084:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800908a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 80ea 	beq.w	8009266 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009096:	4a55      	ldr	r2, [pc, #340]	; (80091ec <UART_SetConfig+0xc28>)
 8009098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909c:	461a      	mov	r2, r3
 800909e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80090a4:	005a      	lsls	r2, r3, #1
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	085b      	lsrs	r3, r3, #1
 80090ac:	441a      	add	r2, r3
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ba:	2b0f      	cmp	r3, #15
 80090bc:	d916      	bls.n	80090ec <UART_SetConfig+0xb28>
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090c4:	d212      	bcs.n	80090ec <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	f023 030f 	bic.w	r3, r3, #15
 80090ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	085b      	lsrs	r3, r3, #1
 80090d4:	b29b      	uxth	r3, r3
 80090d6:	f003 0307 	and.w	r3, r3, #7
 80090da:	b29a      	uxth	r2, r3
 80090dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090de:	4313      	orrs	r3, r2
 80090e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80090e8:	60da      	str	r2, [r3, #12]
 80090ea:	e0bc      	b.n	8009266 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090f2:	e0b8      	b.n	8009266 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80090f4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	dc4b      	bgt.n	8009194 <UART_SetConfig+0xbd0>
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	f2c0 8087 	blt.w	8009210 <UART_SetConfig+0xc4c>
 8009102:	2b20      	cmp	r3, #32
 8009104:	f200 8084 	bhi.w	8009210 <UART_SetConfig+0xc4c>
 8009108:	a201      	add	r2, pc, #4	; (adr r2, 8009110 <UART_SetConfig+0xb4c>)
 800910a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800910e:	bf00      	nop
 8009110:	0800919b 	.word	0x0800919b
 8009114:	080091a3 	.word	0x080091a3
 8009118:	08009211 	.word	0x08009211
 800911c:	08009211 	.word	0x08009211
 8009120:	080091ab 	.word	0x080091ab
 8009124:	08009211 	.word	0x08009211
 8009128:	08009211 	.word	0x08009211
 800912c:	08009211 	.word	0x08009211
 8009130:	080091bb 	.word	0x080091bb
 8009134:	08009211 	.word	0x08009211
 8009138:	08009211 	.word	0x08009211
 800913c:	08009211 	.word	0x08009211
 8009140:	08009211 	.word	0x08009211
 8009144:	08009211 	.word	0x08009211
 8009148:	08009211 	.word	0x08009211
 800914c:	08009211 	.word	0x08009211
 8009150:	080091cb 	.word	0x080091cb
 8009154:	08009211 	.word	0x08009211
 8009158:	08009211 	.word	0x08009211
 800915c:	08009211 	.word	0x08009211
 8009160:	08009211 	.word	0x08009211
 8009164:	08009211 	.word	0x08009211
 8009168:	08009211 	.word	0x08009211
 800916c:	08009211 	.word	0x08009211
 8009170:	08009211 	.word	0x08009211
 8009174:	08009211 	.word	0x08009211
 8009178:	08009211 	.word	0x08009211
 800917c:	08009211 	.word	0x08009211
 8009180:	08009211 	.word	0x08009211
 8009184:	08009211 	.word	0x08009211
 8009188:	08009211 	.word	0x08009211
 800918c:	08009211 	.word	0x08009211
 8009190:	08009203 	.word	0x08009203
 8009194:	2b40      	cmp	r3, #64	; 0x40
 8009196:	d037      	beq.n	8009208 <UART_SetConfig+0xc44>
 8009198:	e03a      	b.n	8009210 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800919a:	f7fc f9d7 	bl	800554c <HAL_RCC_GetPCLK1Freq>
 800919e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091a0:	e03c      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a2:	f7fc f9e9 	bl	8005578 <HAL_RCC_GetPCLK2Freq>
 80091a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091a8:	e038      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fd fbae 	bl	8006910 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091b8:	e030      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091ba:	f107 0318 	add.w	r3, r7, #24
 80091be:	4618      	mov	r0, r3
 80091c0:	f7fd fcfa 	bl	8006bb8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c8:	e028      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ca:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <UART_SetConfig+0xc2c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d012      	beq.n	80091fc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <UART_SetConfig+0xc2c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	08db      	lsrs	r3, r3, #3
 80091dc:	f003 0303 	and.w	r3, r3, #3
 80091e0:	4a04      	ldr	r2, [pc, #16]	; (80091f4 <UART_SetConfig+0xc30>)
 80091e2:	fa22 f303 	lsr.w	r3, r2, r3
 80091e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091e8:	e018      	b.n	800921c <UART_SetConfig+0xc58>
 80091ea:	bf00      	nop
 80091ec:	08009a1c 	.word	0x08009a1c
 80091f0:	58024400 	.word	0x58024400
 80091f4:	03d09000 	.word	0x03d09000
 80091f8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80091fc:	4b24      	ldr	r3, [pc, #144]	; (8009290 <UART_SetConfig+0xccc>)
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e00c      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009202:	4b24      	ldr	r3, [pc, #144]	; (8009294 <UART_SetConfig+0xcd0>)
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009206:	e009      	b.n	800921c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800920e:	e005      	b.n	800921c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800921a:	bf00      	nop
    }

    if (pclk != 0U)
 800921c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800921e:	2b00      	cmp	r3, #0
 8009220:	d021      	beq.n	8009266 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009226:	4a1c      	ldr	r2, [pc, #112]	; (8009298 <UART_SetConfig+0xcd4>)
 8009228:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800922c:	461a      	mov	r2, r3
 800922e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009230:	fbb3 f2f2 	udiv	r2, r3, r2
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	085b      	lsrs	r3, r3, #1
 800923a:	441a      	add	r2, r3
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	fbb2 f3f3 	udiv	r3, r2, r3
 8009244:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b0f      	cmp	r3, #15
 800924a:	d909      	bls.n	8009260 <UART_SetConfig+0xc9c>
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009252:	d205      	bcs.n	8009260 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	b29a      	uxth	r2, r3
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	60da      	str	r2, [r3, #12]
 800925e:	e002      	b.n	8009266 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	2201      	movs	r2, #1
 800926a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	2201      	movs	r2, #1
 8009272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2200      	movs	r2, #0
 800927a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	2200      	movs	r2, #0
 8009280:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009282:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009286:	4618      	mov	r0, r3
 8009288:	3748      	adds	r7, #72	; 0x48
 800928a:	46bd      	mov	sp, r7
 800928c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009290:	03d09000 	.word	0x03d09000
 8009294:	003d0900 	.word	0x003d0900
 8009298:	08009a1c 	.word	0x08009a1c

0800929c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092a8:	f003 0301 	and.w	r3, r3, #1
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d00a      	beq.n	80092c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	430a      	orrs	r2, r1
 80092c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	f003 0302 	and.w	r3, r3, #2
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d00a      	beq.n	80092e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ec:	f003 0304 	and.w	r3, r3, #4
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00a      	beq.n	800930a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00a      	beq.n	800932c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	430a      	orrs	r2, r1
 800932a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009330:	f003 0310 	and.w	r3, r3, #16
 8009334:	2b00      	cmp	r3, #0
 8009336:	d00a      	beq.n	800934e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689b      	ldr	r3, [r3, #8]
 800933e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	430a      	orrs	r2, r1
 800934c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009352:	f003 0320 	and.w	r3, r3, #32
 8009356:	2b00      	cmp	r3, #0
 8009358:	d00a      	beq.n	8009370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009378:	2b00      	cmp	r3, #0
 800937a:	d01a      	beq.n	80093b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	430a      	orrs	r2, r1
 8009390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800939a:	d10a      	bne.n	80093b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	605a      	str	r2, [r3, #4]
  }
}
 80093d4:	bf00      	nop
 80093d6:	370c      	adds	r7, #12
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b098      	sub	sp, #96	; 0x60
 80093e4:	af02      	add	r7, sp, #8
 80093e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093f0:	f7f8 f800 	bl	80013f4 <HAL_GetTick>
 80093f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b08      	cmp	r3, #8
 8009402:	d12f      	bne.n	8009464 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800940c:	2200      	movs	r2, #0
 800940e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f88e 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d022      	beq.n	8009464 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009426:	e853 3f00 	ldrex	r3, [r3]
 800942a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800942c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800942e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009432:	653b      	str	r3, [r7, #80]	; 0x50
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	461a      	mov	r2, r3
 800943a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800943c:	647b      	str	r3, [r7, #68]	; 0x44
 800943e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009442:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800944a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e6      	bne.n	800941e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2220      	movs	r2, #32
 8009454:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e063      	b.n	800952c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b04      	cmp	r3, #4
 8009470:	d149      	bne.n	8009506 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009472:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800947a:	2200      	movs	r2, #0
 800947c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 f857 	bl	8009534 <UART_WaitOnFlagUntilTimeout>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d03c      	beq.n	8009506 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009494:	e853 3f00 	ldrex	r3, [r3]
 8009498:	623b      	str	r3, [r7, #32]
   return(result);
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	461a      	mov	r2, r3
 80094a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094aa:	633b      	str	r3, [r7, #48]	; 0x30
 80094ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094b2:	e841 2300 	strex	r3, r2, [r1]
 80094b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d1e6      	bne.n	800948c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	3308      	adds	r3, #8
 80094c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	e853 3f00 	ldrex	r3, [r3]
 80094cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f023 0301 	bic.w	r3, r3, #1
 80094d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	3308      	adds	r3, #8
 80094dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094de:	61fa      	str	r2, [r7, #28]
 80094e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e2:	69b9      	ldr	r1, [r7, #24]
 80094e4:	69fa      	ldr	r2, [r7, #28]
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	617b      	str	r3, [r7, #20]
   return(result);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e5      	bne.n	80094be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2220      	movs	r2, #32
 80094f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2200      	movs	r2, #0
 80094fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009502:	2303      	movs	r3, #3
 8009504:	e012      	b.n	800952c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2220      	movs	r2, #32
 8009512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3758      	adds	r7, #88	; 0x58
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009544:	e049      	b.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800954c:	d045      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954e:	f7f7 ff51 	bl	80013f4 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	429a      	cmp	r2, r3
 800955c:	d302      	bcc.n	8009564 <UART_WaitOnFlagUntilTimeout+0x30>
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d101      	bne.n	8009568 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009564:	2303      	movs	r3, #3
 8009566:	e048      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f003 0304 	and.w	r3, r3, #4
 8009572:	2b00      	cmp	r3, #0
 8009574:	d031      	beq.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	69db      	ldr	r3, [r3, #28]
 800957c:	f003 0308 	and.w	r3, r3, #8
 8009580:	2b08      	cmp	r3, #8
 8009582:	d110      	bne.n	80095a6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2208      	movs	r2, #8
 800958a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f000 f839 	bl	8009604 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2208      	movs	r2, #8
 8009596:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e029      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	69db      	ldr	r3, [r3, #28]
 80095ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80095b4:	d111      	bne.n	80095da <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f81f 	bl	8009604 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e00f      	b.n	80095fa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	4013      	ands	r3, r2
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	bf0c      	ite	eq
 80095ea:	2301      	moveq	r3, #1
 80095ec:	2300      	movne	r3, #0
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	461a      	mov	r2, r3
 80095f2:	79fb      	ldrb	r3, [r7, #7]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d0a6      	beq.n	8009546 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3710      	adds	r7, #16
 80095fe:	46bd      	mov	sp, r7
 8009600:	bd80      	pop	{r7, pc}
	...

08009604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009604:	b480      	push	{r7}
 8009606:	b095      	sub	sp, #84	; 0x54
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009614:	e853 3f00 	ldrex	r3, [r3]
 8009618:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800961a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009620:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	461a      	mov	r2, r3
 8009628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800962a:	643b      	str	r3, [r7, #64]	; 0x40
 800962c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009630:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009632:	e841 2300 	strex	r3, r2, [r1]
 8009636:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	2b00      	cmp	r3, #0
 800963c:	d1e6      	bne.n	800960c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	3308      	adds	r3, #8
 8009644:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	61fb      	str	r3, [r7, #28]
   return(result);
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	4b1e      	ldr	r3, [pc, #120]	; (80096cc <UART_EndRxTransfer+0xc8>)
 8009652:	4013      	ands	r3, r2
 8009654:	64bb      	str	r3, [r7, #72]	; 0x48
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3308      	adds	r3, #8
 800965c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800965e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009660:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e5      	bne.n	800963e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009676:	2b01      	cmp	r3, #1
 8009678:	d118      	bne.n	80096ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	60bb      	str	r3, [r7, #8]
   return(result);
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	f023 0310 	bic.w	r3, r3, #16
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	461a      	mov	r2, r3
 8009696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6979      	ldr	r1, [r7, #20]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	613b      	str	r3, [r7, #16]
   return(result);
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e6      	bne.n	800967a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2220      	movs	r2, #32
 80096b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2200      	movs	r2, #0
 80096be:	675a      	str	r2, [r3, #116]	; 0x74
}
 80096c0:	bf00      	nop
 80096c2:	3754      	adds	r7, #84	; 0x54
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	effffffe 	.word	0xeffffffe

080096d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7fe ff52 	bl	8008598 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	60bb      	str	r3, [r7, #8]
   return(result);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009718:	61fb      	str	r3, [r7, #28]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	461a      	mov	r2, r3
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6979      	ldr	r1, [r7, #20]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	613b      	str	r3, [r7, #16]
   return(result);
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e6      	bne.n	8009704 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2200      	movs	r2, #0
 8009742:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f7fe ff1d 	bl	8008584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800974a:	bf00      	nop
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009752:	b480      	push	{r7}
 8009754:	b083      	sub	sp, #12
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800975a:	bf00      	nop
 800975c:	370c      	adds	r7, #12
 800975e:	46bd      	mov	sp, r7
 8009760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009764:	4770      	bx	lr

08009766 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009766:	b480      	push	{r7}
 8009768:	b083      	sub	sp, #12
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800976e:	bf00      	nop
 8009770:	370c      	adds	r7, #12
 8009772:	46bd      	mov	sp, r7
 8009774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009778:	4770      	bx	lr

0800977a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800977a:	b480      	push	{r7}
 800977c:	b083      	sub	sp, #12
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009782:	bf00      	nop
 8009784:	370c      	adds	r7, #12
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800979c:	2b01      	cmp	r3, #1
 800979e:	d101      	bne.n	80097a4 <HAL_UARTEx_DisableFifoMode+0x16>
 80097a0:	2302      	movs	r3, #2
 80097a2:	e027      	b.n	80097f4 <HAL_UARTEx_DisableFifoMode+0x66>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2224      	movs	r2, #36	; 0x24
 80097b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f022 0201 	bic.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2200      	movs	r2, #0
 80097ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3714      	adds	r7, #20
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009810:	2b01      	cmp	r3, #1
 8009812:	d101      	bne.n	8009818 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009814:	2302      	movs	r3, #2
 8009816:	e02d      	b.n	8009874 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2224      	movs	r2, #36	; 0x24
 8009824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0201 	bic.w	r2, r2, #1
 800983e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	689b      	ldr	r3, [r3, #8]
 8009846:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	430a      	orrs	r2, r1
 8009852:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f000 f84f 	bl	80098f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009872:	2300      	movs	r3, #0
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}

0800987c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b084      	sub	sp, #16
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
 8009884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800988c:	2b01      	cmp	r3, #1
 800988e:	d101      	bne.n	8009894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009890:	2302      	movs	r3, #2
 8009892:	e02d      	b.n	80098f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2224      	movs	r2, #36	; 0x24
 80098a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 0201 	bic.w	r2, r2, #1
 80098ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	430a      	orrs	r2, r1
 80098ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f811 	bl	80098f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	68fa      	ldr	r2, [r7, #12]
 80098dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2220      	movs	r2, #32
 80098e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2200      	movs	r2, #0
 80098ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3710      	adds	r7, #16
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2201      	movs	r2, #1
 800990c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009918:	e031      	b.n	800997e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800991a:	2310      	movs	r3, #16
 800991c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800991e:	2310      	movs	r3, #16
 8009920:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	0e5b      	lsrs	r3, r3, #25
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	0f5b      	lsrs	r3, r3, #29
 800993a:	b2db      	uxtb	r3, r3
 800993c:	f003 0307 	and.w	r3, r3, #7
 8009940:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	7b3a      	ldrb	r2, [r7, #12]
 8009946:	4911      	ldr	r1, [pc, #68]	; (800998c <UARTEx_SetNbDataToProcess+0x94>)
 8009948:	5c8a      	ldrb	r2, [r1, r2]
 800994a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800994e:	7b3a      	ldrb	r2, [r7, #12]
 8009950:	490f      	ldr	r1, [pc, #60]	; (8009990 <UARTEx_SetNbDataToProcess+0x98>)
 8009952:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009954:	fb93 f3f2 	sdiv	r3, r3, r2
 8009958:	b29a      	uxth	r2, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009960:	7bfb      	ldrb	r3, [r7, #15]
 8009962:	7b7a      	ldrb	r2, [r7, #13]
 8009964:	4909      	ldr	r1, [pc, #36]	; (800998c <UARTEx_SetNbDataToProcess+0x94>)
 8009966:	5c8a      	ldrb	r2, [r1, r2]
 8009968:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800996c:	7b7a      	ldrb	r2, [r7, #13]
 800996e:	4908      	ldr	r1, [pc, #32]	; (8009990 <UARTEx_SetNbDataToProcess+0x98>)
 8009970:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009972:	fb93 f3f2 	sdiv	r3, r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800997e:	bf00      	nop
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	08009a34 	.word	0x08009a34
 8009990:	08009a3c 	.word	0x08009a3c

08009994 <memset>:
 8009994:	4402      	add	r2, r0
 8009996:	4603      	mov	r3, r0
 8009998:	4293      	cmp	r3, r2
 800999a:	d100      	bne.n	800999e <memset+0xa>
 800999c:	4770      	bx	lr
 800999e:	f803 1b01 	strb.w	r1, [r3], #1
 80099a2:	e7f9      	b.n	8009998 <memset+0x4>

080099a4 <__libc_init_array>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	4d0d      	ldr	r5, [pc, #52]	; (80099dc <__libc_init_array+0x38>)
 80099a8:	4c0d      	ldr	r4, [pc, #52]	; (80099e0 <__libc_init_array+0x3c>)
 80099aa:	1b64      	subs	r4, r4, r5
 80099ac:	10a4      	asrs	r4, r4, #2
 80099ae:	2600      	movs	r6, #0
 80099b0:	42a6      	cmp	r6, r4
 80099b2:	d109      	bne.n	80099c8 <__libc_init_array+0x24>
 80099b4:	4d0b      	ldr	r5, [pc, #44]	; (80099e4 <__libc_init_array+0x40>)
 80099b6:	4c0c      	ldr	r4, [pc, #48]	; (80099e8 <__libc_init_array+0x44>)
 80099b8:	f000 f818 	bl	80099ec <_init>
 80099bc:	1b64      	subs	r4, r4, r5
 80099be:	10a4      	asrs	r4, r4, #2
 80099c0:	2600      	movs	r6, #0
 80099c2:	42a6      	cmp	r6, r4
 80099c4:	d105      	bne.n	80099d2 <__libc_init_array+0x2e>
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80099cc:	4798      	blx	r3
 80099ce:	3601      	adds	r6, #1
 80099d0:	e7ee      	b.n	80099b0 <__libc_init_array+0xc>
 80099d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099d6:	4798      	blx	r3
 80099d8:	3601      	adds	r6, #1
 80099da:	e7f2      	b.n	80099c2 <__libc_init_array+0x1e>
 80099dc:	08009a4c 	.word	0x08009a4c
 80099e0:	08009a4c 	.word	0x08009a4c
 80099e4:	08009a4c 	.word	0x08009a4c
 80099e8:	08009a50 	.word	0x08009a50

080099ec <_init>:
 80099ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ee:	bf00      	nop
 80099f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099f2:	bc08      	pop	{r3}
 80099f4:	469e      	mov	lr, r3
 80099f6:	4770      	bx	lr

080099f8 <_fini>:
 80099f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fa:	bf00      	nop
 80099fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fe:	bc08      	pop	{r3}
 8009a00:	469e      	mov	lr, r3
 8009a02:	4770      	bx	lr
